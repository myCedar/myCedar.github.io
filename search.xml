<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>7 加减 2法则</title>
    <url>/2020/05/27/7-%E5%8A%A0%E5%87%8F-2%E6%B3%95%E5%88%99/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>7 加减 2法则正式提出于美国心理学家 George A. Miller 1956年发布的论文《神奇的数字7加减2：我们加工信息能力的某些限制》。 经过研究发现，人类头脑最好的状态能记忆含有7(±2)项信息块，在记忆了5-9项信息后人类的头脑就开始出错。 人在短时间内只能记住 5～9 个单位，即7 加减 2法则，这是大部分用户的极限，很多系统和网站使用了7 加减 2法则。 例如长用的站酷往网站，就把这一点做到了极致，在首页中导航栏之后7个标题，剩下的全部隐藏。 <img src="/Users/dell/Desktop/Doc1.files/image002.png"><img src="http://10.144.213.26:9898/wp-content/uploads/2020/05/%E5%9B%BE%E7%89%871-300x20.png"> 再例如苹果的官网、我们用的禅道。 如果大家再仔细观察，我们用的所有手机app，比如微信、支付宝、京东、淘宝等软件的底部导航都不会超过5个。 那么问题来了，如果导航或者选项卡内容很多怎么办，可以考虑用多层级来展示子段。 同样的道理，我们在设计表单输入的时候，常见有电话号码、身份证号码、银行卡号码，为了便于记忆，也可以使用此方法。 电话号码：根据用户的记忆结构 xxx xxxx xxxx 来优化用户的阅读体验，137 0915 1234 身份证号码：根据用户的记忆结构 xxxxxx  xxxx xxxx xxxx 来优化用户的阅读体验，612401 1999 0101 1234 银行卡号码：xxxx  xxxx xxxx xxxx来优化用户的阅读体验，8888 8888 8801 5953 <img src="https://image.uisdc.com/wp-content/uploads/2018/04/uisdc-sq-20180401-3.jpg"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>AST</title>
    <url>/2019/06/02/AST/</url>
    <content><![CDATA[<p>本文主要讲一种js语法树</p>
<a id="more"></a>
<h1 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h1><p>AST有很多解析的JS  如：Babylon、esprima、acorn、UglifyJS2、AST explorer。在<a href="http://esprima.org/demo/parse.html">这个网址</a>可以看到解析结果</p>
<h2 id="解析结果"><a href="#解析结果" class="headerlink" title="解析结果"></a>解析结果</h2><p>下方的的js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> c = a + b;</span><br></pre></td></tr></table></figure>
<p>展示结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;end&quot;</span>: <span class="number">37</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclaration&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="number">11</span>,</span><br><span class="line">      <span class="string">&quot;declarations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclarator&quot;</span>,</span><br><span class="line">          <span class="string">&quot;start&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="string">&quot;end&quot;</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;a&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;init&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Literal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="number">42</span>,</span><br><span class="line">            <span class="string">&quot;raw&quot;</span>: <span class="string">&quot;42&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;var&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclaration&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start&quot;</span>: <span class="number">12</span>,</span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="string">&quot;declarations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclarator&quot;</span>,</span><br><span class="line">          <span class="string">&quot;start&quot;</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="string">&quot;end&quot;</span>: <span class="number">21</span>,</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">17</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;b&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;init&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Literal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">21</span>,</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;raw&quot;</span>: <span class="string">&quot;5&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;var&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclaration&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start&quot;</span>: <span class="number">23</span>,</span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="number">37</span>,</span><br><span class="line">      <span class="string">&quot;declarations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclarator&quot;</span>,</span><br><span class="line">          <span class="string">&quot;start&quot;</span>: <span class="number">27</span>,</span><br><span class="line">          <span class="string">&quot;end&quot;</span>: <span class="number">36</span>,</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">27</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">28</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;c&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;init&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;BinaryExpression&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">31</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">36</span>,</span><br><span class="line">            <span class="string">&quot;left&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">              <span class="string">&quot;start&quot;</span>: <span class="number">31</span>,</span><br><span class="line">              <span class="string">&quot;end&quot;</span>: <span class="number">32</span>,</span><br><span class="line">              <span class="string">&quot;name&quot;</span>: <span class="string">&quot;a&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;+&quot;</span>,</span><br><span class="line">            <span class="string">&quot;right&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">              <span class="string">&quot;start&quot;</span>: <span class="number">35</span>,</span><br><span class="line">              <span class="string">&quot;end&quot;</span>: <span class="number">36</span>,</span><br><span class="line">              <span class="string">&quot;name&quot;</span>: <span class="string">&quot;b&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;var&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>esprima estraverse  escodegen babel </p>
<h3 id="esprima-解析-JS-生成-AST"><a href="#esprima-解析-JS-生成-AST" class="headerlink" title="esprima 解析 JS 生成 AST"></a>esprima 解析 JS 生成 AST</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> esprima = <span class="built_in">require</span>(<span class="string">&#x27;esprima&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> code = <span class="string">&#x27;function fn() &#123;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">let</span> tree = esprima.parseScript(code);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tree);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Script &#123;</span></span><br><span class="line"><span class="comment">//   type: &#x27;Program&#x27;,</span></span><br><span class="line"><span class="comment">//   body:</span></span><br><span class="line"><span class="comment">//   [ FunctionDeclaration &#123;</span></span><br><span class="line"><span class="comment">//     type: &#x27;FunctionDeclaration&#x27;,</span></span><br><span class="line"><span class="comment">//     id: [Identifier],</span></span><br><span class="line"><span class="comment">//     params: [],</span></span><br><span class="line"><span class="comment">//     body: [BlockStatement],</span></span><br><span class="line"><span class="comment">//     generator: false,</span></span><br><span class="line"><span class="comment">//     expression: false,</span></span><br><span class="line"><span class="comment">//     async: false &#125; ],</span></span><br><span class="line"><span class="comment">//   sourceType: &#x27;script&#x27; &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="estraverse-遍历-AST"><a href="#estraverse-遍历-AST" class="headerlink" title="estraverse 遍历 AST"></a>estraverse 遍历 AST</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> esprima = <span class="built_in">require</span>(<span class="string">&#x27;esprima&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> estraverse = <span class="built_in">require</span>(<span class="string">&#x27;estraverse&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> code = <span class="string">&#x27;function fn() &#123;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历路径</span></span><br><span class="line">estraverse.traverse(esprima.parseScript(code), &#123;</span><br><span class="line">  <span class="function"><span class="title">enter</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;enter&#x27;</span>, node.type);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">leave</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;leave&#x27;</span>, node.type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// enter Program</span></span><br><span class="line"><span class="comment">// enter FunctionDeclaration</span></span><br><span class="line"><span class="comment">// enter Identifier</span></span><br><span class="line"><span class="comment">// leave Identifier</span></span><br><span class="line"><span class="comment">// enter BlockStatement</span></span><br><span class="line"><span class="comment">// leave BlockStatement</span></span><br><span class="line"><span class="comment">// leave FunctionDeclaration</span></span><br><span class="line"><span class="comment">// leave Program</span></span><br></pre></td></tr></table></figure>
<h3 id="escodegen-将AST重新生成为源码："><a href="#escodegen-将AST重新生成为源码：" class="headerlink" title="escodegen 将AST重新生成为源码："></a>escodegen 将AST重新生成为源码：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> esprima = <span class="built_in">require</span>(<span class="string">&#x27;esprima&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> estraverse = <span class="built_in">require</span>(<span class="string">&#x27;estraverse&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> escodegen = <span class="built_in">require</span>(<span class="string">&#x27;escodegen&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> code = <span class="string">&#x27;function fn() &#123;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line"><span class="keyword">let</span> tree = esprima.parseScript(code);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">estraverse.traverse(tree, &#123;</span><br><span class="line">  <span class="function"><span class="title">enter</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断类型，改变函数名称</span></span><br><span class="line">    <span class="keyword">if</span> (node.type === <span class="string">&#x27;FunctionDeclaration&#x27;</span>) &#123;</span><br><span class="line">      node.id.name = <span class="string">&#x27;ast&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新生成JS源码</span></span><br><span class="line"><span class="keyword">let</span> result = escodegen.generate(tree);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// function ast() &#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="AST三板斧："><a href="#AST三板斧：" class="headerlink" title="AST三板斧："></a>AST三板斧：</h3><ul>
<li>通过 esprima 把源码转化为AST</li>
<li>通过 estraverse 遍历并更新AST</li>
<li>通过 escodegen 将AST重新生成源码</li>
<li>UglifyJS2进行代码混淆压缩</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>BFF</title>
    <url>/2019/06/02/BFF/</url>
    <content><![CDATA[<p>本文主要讲一种前端设计思想</p>
<a id="more"></a>
<p>参照<a href="https://www.jianshu.com/p/eb1875c62ad3">这个网站</a></p>
<h2 id="什么是BFF"><a href="#什么是BFF" class="headerlink" title="什么是BFF"></a>什么是BFF</h2><p>BFF，即 Backend For Frontend（服务于前端的后端），也就是服务器设计 API 时会考虑前端的使用，并在服务端直接进行业务逻辑的处理，又称为用户体验适配器。</p>
<h2 id="什么时候用BFF"><a href="#什么时候用BFF" class="headerlink" title="什么时候用BFF"></a>什么时候用BFF</h2><ol>
<li>多端运用<blockquote>
<p>我们在设计 API 时会考虑到不同设备的需求，也就是为不同的设备提供不同的 API，虽然它们可能是实现相同的功能，但因为不同设备的特殊性，它们对服务端的 API 访问也各有其特点，需要区别处理。</p>
</blockquote>
</li>
<li>服务聚合<blockquote>
<p>随着微服务的兴起，原本在同一个进程内运行的业务流程被拆分到了不同的服务中。这在增加业务灵活性的同时，也让前端的调用变得更复杂。BFF 的出现为前端应用提供了一个对业务服务调用的聚合点，它屏蔽了复杂的服务调用链，让前端可以聚焦在所需要的数据上，而不用关注底层提供这些数据的服务。</p>
</blockquote>
</li>
<li>非必要，莫新增<blockquote>
<p>我们在看到 BFF 带来的各种好处的同时，也要注意到它所带来的代码重复和工作量增加方面的问题。如果与已有 BFF 功能类似，且展现数据的要求也相近的话，一定要谨慎对待新增 BFF 的行为。因此，建议非必要，莫新增。</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol>
<li>访问控制<blockquote>
<p>例如，服务中的权限控制，将所有服务中的权限控制集中在 BFF 层，使下层服务更加纯粹和独立。</p>
</blockquote>
</li>
<li>应用缓存<blockquote>
<p>项目中时常存在一些需要缓存的临时数据，此时 BFF 作为业务的汇聚点，距离用户请求最近，遂将该缓存操作放在 BFF 层。</p>
</blockquote>
</li>
<li>第三方入口<blockquote>
<p>在业务中需要与第三交互时，将该交互放在 BFF 层，这样可以只暴露必要信息给第三方，从而便于控制第三方的访问。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS单位</title>
    <url>/2019/09/09/CSS%E5%8D%95%E4%BD%8D/</url>
    <content><![CDATA[<p>对css常用单位的总结</p>
<a id="more"></a>
<h2 id="常用单位"><a href="#常用单位" class="headerlink" title="常用单位"></a>常用单位</h2><p>px(像素)  rem（相对单位，相对html单位）  em（相对父亲单位）   百分比   vw（百分比）   vh（百分比）  mm（毫米）  cm（厘米）  pt（镑）<br>vmin（屏幕相对最小值）  vmax（屏幕相对最大值）</p>
<h2 id="常见PC分辨率"><a href="#常见PC分辨率" class="headerlink" title="常见PC分辨率"></a>常见PC分辨率</h2><p>1024 * 600 （常见8.9寸电脑使用）<br>1024 * 768（常用10.4、12.1、14.1、15寸电脑使用）4:3<br>1280 * 1024（常用14.1、15寸电脑使用）5:4<br>1600 * 900 16:9 (非主流)<br>1440 * 1050（常用15、16.1寸电脑使用）4:3<br>1600 * 1200（常用15、16.1寸电脑使用）4:3<br>1280 * 800（常见10.8、12.1、15.4寸电脑使用）16:10<br>1366 * 768（常见15.2寸电脑使用）15:10 （主流）<br>1280 * 854（不常见）16:9<br>1440 * 900（仅苹果17寸电脑使用）16:10<br>1600 * 1024（不常见）14:9<br>1680 * 1050（常见15.4、20寸电脑使用）16:10<br>1920 * 1080 16:9 （主流）<br>1920 * 1200（常见20寸电脑使用）16:10</p>
<h2 id="pc单位使用"><a href="#pc单位使用" class="headerlink" title="pc单位使用"></a>pc单位使用</h2><p>如果是电脑端，一般使用px作为css常用单位，如果要涉及响应式布局，可以采取如下的方案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 超小屏幕（手机，小于 768px） *&#x2F;</span><br><span class="line">&#x2F;* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;* 小屏幕（平板，大于等于 768px） *&#x2F;</span><br><span class="line">@media (min-width: @screen-sm-min) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 中等屏幕（桌面显示器，大于等于 992px） *&#x2F;</span><br><span class="line">@media (min-width: @screen-md-min) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 大屏幕（大桌面显示器，大于等于 1200px） *&#x2F;</span><br><span class="line">@media (min-width: @screen-lg-min) &#123; ... &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当然对于一些后台系统，我们通常采用百分比加（min-width:px及max-width:px）的方式。<br>这种方式可以布满整个屏幕。减少滚动条的产生。<br>但是如果为了追求更好的动画效果，建议还是做成定宽的页面。可以实现更炫酷的动画效果。</p>
<h2 id="移动端单位"><a href="#移动端单位" class="headerlink" title="移动端单位"></a>移动端单位</h2><p>rem支持：  ios 4.1+  IE9+  安卓-chrome 18+  ios-chrome 安卓自带 2.1+<br>由于手机大小以及dpi的不同，所以手机尽量不使用px或者其他单位<br>我们选用rem会适配更多的电脑，当然em也是可以的。相对单位 手机会自行做计算<br>但是我们注意的是，手机换算以后，会保留整数的像素值大小。</p>
<p>如果做一个页面的这种的 （vw，vh）也是一个比较好的选择，在手机端来说。<br>可见区域的百分比。尤其是那种滑动一页直接翻过去的这种。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 默认根元素 10px</span><br><span class="line">html&#123;</span><br><span class="line">  font-size:62.5%; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外，需要提到的felxable.js，可以看一下</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO的使用</title>
    <url>/2019/05/26/HEXO/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="编辑要求"><a href="#编辑要求" class="headerlink" title="编辑要求"></a>编辑要求</h3><p>必须包含title、date、categories、tags</p>
]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>user</tag>
      </tags>
  </entry>
  <entry>
    <title>html模板</title>
    <url>/2019/05/27/HTML%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>HTML模版指的是团队使用的初始化HTML文件，里面会根据不同平台而采用不一样的设置，一般主要不同的设置就是 mata 标签的设置，以下是 PC 和移动端的 HTML 模版。</p>
<a id="more"></a>
<h2 id="HTML5标准模版"><a href="#HTML5标准模版" class="headerlink" title="HTML5标准模版"></a>HTML5标准模版</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-dns-prefetch-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-store, must-revalidate&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;Wed, 26 Feb 1997 08:21:57 GMT&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5标准模版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h2><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-dns-prefetch-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-store, must-revalidate&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;Wed, 26 Feb 1997 08:21:57 GMT&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>移动端HTML模版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!-- DNS预解析 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-dns-prefetch-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;your keywords&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;your description&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;author,email address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-store, must-revalidate&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;Wed, 26 Feb 1997 08:21:57 GMT&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie-stand&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>PC端HTML模版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DNS预解析 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Inquirer</title>
    <url>/2019/06/24/Inquirer/</url>
    <content><![CDATA[<p>主要讲了命令行交互工具 inquirer</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://github.com/SBoudrias/Inquirer.js">github地址</a><br><code>npm install inquirer</code></p>
<h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><h3 id="inquirer-prompt-questions-gt-promise"><a href="#inquirer-prompt-questions-gt-promise" class="headerlink" title="inquirer.prompt(questions) -&gt; promise"></a>inquirer.prompt(questions) -&gt; promise</h3><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>type：input, number, confirm, list, rawlist, expand, checkbox, password, editor<br>name：（String）将答案存储在answers散列中时使用的名称。如果名称包含句点，则它将在答案哈希中定义路径。<br>message：（String | Function）要打印的问题。如果定义为函数，则第一个参数将是当前查询者会话的答案。默认为name的值（后跟冒号）。<br>default：（String | Number | Boolean | Array | Function）如果未输入任何内容，则使用默认值，或返回默认值的函数。如果定义为函数，则第一个参数将是当前查询者会话的答案。<br>choices：（Array | Function）选择数组或返回选择数组的函数。如果定义为函数，则第一个参数将是当前查询者会话的答案。数组值可以是简单的数字，字符串或包含名称（在列表中显示）的对象，值（保存在答案哈希中）和短（在选择后显示）属性。 choices数组还可以包含Separator。<br>validate :( Function）接收用户输入并回答hash。如果值有效则应返回true，否则返回错误消息（String）。如果返回false，则提供默认错误消息。<br>filter :( Function）接收用户输入并返回要在程序中使用的过滤值。返回的值将添加到Answers哈希。<br>transformer :( Function）接收用户输入，回答散列和选项标志，并返回转换后的值以显示给用户。转换仅影响编辑时显示的内容。它不会修改答案哈希。<br>when :( Function，Boolean）接收当前用户的答案哈希，并且应该返回true或false，具体取决于是否应该询问此问题。该值也可以是一个简单的布尔值。<br>pageSize：（Number）更改使用list，rawList，expand或checkbox时将呈现的行数。<br>prefix：（String）更改默认前缀消息。<br>suffix：（String）更改默认后缀消息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x2F;* Preferred way: with promise *&#x2F;</span><br><span class="line">  filter() &#123;</span><br><span class="line">    return new Promise(&#x2F;* etc... *&#x2F;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;* Legacy way: with this.async *&#x2F;</span><br><span class="line">  validate: function (input) &#123;</span><br><span class="line">    &#x2F;&#x2F; Declare function as asynchronous, and save the done callback</span><br><span class="line">    var done &#x3D; this.async();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Do async stuff</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">      if (typeof input !&#x3D;&#x3D; &#39;number&#39;) &#123;</span><br><span class="line">        &#x2F;&#x2F; Pass the return value in the done callback</span><br><span class="line">        done(&#39;You need to provide a number&#39;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; Pass the return value in the done callback</span><br><span class="line">      done(null, true);</span><br><span class="line">    &#125;, 3000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Answers"><a href="#Answers" class="headerlink" title="Answers"></a>Answers</h4><p>Key: The name property of the question object<br>Value: (Depends on the prompt)<br>    + confirm: (Boolean)<br>    + input : User input (filtered if filter is defined) (String)<br>    + number: User input (filtered if filter is defined) (Number)<br>    + rawlist, list : Selected choice value (or name if no value specified) (String) </p>
<h4 id="Separator"><a href="#Separator" class="headerlink" title="Separator"></a>Separator</h4><p>分割线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; In the question object</span><br><span class="line">choices: [ &quot;Choice A&quot;, new inquirer.Separator(), &quot;choice B&quot; ]</span><br><span class="line"> &gt; Choice A</span><br><span class="line">   --------</span><br><span class="line">   Choice B</span><br></pre></td></tr></table></figure>
<h3 id="inquirer-registerPrompt-name-prompt"><a href="#inquirer-registerPrompt-name-prompt" class="headerlink" title="inquirer.registerPrompt(name, prompt)"></a>inquirer.registerPrompt(name, prompt)</h3><ul>
<li>name (string) name of the this new prompt. (used for question type)</li>
<li>prompt (object) the prompt object itself (the plugin)<h4 id="autocomplete"><a href="#autocomplete" class="headerlink" title="autocomplete"></a>autocomplete</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inquirer.registerPrompt(&#39;autocomplete&#39;, require(&#39;inquirer-autocomplete-prompt&#39;));</span><br><span class="line">inquirer.prompt(&#123;</span><br><span class="line">  type: &#39;autocomplete&#39;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 例子</span><br><span class="line">inquirer.registerPrompt(&#39;autocomplete&#39;, require(&#39;inquirer-autocomplete-prompt&#39;));</span><br><span class="line">inquirer.prompt([&#123;</span><br><span class="line">  type: &#39;autocomplete&#39;,</span><br><span class="line">  name: &#39;from&#39;,</span><br><span class="line">  message: &#39;Select a state to travel from&#39;,</span><br><span class="line">  source: function(answersSoFar, input) &#123;</span><br><span class="line">    return myApi.searchStates(input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]).then(function(answers) &#123;</span><br><span class="line">  &#x2F;&#x2F;etc</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="checkbox-plus"><a href="#checkbox-plus" class="headerlink" title="checkbox-plus"></a>checkbox-plus</h4>具有自动填充和其他添加功能的复选框列表<h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4>使用数字键盘和箭头键可自定义日期/时间选择器<h4 id="inquirer-select-line"><a href="#inquirer-select-line" class="headerlink" title="inquirer-select-line"></a>inquirer-select-line</h4>在一行的后边 或者前边插入   获得索引值<h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4>命令历史记录和动态自动完成功能的简单提示<h4 id="inquirer-emoji"><a href="#inquirer-emoji" class="headerlink" title="inquirer-emoji"></a>inquirer-emoji</h4>表情<h4 id="inquirer-chalk-pipe"><a href="#inquirer-chalk-pipe" class="headerlink" title="inquirer-chalk-pipe"></a>inquirer-chalk-pipe</h4>可以对输出的文字进行chalk<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inquirer.registerPrompt(&#39;chalk-pipe&#39;, require(&#39;inquirer-chalk-pipe&#39;));</span><br><span class="line">const inquirer &#x3D; require(&#39;inquirer&#39;)</span><br><span class="line">const chalkPipe &#x3D; require(&#39;chalk-pipe&#39;)</span><br><span class="line"></span><br><span class="line">inquirer.prompt([</span><br><span class="line">  &#123;</span><br><span class="line">    type: &#39;input&#39;,</span><br><span class="line">    name: &#39;fav_color&#39;,</span><br><span class="line">    message: &quot;What&#39;s your favorite color&quot;,</span><br><span class="line">    transformer: function(color) &#123;</span><br><span class="line">      return chalkPipe(color)(color);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<h4 id="inquirer-search-checkbox"><a href="#inquirer-search-checkbox" class="headerlink" title="inquirer-search-checkbox"></a>inquirer-search-checkbox</h4>可搜索的查询者复选框<h4 id="inquirer-prompt-suggest"><a href="#inquirer-prompt-suggest" class="headerlink" title="inquirer-prompt-suggest"></a>inquirer-prompt-suggest</h4>一些常用输入的建议<h4 id="inquirer-file-tree-selection-prompt"><a href="#inquirer-file-tree-selection-prompt" class="headerlink" title="inquirer-file-tree-selection-prompt"></a>inquirer-file-tree-selection-prompt</h4>树状结构的目录<h4 id="inquirer-fuzzy-path"><a href="#inquirer-fuzzy-path" class="headerlink" title="inquirer-fuzzy-path"></a>inquirer-fuzzy-path</h4>提示 模糊 文件/目录选择。</li>
</ul>
<h3 id="inquirer-createPromptModule-gt-prompt-function"><a href="#inquirer-createPromptModule-gt-prompt-function" class="headerlink" title="inquirer.createPromptModule() -&gt; prompt function"></a>inquirer.createPromptModule() -&gt; prompt function</h3><p>Create a self contained inquirer module. If you don’t want to affect other libraries that also rely on inquirer when you overwrite or add new prompt types.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var prompt &#x3D; inquirer.createPromptModule();</span><br><span class="line">prompt(questions).then(&#x2F;* ... *&#x2F;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>inquirer</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-with</title>
    <url>/2019/06/05/JS-with/</url>
    <content><![CDATA[<p>主要讲了js的with字段的一些用法及理解。</p>
<a id="more"></a>
<p>with语句可以在不造成性能损失的情況下，减少变量的长度。其造成的附加计算量很少。使用’with’可以减少不必要的指针路径解析运算。需要注意的是，很多情況下，也可以不使用with语句，而是使用一个临时变量来保存指针，来达到同样的效果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var b &#x3D; &#123;a:2&#125;;</span><br><span class="line"></span><br><span class="line">function sayA(obj)&#123;</span><br><span class="line">    var a &#x3D; 1;</span><br><span class="line">    with(b)&#123;a&#x3D;5;c &#x3D; 6;&#125;</span><br><span class="line">    console.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayA();</span><br><span class="line">console.log(b.c);</span><br><span class="line">console.log(b.a);</span><br><span class="line">&#x2F;&#x2F; 输出结果</span><br><span class="line">6 undefined 5</span><br></pre></td></tr></table></figure>
<ul>
<li>在with语句块中，只是改变了对变量的遍历顺序，由原本的从执行环境开始变为从with语句的对象开始。当尝试在with语句块中修改变量时，会搜索with语句的对象是否有该变量，有就改变对象的值，没有就创建，但是创建的变量依然属于with语句块所在的执行环境，并不属于with对象。</li>
<li>离开with语句块后，遍历顺序就会再次变成从执行环境开始。</li>
<li>with 会把没有存在的变量赋值 挂载在当前作用域下，生命伴随当前作用域。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS规范</title>
    <url>/2019/05/27/JS%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><p>统一团队的编码规范，有助于代码的维护。本章是传统意义上的 <code>Style Guideline</code>，目的是统一一些相对主观化的代码风格。</p>
<a id="more"></a>
<h3 id="单行代码块"><a href="#单行代码块" class="headerlink" title="单行代码块"></a>单行代码块</h3><p>在单行代码块中使用空格</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123;bar = <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123; bar = <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="大括号风格"><a href="#大括号风格" class="headerlink" title="大括号风格"></a>大括号风格</h3><p>在编程过程中，大括号风格与缩进风格紧密联系，用来描述大括号相对代码块位置的方法有很多。在 JavaScript 中，主要有三种风格，如下：</p>
<ul>
<li><p><strong>One True Brace Style</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  bar()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  baz()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Stroustrup</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  bar()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  baz()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Allman</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (foo)</span><br><span class="line">&#123;</span><br><span class="line">  bar()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  baz()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>我们团队约定使用 <code>One True Brace Style</code> 风格</p>
<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>当命名变量时，主流分为驼峰式命名（variableName）和下划线命名（variable_name）两大阵营。</p>
<blockquote>
<p>团队约定使用驼峰式命名</p>
</blockquote>
<h3 id="拖尾逗号"><a href="#拖尾逗号" class="headerlink" title="拖尾逗号"></a>拖尾逗号</h3><p>在 ECMAScript5 里面，对象字面量中的拖尾逗号是合法的，但在 IE8（非 IE8 文档模式）下，当出现拖尾逗号，则会抛出错误。</p>
<p>拖尾逗号的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  age: <span class="string">&#x27;22&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拖尾逗号的好处是，简化了对象和数组添加或删除元素，我们只需要修改新增的行即可，并不会增加差异化的代码行数。</p>
<blockquote>
<p>因为拖尾逗号有好也有不好，所以团队约定允许在最后一个元素或属性与闭括号 <code>]</code> 或 <code>&#125;</code> 在不同行时，可以（但不要求）使用拖尾逗号。当在同一行时，禁止使用拖尾逗号。</p>
</blockquote>
<h3 id="逗号空格"><a href="#逗号空格" class="headerlink" title="逗号空格"></a>逗号空格</h3><p>逗号前后的空格可以提高代码的可读性，团队约定在逗号后面使用空格，逗号前面不加空格。</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>,bar = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span> , bar = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span> ,bar = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>, bar = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="逗号风格"><a href="#逗号风格" class="headerlink" title="逗号风格"></a>逗号风格</h3><p>逗号分隔列表时，在 JavaScript 中主要有两种逗号风格：</p>
<ul>
<li>标准风格，逗号放置在当前行的末尾</li>
<li>逗号前置风格，逗号放置在下一行的开始位置</li>
</ul>
<blockquote>
<p>团队约定使用标准风格</p>
</blockquote>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line">,</span><br><span class="line">bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line">, bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = [<span class="string">&#x27;name&#x27;</span></span><br><span class="line">          , <span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>,</span><br><span class="line">    bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = [<span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="计算属性的空格"><a href="#计算属性的空格" class="headerlink" title="计算属性的空格"></a>计算属性的空格</h3><p>团队约定在对象的计算属性内，禁止使用空格</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj[<span class="string">&#x27;foo&#x27;</span> ]</span><br><span class="line">obj[ <span class="string">&#x27;foo&#x27;</span>]</span><br><span class="line">obj[ <span class="string">&#x27;foo&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj[<span class="string">&#x27;foo&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="拖尾换行"><a href="#拖尾换行" class="headerlink" title="拖尾换行"></a>拖尾换行</h3><p>在非空文件中，存在拖尾换行是一个常见的 <code>UNIX</code> 风格，它的好处是可以方便在串联和追加文件时不会打断 <code>Shell</code> 的提示。在日常的项目中，保留拖尾换行的好处是，可以减少版本控制时的代码冲突。</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 此处是新的一行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以通过 .editorconfig 添加 EOL</p>
</blockquote>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>为了避免语法错误，团队约定在函数调用时，禁止使用空格</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn ()</span><br><span class="line">fn</span><br><span class="line">()</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn()</span><br></pre></td></tr></table></figure>

<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>代码保持一致的缩进，是作为工程师的职业素养。但缩进用两个空格，还是四个空格，是用 <code>Tab</code> 还是空格呢？这样的争论太多了，也得不出答案。本规范结合了市面上优秀的开源项目，姑且约定使用 <code>空格</code> 来缩进，而且缩进使用两个空格。</p>
<p>那是不是不能使用 <code>Tab</code> 进行缩进了？我们可以通过配置 <code>.editorconfig</code> ，将 <code>Tab</code> 自动转换为空格。</p>
<h3 id="对象字面量的键值缩进"><a href="#对象字面量的键值缩进" class="headerlink" title="对象字面量的键值缩进"></a>对象字面量的键值缩进</h3><p>团队约定对象字面量的键和值之间不能存在空格，且要求对象字面量的冒号和值之间存在一个空格</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&#x27;foo&#x27;</span> : <span class="string">&#x27;haha&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;haha&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造函数首字母大写"><a href="#构造函数首字母大写" class="headerlink" title="构造函数首字母大写"></a>构造函数首字母大写</h3><p>在 JavaScript 中 <code>new</code> 操作符用来创建某个特定类型的对象的一个实例，该类型的对象是由一个构造函数表示的。由于构造函数只是常规函数，唯一区别是使用 <code>new</code> 来调用。所以我们团队约定构造函数的首字母要大小，以此来区分构造函数和普通函数。</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fooItem = <span class="keyword">new</span> foo()</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fooItem = <span class="keyword">new</span> Foo()</span><br></pre></td></tr></table></figure>

<h3 id="构造函数的参数"><a href="#构造函数的参数" class="headerlink" title="构造函数的参数"></a>构造函数的参数</h3><p>在 JavaScript 中，通过 <code>new</code> 调用构造函数时，如果不带参数，可以省略后面的圆括号。但这样会造成与整体的代码风格不一致，所以团队约定使用圆括号</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure>

<h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>链式调用如果放在同一行，往往会造成代码的可读性差，但有些时候，短的链式调用并不会影响美观。所以本规范约定一行最多只能有四个链式调用，超过就要求换行。</p>
<h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>空白行对于分离代码逻辑有帮助，但过多的空行会占据屏幕的空间，影响可读性。团队约定最大连续空行数为 2</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="链式赋值"><a href="#链式赋值" class="headerlink" title="链式赋值"></a>链式赋值</h3><p>链式赋值容易造成代码的可读性差，所以团队约定禁止使用链式赋值</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>JavaScript 允许在一个声明中，声明多个变量。团队约定在声明变量时，一个声明只能有一个变量</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="keyword">var</span> b</span><br><span class="line"><span class="keyword">var</span> c</span><br></pre></td></tr></table></figure>

<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>JavaScript 在所有类 C 语言中是比较独特的，它不需要在每个语句的末尾有分号。在很多情况下，JavaScript 引擎可以确定一个分号应该在什么位置然后自动添加它。此特征被称为 自动分号插入 (ASI)，被认为是 JavaScript 中较为有争议的特征。</p>
<p>团队中对于是否应该使用分号，也有许多争论，本规范推荐不使用分号，因为我们认为好的工程师应该知道什么时候该加，什么时候不该加。</p>
<p>相关参考 ：<a href="http://eslint.org/docs/rules/semi">semi</a></p>
<h3 id="代码块空格"><a href="#代码块空格" class="headerlink" title="代码块空格"></a>代码块空格</h3><p>一致性是任何风格指南的重要组成部分。虽然在哪里放置块的开括号纯属个人偏好，但在整个项目中应该保持一致。不一致的风格将会分散读者阅读代码的注意力。</p>
<blockquote>
<p>团队约定代码块前要添加空格</p>
</blockquote>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a)&#123;</span><br><span class="line">  b()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">  b()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数声明的空格"><a href="#函数声明的空格" class="headerlink" title="函数声明的空格"></a>函数声明的空格</h3><p>当格式化一个函数，函数名或 function 关键字与左括号之间允许有空白。命名函数要求函数名和 function 关键字之间有空格，但是匿名函数要求不加空格。</p>
<blockquote>
<p>团队约定函数括号前要加空格</p>
</blockquote>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="操作符的空格"><a href="#操作符的空格" class="headerlink" title="操作符的空格"></a>操作符的空格</h3><p>团队约定操作符前后都需要添加空格</p>
<p><em>不推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">1</span>+<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><em>推荐</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">1</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>Unicode 字节顺序标记 (BOM) 用来指定代码单元是高字节序还是低字节序。也就是说，是高位在前还是低位在前。UTF-8 不需要 BOM 来表明字节顺序，因为单个字节并不影响字节顺序。</p>
<p>相信不少同学遇到过 BOM 的坑，这里不多说了，切记不要使用 windows 的记事本改代码！</p>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS语法规范</title>
    <url>/2019/05/27/JS%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="语言规范"><a href="#语言规范" class="headerlink" title="语言规范"></a>语言规范</h2><p>JavaScript 是一种客户端脚本语言，这里列出了编写 JavaScript 时需要遵守的规则。</p>
<a id="more"></a>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li><p>基本类型</p>
<ul>
<li>字符串</li>
<li>数值</li>
<li>布尔类型</li>
<li>null</li>
<li>undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> bar = foo</span><br><span class="line"></span><br><span class="line">bar = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar) <span class="comment">// 1, 9</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复杂类型</p>
<ul>
<li>object</li>
<li>array</li>
<li>function</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> bar = foo</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]) <span class="comment">// 9, 9</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><code>const</code> 和 <code>let</code> 都是块级作用域，<code>var</code> 是函数级作用域</p>
<ul>
<li><p>对所有引用都使用 <code>const</code>，不要使用 <code>var</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果引用是可变动的，则使用 <code>let</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul>
<li><p>请使用字面量值创建对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>别使用保留字作为对象的键值，这样在 IE8 下不会运行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="keyword">default</span>: &#123;&#125;,  <span class="comment">// default 是保留字</span></span><br><span class="line">  common: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  defaults: &#123;&#125;,</span><br><span class="line">  common: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请使用对象方法的简写方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item.value + val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addValue</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.value + val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请使用对象属性值的简写方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> job = <span class="string">&#x27;FrontEnd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;</span><br><span class="line">  job: job</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;</span><br><span class="line">  job</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象属性值的简写方式要和声明式的方式分组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> job = <span class="string">&#x27;FrontEnd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> department = <span class="string">&#x27;JDC&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;</span><br><span class="line">  sex: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  job,</span><br><span class="line">  age: <span class="number">25</span>,</span><br><span class="line">  department</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;</span><br><span class="line">  job,</span><br><span class="line">  department,</span><br><span class="line">  sex: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li><p>请使用字面量值创建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = []</span><br></pre></td></tr></table></figure>
</li>
<li><p>向数组中添加元素时，请使用 <code>push</code> 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> items = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">items[items.length] = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">items.push(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用拓展运算符 <code>...</code> 复制数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = []</span><br><span class="line"><span class="keyword">const</span> itemsCopy = []</span><br><span class="line"><span class="keyword">const</span> len = items.length</span><br><span class="line"><span class="keyword">let</span> i</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">itemsCopy = [...items]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数组的 <code>map</code> 等方法时，请使用 <code>return</code> 声明，如果是单一声明语句的情况，可省略 <code>return</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> x * y</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> flat = &#123;&#125;</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">memo, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item)</span><br><span class="line">  flat[index] = flatten</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> flat = &#123;&#125;</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">memo, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item)</span><br><span class="line">  flat[index] = flatten</span><br><span class="line">  <span class="keyword">return</span> flatten</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">&#x27;Mockingbird&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">&#x27;Harper Lee&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">&#x27;Mockingbird&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">&#x27;Harper Lee&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><ul>
<li><p>当需要使用对象的多个属性时，请使用解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当需要使用数组的多个值时，请同样使用解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数需要回传多个值时，请使用对象的解构，而不是数组的解构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [top, right, bottom, left]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是数组解构，那么在调用时就需要考虑数据的顺序</span></span><br><span class="line"><span class="keyword">const</span> [top, xx, xxx, left] = doSomething()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; top, right, bottom, left &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时不需要考虑数据的顺序</span></span><br><span class="line"><span class="keyword">const</span> &#123; top, left &#125; = doSomething()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li><p>字符串统一使用单引号的形式 <code>&#39;&#39;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> department = <span class="string">&quot;JDC&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> department = <span class="string">&#x27;JDC&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串太长的时候，请不要使用字符串连接符换行 <code>\</code>，而是使用 <code>+</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;凹凸实验室 凹凸实验室 凹凸实验室&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;凹凸实验室 凹凸实验室 凹凸实验室&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;凹凸实验室 凹凸实验室&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>程序化生成字符串时，请使用模板字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> str = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, test].join()</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;b&#x27;</span> + test</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`ab<span class="subst">$&#123;test&#125;</span>`</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li><p>请使用函数声明，而不是函数表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不要在非函数代码块中声明函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (isUse) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> test</span><br><span class="line"><span class="keyword">if</span> (isUse) &#123;</span><br><span class="line">  test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不要使用 <code>arguments</code>，可以选择使用 <code>...</code></p>
<blockquote>
<p><code>arguments</code> 只是一个类数组，而 <code>...</code> 是一个真正的数组</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不要更改函数参数的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  opts = opts || &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ul>
<li><p>使用 <code>class</code>，避免直接操作 <code>prototype</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span> (<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>._queue = [..contents]</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="built_in">this</span>._queue[<span class="number">0</span>]</span><br><span class="line">  <span class="built_in">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">contents = []</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._queue = [...contents]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop () &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="built_in">this</span>._queue[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul>
<li><p>使用标准的 ES6 模块语法 <code>import</code> 和 <code>export</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;./util&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = util</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Util</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">import</span> &#123; Util &#125; <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Util</span><br></pre></td></tr></table></figure>
</li>
<li><p>不要使用 <code>import</code> 的通配符 <code>*</code>，这样可以确保你只有一个默认的 export</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Util <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul>
<li><p>不要使用 <code>iterators</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  sum += num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">numbers.forEach(<span class="function"><span class="params">num</span> =&gt;</span> sum += num)</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><ul>
<li><p>使用 <code>.</code> 来访问对象属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> joke = &#123;</span><br><span class="line">  name: <span class="string">&#x27;haha&#x27;</span>,</span><br><span class="line">  age: <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> name = joke[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> name = joke.name</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ul>
<li><p>声明变量时，请使用 <code>const</code>、<code>let</code> 关键字，如果没有写关键字，变量就会暴露在全局上下文中，这样很可能会和现有变量冲突，另外，也很难明确该变量的作用域是什么。这里推荐使用 <code>const</code> 来声明变量，我们需要避免全局命名空间的污染。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">demo = <span class="keyword">new</span> Demo()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> demo = <span class="keyword">new</span> Demo()</span><br></pre></td></tr></table></figure>
</li>
<li><p>将所有的 <code>const</code> 和 <code>let</code> 分组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="keyword">const</span> b</span><br><span class="line"><span class="keyword">let</span> c</span><br><span class="line"><span class="keyword">const</span> d</span><br><span class="line"><span class="keyword">let</span> e</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> b</span><br><span class="line"><span class="keyword">const</span> d</span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="keyword">let</span> c</span><br><span class="line"><span class="keyword">let</span> e</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h3><ul>
<li><p><code>var</code> 存在变量提升的情况，即 <code>var</code> 声明会被提升至该作用域的顶部，但是他们的赋值并不会。而 <code>const</code> 和 <code>let</code> 并不存在这种情况，他们被赋予了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let">Temporal Dead Zones, TDZ</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(notDefined)   <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declareButNotAssigned)  <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> declaredButNotAssigned</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned)   <span class="comment">// =&gt; undefined</span></span><br><span class="line">  declaredButNotAssigned = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned)   <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> declaredButNotAssigned)  <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="keyword">const</span> declaredButNotAssigned = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>匿名函数的变量名会提升，但函数内容不会</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anonymous)  <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  anonymous()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>命名的函数表达式的变量名会被提升，但函数名和函数函数内容并不会</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named)  <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named()   <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower()  <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Flying&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named)  <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named()   <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;named&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><ul>
<li><p>我们遵循 <code>Standard</code> 的规范，不使用分号。</p>
<blockquote>
<p>关于应不应该使用分号的讨论有很多，本规范认为非必要的时候，应该不使用分号，好的 <code>JS</code> 程序员应该清楚场景下是一定要加分号的，相信你也是名好的开发者。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="string">&#x27;good&#x27;</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">&#x27;hahaha&#x27;</span>;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="string">&#x27;good&#x27;</span></span><br><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">&#x27;hahaha&#x27;</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="标准特性"><a href="#标准特性" class="headerlink" title="标准特性"></a>标准特性</h3><p>为了代码的可移植性和兼容性，我们应该最大化的使用标准方法，例如优先使用 <code>string.charAt(3)</code> 而不是 <code>string[3]</code></p>
<h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>由于 <code>eval</code> 方法比较 <code>evil</code>，所以我们约定禁止使用该方法</p>
<h3 id="with"><a href="#with" class="headerlink" title="with() {}"></a>with() {}</h3><p>由于 <code>with</code> 方法会产生神奇的作用域，所以我们也是禁止使用该方法的</p>
<h3 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for-in 循环"></a>for-in 循环</h3><p>推荐使用 <code>for in</code> 语法，但是在对对象进行操作时，容易忘了检测 <code>hasOwnProperty(key)</code>，所以我们启用了 <code>ESLint</code> 的 <code>guard-for-in</code> 选项</p>
<blockquote>
<p>对数组进行 <code>for in</code> 的时候，顺序是不固定的</p>
</blockquote>
<h3 id="修改内置对象的原型"><a href="#修改内置对象的原型" class="headerlink" title="修改内置对象的原型"></a>修改内置对象的原型</h3><p>不要修改内置对象，如 <code>Object</code> 和 <code>Array</code></p>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS队列</title>
    <url>/2019/07/16/JS%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>讲的基本的JS队列（事件循环）</p>
<a id="more"></a>
<h2 id="JS运行"><a href="#JS运行" class="headerlink" title="JS运行"></a>JS运行</h2><p>Javascript 是单线程，所有同步任务都在主线程上执行，形成一个执行栈(Execution Context Stack)。而执行同步任务的时候，会发出一些异步操作，这些异步操作并不会影响主进程的执行，一旦执行栈中的所有同步任务执行完毕，引擎就会读取任务队列，按照时间顺序执行.</p>
<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>宏任务：script(整体代码)、setTimeout、setInterval、I/O、事件、postMessage、 MessageChannel、setImmediate (Node.js)<br>微任务：Promise.then、 MutaionObserver、process.nextTick (Node.js)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const promise &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">  resolve(5)</span><br><span class="line">  console.log(2)</span><br><span class="line">&#125;).then(val &#x3D;&gt; &#123;</span><br><span class="line">  console.log(val)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(() &#x3D;&gt; &#123;</span><br><span class="line">  console.log(3)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(4)</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(6)</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 执行结果</span><br><span class="line">124536</span><br></pre></td></tr></table></figure>
<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><ul>
<li>全局队列（script）执行完毕后，开始循环从 微队列-&gt;宏队列-&gt;微队列-&gt;宏队列…这种执行顺序执行下去</li>
<li>当一个宏观队列执行完毕，立刻执行最近添加的微观队列。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM上传JS包</title>
    <url>/2019/05/28/NPM%E5%B7%A5%E5%85%B7JS%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h2 id="NPM上传包"><a href="#NPM上传包" class="headerlink" title="NPM上传包"></a>NPM上传包</h2><a id="more"></a>
<h3 id="初始化JS"><a href="#初始化JS" class="headerlink" title="初始化JS"></a>初始化JS</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行npm init  目录如下</span><br><span class="line">|---index.js &#x2F;&#x2F; 主文件</span><br><span class="line">|---package.json &#x2F;&#x2F; 包文件</span><br><span class="line">|---README.md &#x2F;&#x2F; 使用说明</span><br><span class="line">|---test.js &#x2F;&#x2F; 测试JS</span><br></pre></td></tr></table></figure>
<p>以下方的代码为例<br>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> region = <span class="built_in">require</span>(<span class="string">&#x27;./area.js&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> parse = &#123;</span><br><span class="line">	result:&#123;</span><br><span class="line">		name:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		mobile:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		phone:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		province:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		city:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		area:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		detail:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">		zipCode:<span class="string">&#x27;&#x27;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	address:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	parseAddress:<span class="function"><span class="keyword">function</span>(<span class="params">address</span>)</span>&#123;</span><br><span class="line">		<span class="function"><span class="title">if</span>(<span class="params"> address &amp;&amp; <span class="keyword">typeof</span> address == <span class="string">&#x27;string&#x27;</span> </span>)</span>&#123;</span><br><span class="line">			<span class="built_in">this</span>.address = address.trim()</span><br><span class="line">			<span class="built_in">this</span>.parseResult()</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">this</span>.result = &#123;</span><br><span class="line">				name:<span class="string">&quot;&quot;</span>,</span><br><span class="line">				mobile:<span class="string">&quot;&quot;</span>,</span><br><span class="line">				phone:<span class="string">&quot;&quot;</span>,</span><br><span class="line">				province:<span class="string">&quot;&quot;</span>,</span><br><span class="line">				city:<span class="string">&quot;&quot;</span>,</span><br><span class="line">				area:<span class="string">&quot;&quot;</span>,</span><br><span class="line">				detail:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">				zipCode:<span class="string">&#x27;&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.result</span><br><span class="line">	&#125;,</span><br><span class="line">	parseResult:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(<span class="regexp">/\r\n/g</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="regexp">/\t/g</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">		<span class="keyword">var</span> search = [<span class="string">&#x27;地址&#x27;</span>, <span class="string">&#x27;收货地址&#x27;</span>, <span class="string">&#x27;收货人&#x27;</span>, <span class="string">&#x27;收件人&#x27;</span>, <span class="string">&#x27;收货&#x27;</span>, <span class="string">&#x27;邮编&#x27;</span>, <span class="string">&#x27;电话&#x27;</span>, <span class="string">&#x27;：&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;；&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;，&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;。&#x27;</span>]</span><br><span class="line">		search.forEach(<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(str, <span class="string">&#x27;g&#x27;</span>), <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(<span class="regexp">/ &#123;2,&#125;/g</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">		<span class="comment">// 找出手机</span></span><br><span class="line">		<span class="keyword">var</span> mobileReg = <span class="regexp">/(86-[1][0-9]&#123;10&#125;)|(86[1][0-9]&#123;10&#125;)|([1][0-9]&#123;10&#125;)/g</span>;</span><br><span class="line">		<span class="keyword">var</span> mobile = mobileReg.exec(<span class="built_in">this</span>.address);</span><br><span class="line">		<span class="keyword">if</span> (mobile) &#123;</span><br><span class="line">			<span class="built_in">this</span>.result.mobile = mobile[<span class="number">0</span>];</span><br><span class="line">			<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(mobile[<span class="number">0</span>], <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 找出固话</span></span><br><span class="line">		<span class="keyword">var</span> phoneReg = <span class="regexp">/(([0-9]&#123;3,4&#125;-)[0-9]&#123;7,8&#125;)|([0-9]&#123;12&#125;)|([0-9]&#123;11&#125;)|([0-9]&#123;10&#125;)|([0-9]&#123;9&#125;)|([0-9]&#123;8&#125;)|([0-9]&#123;7&#125;)/g</span>;</span><br><span class="line">		<span class="keyword">var</span> phone = phoneReg.exec(<span class="built_in">this</span>.address);</span><br><span class="line">		<span class="keyword">if</span> (phone) &#123;</span><br><span class="line">			<span class="built_in">this</span>.result.phone = phone[<span class="number">0</span>];</span><br><span class="line">			<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(phone[<span class="number">0</span>], <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 邮政编码</span></span><br><span class="line">		<span class="keyword">const</span> zipReg = <span class="regexp">/([0-9]&#123;6&#125;)/g</span>;</span><br><span class="line">		<span class="keyword">const</span> zip = zipReg.exec(<span class="built_in">this</span>.address);</span><br><span class="line">		<span class="keyword">if</span> (zip) &#123;</span><br><span class="line">			<span class="built_in">this</span>.result.zipCode = zip[<span class="number">0</span>];</span><br><span class="line">			<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(zip[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 空格缩减</span></span><br><span class="line">		<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(<span class="regexp">/ &#123;2,&#125;/</span>,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">		<span class="comment">// 省市区的识别</span></span><br><span class="line">		<span class="keyword">var</span> region = <span class="built_in">this</span>.parseRegion()</span><br><span class="line">		<span class="function"><span class="title">if</span>(<span class="params">region.weights &gt;= <span class="number">2</span></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">this</span>.result.province = region.province</span><br><span class="line">			<span class="built_in">this</span>.result.city = region.city</span><br><span class="line">			<span class="built_in">this</span>.result.area = region.area</span><br><span class="line">			<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(<span class="built_in">this</span>.result.province, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">			<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(<span class="built_in">this</span>.result.city, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">			<span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(<span class="built_in">this</span>.result.area, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">var</span> provinceKey = [<span class="string">&#x27;特别行政区&#x27;</span>, <span class="string">&#x27;古自治区&#x27;</span>, <span class="string">&#x27;维吾尔自治区&#x27;</span>, <span class="string">&#x27;壮族自治区&#x27;</span>, <span class="string">&#x27;回族自治区&#x27;</span>, <span class="string">&#x27;自治区&#x27;</span>, <span class="string">&#x27;直辖&#x27;</span>, <span class="string">&#x27;省&#x27;</span>, <span class="string">&#x27;市&#x27;</span>];</span><br><span class="line">  		<span class="keyword">var</span> cityKey = [<span class="string">&#x27;布依族苗族自治州&#x27;</span>, <span class="string">&#x27;苗族侗族自治州&#x27;</span>, <span class="string">&#x27;自治州&#x27;</span>, <span class="string">&#x27;州&#x27;</span>, <span class="string">&#x27;市&#x27;</span>, <span class="string">&#x27;县&#x27;</span>];</span><br><span class="line">  		<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> provinceKey) &#123;</span><br><span class="line">	        <span class="keyword">if</span> (<span class="built_in">this</span>.address.indexOf(provinceKey[k]) &gt;-<span class="number">1</span>) &#123;</span><br><span class="line">	          <span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(provinceKey[k], <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> cityKey) &#123;</span><br><span class="line">	        <span class="keyword">if</span> (<span class="built_in">this</span>.address.indexOf(cityKey[key]) &gt;-<span class="number">1</span>) &#123;</span><br><span class="line">	          <span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(cityKey[key], <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  取消双空格  和  前后空格</span></span><br><span class="line">        <span class="built_in">this</span>.address = <span class="built_in">this</span>.address.replace(<span class="regexp">/ &#123;2,&#125;/</span>,<span class="string">&#x27; &#x27;</span>).trim();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> info = <span class="built_in">this</span>.address.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">var</span> name = info[<span class="number">0</span>] || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        info.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        	<span class="function"><span class="title">if</span>(<span class="params">item.length &lt; name.length</span>)</span>&#123;</span><br><span class="line">        		name = item</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> detail = <span class="built_in">this</span>.address.replace(name,<span class="string">&#x27; &#x27;</span>).replace(<span class="regexp">/ /</span>,<span class="string">&#x27;&#x27;</span>).trim();</span><br><span class="line">        <span class="built_in">this</span>.result.name = name</span><br><span class="line">        <span class="built_in">this</span>.result.detail = detail</span><br><span class="line">	&#125;,</span><br><span class="line">	parseRegion:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">		<span class="keyword">var</span> citys = []</span><br><span class="line">		<span class="keyword">var</span> result = &#123;</span><br><span class="line">			province:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">			city:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">			area:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">			weights:<span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">		region.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">items</span>)</span>&#123;</span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params">that.address.indexOf(items.name) &gt; -<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">				citys.push(&#123;</span><br><span class="line">					province:items.name,</span><br><span class="line">					weights:<span class="number">1</span></span><br><span class="line">				&#125;)</span><br><span class="line">				items.city.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">					<span class="function"><span class="title">if</span>(<span class="params">that.address.indexOf(item.name) &gt; -<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">						<span class="built_in">Object</span>.assign(citys[citys.length-<span class="number">1</span>],&#123;</span><br><span class="line">							city:item.name,</span><br><span class="line">							weights:<span class="number">2</span></span><br><span class="line">						&#125;)</span><br><span class="line">						item.area.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">							<span class="function"><span class="title">if</span>(<span class="params">that.address.indexOf(name) &gt; -<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">								<span class="built_in">Object</span>.assign(citys[citys.length-<span class="number">1</span>],&#123;</span><br><span class="line">									area:name,</span><br><span class="line">									weights:<span class="number">3</span></span><br><span class="line">								&#125;)</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				items.city.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">					citys.push(&#123;</span><br><span class="line">						province:items.name,</span><br><span class="line">					&#125;)</span><br><span class="line">					<span class="function"><span class="title">if</span>(<span class="params">that.address.indexOf(item.name) &gt; -<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">						<span class="built_in">Object</span>.assign(citys[citys.length-<span class="number">1</span>],&#123;</span><br><span class="line">							city:item.name,</span><br><span class="line">							weights:<span class="number">1</span></span><br><span class="line">						&#125;)</span><br><span class="line">						item.area.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">							<span class="function"><span class="title">if</span>(<span class="params">that.address.indexOf(name) &gt; -<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">								<span class="built_in">Object</span>.assign(citys[citys.length-<span class="number">1</span>],&#123;</span><br><span class="line">									area:name,</span><br><span class="line">									weights:<span class="number">2</span></span><br><span class="line">								&#125;)</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		citys.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params">result.weights &lt; item.weights</span>)</span>&#123;</span><br><span class="line">				<span class="built_in">Object</span>.assign(result,item)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = parse</span><br></pre></td></tr></table></figure>
<p>package.json</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;parse-address-cn&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;解析地址姓名及电话&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;node test.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>:[</span><br><span class="line">  	<span class="string">&quot;parse&quot;</span>,</span><br><span class="line">  	<span class="string">&quot;address&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;akcedar@163.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>test.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = <span class="built_in">require</span>(<span class="string">&#x27;./index.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa.parseAddress(<span class="string">&#x27;陕西省安康市汉滨区果园小区 13222222222 张三  725000&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa.parseAddress(<span class="string">&#x27;上海市青浦区华南路555号 张三&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa.parseAddress(<span class="string">&#x27;张三上海市青浦区华南路555号 12222222222&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa.parseAddress(<span class="string">&#x27;张北京上海市青浦区华南路555号 12222222222&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa.parseAddress(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(aa.parseAddress([]))</span><br></pre></td></tr></table></figure>

<p>编写万上述文件后<br><code>npm login //输入以下命令，会提示输入用户名、密码、邮箱。</code><br>继续执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//退出当前文件夹，开始命令行发布包，命令如下：</span></span><br><span class="line">npm publish testxxxxx</span><br></pre></td></tr></table></figure>
<p>验证下载<br><code>npm install testxxxxx</code><br>强制删除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除要用force强制删除。超过24小时就不能删除了。自己把握好时间。</span></span><br><span class="line">npm --force unpublish testxxxxx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM搭建</title>
    <url>/2019/05/29/NPM%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="NPM搭建"><a href="#NPM搭建" class="headerlink" title="NPM搭建"></a>NPM搭建</h2><p>本章会介绍 CNPM 的基础部署方法</p>
<a id="more"></a>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li>部署的宿体，如服务器、云主机、自己的电脑等； </li>
<li>数据库，支持 MySQL、PostgreSQL、MariaDB，如果使用 SQLite<br>则无需准备； </li>
<li>Git 客户端（推荐）。<h3 id="克隆-CNPM"><a href="#克隆-CNPM" class="headerlink" title="克隆 CNPM"></a>克隆 CNPM</h3></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/cnpm/cnpmjs.org.git</span></span><br><span class="line"><span class="comment">//安装依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>enableCluster</th>
<th>是否启用 cluster-worker 模式启动服务，默认 false，生产环节推荐为 true;</th>
</tr>
</thead>
<tbody><tr>
<td>registryPort</td>
<td>API 专用的 registry 服务端口，默认 7001</td>
</tr>
<tr>
<td>webPort</td>
<td>Web 服务端口，默认 7002</td>
</tr>
<tr>
<td>bindingHost</td>
<td>监听绑定的 Host，默认为 127.0.0.1，如果外面架了一层本地的 Nginx 反向代理或者 Apache 反向代理的话推荐不用改</td>
</tr>
<tr>
<td>sessionSecret</td>
<td>session 用的</td>
</tr>
<tr>
<td>logdir</td>
<td>日志目录</td>
</tr>
<tr>
<td>uploadDir</td>
<td>临时上传文件目录</td>
</tr>
<tr>
<td>viewCache</td>
<td>视图模板缓存是否开启，默认为 false</td>
</tr>
<tr>
<td>enableCompress</td>
<td>是否开启 gzip 压缩，默认为 false</td>
</tr>
<tr>
<td>admins</td>
<td>管理员们，这是一个 JSON Object，对应各键名为各管理员的用户名，键值为其邮箱，默认为 { fengmk2: ‘fengmk2@gmail.com’, admin: ‘admin@cnpmjs.org’, dead_horse: ‘dead_horse@qq.com’ }</td>
</tr>
<tr>
<td>logoURL</td>
<td>Logo 地址</td>
</tr>
<tr>
<td>adBanner</td>
<td>广告 Banner 的地址</td>
</tr>
<tr>
<td>customReadmeFile</td>
<td>实际上我们看到的 cnpmjs.org 首页中间一大堆冗长的介绍是一个 Markdown 文件转化而成的，你可以设置该项来自行替换这个文件</td>
</tr>
<tr>
<td>customFooter</td>
<td>自定义页脚模板</td>
</tr>
<tr>
<td>npmClientName</td>
<td>默认为 cnpm，如果你有自己开发或者 fork 的 npm 客户端的话请改成自己的 CLI 命令，这个应该会在一些页面的说明处替换成你所写的</td>
</tr>
<tr>
<td>backupFilePrefix</td>
<td>备份目录</td>
</tr>
<tr>
<td>database</td>
<td>数据库相关配置，为一个对象，默认如果不配置将会是一个~/.<a href="http://cnpmjs.org/data.sqlite">http://cnpmjs.org/data.sqlite</a> 的 SQLite；</td>
</tr>
<tr>
<td>db</td>
<td>数据的库名；</td>
</tr>
<tr>
<td>username</td>
<td>数据库用户名</td>
</tr>
<tr>
<td>password</td>
<td>数据库密码；</td>
</tr>
<tr>
<td>dialect</td>
<td>数据库适配器，可选 “mysql”、”sqlite”、”postgres”、”mariadb”，默认为”sqlite”；</td>
</tr>
<tr>
<td>host</td>
<td>数据库地址；</td>
</tr>
<tr>
<td>port</td>
<td>数据库端口；</td>
</tr>
<tr>
<td>pool</td>
<td>数据库连接池相关配置，为一个对象</td>
</tr>
<tr>
<td>maxConnections</td>
<td>最大连接数，默认为 10；</td>
</tr>
<tr>
<td>minConnections</td>
<td>最小连接数，默认为 0；</td>
</tr>
<tr>
<td>maxIdleTime</td>
<td>单条链接最大空闲时间，默认为 30000 毫秒；</td>
</tr>
<tr>
<td>storege</td>
<td>仅对 SQLite 配置有效，数据库地址，默认为 ~/.cnpmjs/data.sqlite；</td>
</tr>
<tr>
<td>nfs</td>
<td>包文件系统处理对象，为一个 Node.js 对象，默认是 fs-cnpm 这个包，并且配置在~/.cnpmjs/nfs 目录下，也就是说默认所有同步的包都会被放在这个目录下</td>
</tr>
<tr>
<td>registryHost</td>
<td></td>
</tr>
<tr>
<td>enablePrivate</td>
<td>是否开启私有模式，默认为 false；如果是私有模式则只有管理员能发布包，其它人只能从源站同步包；如果是非私有模式则所有登录用户都能发布包</td>
</tr>
<tr>
<td>scopes</td>
<td>非管理员发布包的时候只能用以 scopes 里面列举的命名空间为前缀来发布，如果没设置则无法发布，也就是说这是一个必填项，默认为 [ ‘@cnpm’, ‘@cnpmtest’, ‘@cnpm-test’ ]，</td>
</tr>
<tr>
<td>privatePackages</td>
<td>就如该配置项的注释所述，出于历史包袱的原因，有些已经存在的私有包（可能之前是用 Git 的方式安装的）并没有以命名空间的形式来命名，而这种包本来是无法上传到 CNPM 的，这个配置项数组就是用来加这些例外白名单的，默认为一个空数组</td>
</tr>
<tr>
<td>sourceNpmRegistry</td>
<td>更新源 NPM 的 registry 地址，默认为<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></td>
</tr>
<tr>
<td>sourceNpmRegistryIsCNpm</td>
<td>源 registry 是否为 CNPM，默认为 true，如果你使用的源是官方 NPM 源，请将其设为 false；</td>
</tr>
<tr>
<td>syncByInstall</td>
<td>如果安装包的时候发现包不存在，则尝试从更新源同步，默认为 true</td>
</tr>
<tr>
<td>syncModel</td>
<td>更新模式（不过我觉得是个 typo），有下面几种模式可以选择，默认为 “none”;”none”：永不同步，只管理私有用户上传的包，其它源包会直接从源站获取；”exist”：定时同步已经存在于数据库的包；”all”：定时同步所有源站的包</td>
</tr>
<tr>
<td>syncInterval</td>
<td>同步间隔，默认为 “10m” 即十分钟</td>
</tr>
<tr>
<td>syncDevDependencies</td>
<td>是否同步每个包里面的 devDependencies 包们，默认为 false</td>
</tr>
<tr>
<td>badgeSubject</td>
<td>包的 badge 显示的名字，默认为 cnpm</td>
</tr>
<tr>
<td>userService</td>
<td>用户验证接口，默认为 null，即无用户相关功能也就是无法有用户去上传包，该部分需要自己实现接口功能并配置，如与公司的 Gitlab 相对接，这也是后话了</td>
</tr>
<tr>
<td>alwaysAuth</td>
<td>是否始终需要用户验证，即便是 $ cnpm install 等命令</td>
</tr>
<tr>
<td>httpProxy</td>
<td>代理地址设置</td>
</tr>
</tbody></table>
<h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>如果你使用的是 SQLite 的话，数据库是自动就好了的，可以忽略该步。</p>
<p>其它数据库需要自行导入初始数据库结构。</p>
<p>初始数据库脚本在 docs/db.sql 里面，你可以用一些 GUI 工具将数据导入，也可以直接进入命令行导入。</p>
<p>比如你用的是 MySQL，就可以在本机操作 MySQL。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ mysql -u yourname -p</span><br><span class="line">mysql&gt; use cnpmjs;</span><br><span class="line">mysql&gt; source docs/db.sql</span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev：调试模式启动；</span><br><span class="line">npm run test：跑测试；</span><br><span class="line">npm run start：启动 CNPM；</span><br><span class="line">npm run status：查看 CNPM 启动状态；</span><br><span class="line">npm run stop：停止 CNPM。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>QRCode</title>
    <url>/2019/06/02/QRCODE%20%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<p>QRCode.js 是一个用于生成二维码的 JavaScript 库。主要是通过获取 DOM 的标签,再通过 HTML5 Canvas 绘制而成,不依赖任何库</p>
<a id="more"></a>
<p>QRCode.js ：<a href="https://www.jianshu.com/p/b53eae520de4">https://www.jianshu.com/p/b53eae520de4</a></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;qrcode&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&#x27;createQrcode();&#x27;</span>&gt;生成二维码&lt;button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> qrcode = <span class="keyword">new</span> QRCode(<span class="string">&#x27;qrcode&#x27;</span>, &#123;</span><br><span class="line">    width: <span class="number">150</span>,  <span class="attr">height</span>: <span class="number">150</span>,</span><br><span class="line">&#125;)</span><br><span class="line">qrcode.clear();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createQrcode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    qrcode.clear();</span><br><span class="line">    <span class="keyword">var</span> QRCodeStr = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">    qrcode.makeCode(QRCodeStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小程序里面生成二维码"><a href="#小程序里面生成二维码" class="headerlink" title="小程序里面生成二维码"></a>小程序里面生成二维码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 存放二维码的图片--&gt;</span><br><span class="line">  &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;container&#x27;</span>&gt;</span><br><span class="line">    &lt;image style=<span class="string">&#x27;width:310rpx;height:310rpx;margin-top:30rpx;&#x27;</span> src=<span class="string">&quot;&#123;&#123;imagePath&#125;&#125;&quot;</span>&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;!-- 画布，用来画二维码，只用来站位，不用来显示 --&gt;</span><br><span class="line">  &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;canvas-box&quot;</span>&gt;</span><br><span class="line">    &lt;canvas hidden=<span class="string">&quot;&#123;&#123;canvasHidden&#125;&#125;&quot;</span> style=<span class="string">&quot;width: 170px;height: 170px;background:#f1f1f1;&quot;</span> canvas-id=<span class="string">&quot;mycanvas&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//小程序js的配置</span></span><br><span class="line"><span class="keyword">var</span> QR = <span class="built_in">require</span>(<span class="string">&quot;../../utils/qrcode.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 页面的初始数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">data: &#123;</span><br><span class="line">  canvasHidden: <span class="literal">false</span>, <span class="comment">//默认不让canvas二维码隐藏，否则不能生成二维码</span></span><br><span class="line">  imagePath: <span class="string">&quot;&quot;</span> <span class="comment">//弹出框二维码显示图片地址</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> initUrl = <span class="string">&#x27;https://www.baidu.com?id=&#x27;</span>+id;</span><br><span class="line">  <span class="comment">//创建二维码</span></span><br><span class="line">  that.createQrCode(initUrl, <span class="string">&quot;mycanvas&quot;</span>, <span class="number">170</span>, <span class="number">170</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绘制二维码图片</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">createQrCode: <span class="function"><span class="keyword">function</span>(<span class="params">url, canvasId, cavW, cavH</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用插件中的draw方法，绘制二维码图片</span></span><br><span class="line">    QR.api.draw(url, canvasId, cavW, cavH);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.canvasToTempImage();</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取临时缓存照片路径，存入data中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">canvasToTempImage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="comment">//把当前画布指定区域的内容导出生成指定大小的图片，并返回文件路径。</span></span><br><span class="line"> wx.canvasToTempFilePath(&#123;</span><br><span class="line">   canvasId: <span class="string">&#x27;mycanvas&#x27;</span>,</span><br><span class="line">   success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> tempFilePath = res.tempFilePath;</span><br><span class="line">     that.setData(&#123;</span><br><span class="line">       imagePath: tempFilePath,</span><br><span class="line">       <span class="comment">// canvasHidden:true</span></span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;,</span><br><span class="line">   fail: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title>axios</title>
    <url>/2020/01/10/axios/</url>
    <content><![CDATA[<p>谈axios的请求方式</p>
<a id="more"></a>
<h2 id="使用Content-Type"><a href="#使用Content-Type" class="headerlink" title="使用Content-Type"></a>使用Content-Type</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 发起一个请求 使用post  参数未data，get参数为params</span><br><span class="line">axios(&#123;</span><br><span class="line">  method: &#39;post&#39;,</span><br><span class="line">  url: &#39;&#x2F;user&#x2F;12345&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#39;Fred&#39;,</span><br><span class="line">    lastName: &#39;Flintstone&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 是否携带cookie信息</span><br><span class="line">  withCredentials: false, &#x2F;&#x2F; default</span><br><span class="line">  &#x2F;&#x2F; 响应格式</span><br><span class="line">  &#x2F;&#x2F; 可选项 &#39;arraybuffer&#39;, &#39;blob&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;</span><br><span class="line">  responseType: &#39;json&#39;, &#x2F;&#x2F; 默认值是json</span><br><span class="line">  &#x2F;&#x2F; 处理上传进度事件</span><br><span class="line">  onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">    &#x2F;&#x2F; Do whatever you want with the native progress event</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 处理下载进度事件</span><br><span class="line">  onDownloadProgress: function (progressEvent) &#123;</span><br><span class="line">    &#x2F;&#x2F; Do whatever you want with the native progress event</span><br><span class="line">  &#125;,</span><br><span class="line">  headers:&#123;</span><br><span class="line">  	Content-Type:&#39;&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="用get，post等方式"><a href="#用get，post等方式" class="headerlink" title="用get，post等方式"></a>用get，post等方式</h2><h3 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">let data &#x3D; &#123;&quot;code&quot;:&quot;1234&quot;,&quot;name&quot;:&quot;yyyy&quot;&#125;;</span><br><span class="line">axios.post(&#96;$&#123;this.$url&#125;&#x2F;test&#96;,data)</span><br><span class="line">.then(res&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&#39;res&#x3D;&gt;&#39;,res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">let data &#x3D; new FormData();</span><br><span class="line">data.append(&#39;code&#39;,&#39;1234&#39;);</span><br><span class="line">data.append(&#39;file&#39;,files[0]);</span><br><span class="line">axios.post(&#96;$&#123;this.$url&#125;&#x2F;test&#96;,data)</span><br><span class="line">.then(res&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&#39;res&#x3D;&gt;&#39;,res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import qs from &#39;qs&#39;</span><br><span class="line">let data &#x3D; &#123;&quot;test&quot;:&quot;1234&quot;&#125;;</span><br><span class="line">axios.post(&#96;$&#123;this.$url&#125;&#x2F;test&#96;,qs.stringify(&#123;</span><br><span class="line">    data</span><br><span class="line">&#125;))</span><br><span class="line">.then(res&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&#39;res&#x3D;&gt;&#39;,res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>axios在IE浏览器的接口缓存问题</title>
    <url>/2020/10/29/axios%E5%9C%A8ie%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>get方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$axios(&#123;</span><br><span class="line">    methods: &#39;get&#39;,</span><br><span class="line">    url:&quot;&quot;,</span><br><span class="line">    params:&#123;</span><br><span class="line">        date:Date.parse(new Date()) &#x2F;&#x2F;加入时间戳</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>post方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$axios(&#123;</span><br><span class="line">    methods: &#39;post&#39;,</span><br><span class="line">    url:&quot;&quot;,</span><br><span class="line">    params:&#123;</span><br><span class="line">        date:Date.parse(new Date()) &#x2F;&#x2F;加入时间戳</span><br><span class="line">    &#125;,</span><br><span class="line">    data:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>cedar</title>
    <url>/2019/07/07/cedar/</url>
    <content><![CDATA[<p>对自己现状的总结</p>
<a id="more"></a>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><table>
<thead>
<tr>
<th>描述</th>
<th>描述信息</th>
<th>描述</th>
<th>描述信息</th>
</tr>
</thead>
<tbody><tr>
<td>姓名</td>
<td>曹文松</td>
<td>性别</td>
<td>男</td>
</tr>
<tr>
<td>籍贯</td>
<td>陕西安康</td>
<td>电话</td>
<td>13167119769</td>
</tr>
<tr>
<td>生日</td>
<td>1992.01.20</td>
<td>邮箱</td>
<td><a href="mailto:&#97;&#x6b;&#x63;&#x65;&#x64;&#x61;&#x72;&#64;&#49;&#54;&#51;&#x2e;&#99;&#111;&#x6d;">&#97;&#x6b;&#x63;&#x65;&#x64;&#x61;&#x72;&#64;&#49;&#54;&#51;&#x2e;&#99;&#111;&#x6d;</a></td>
</tr>
<tr>
<td>学校</td>
<td>湖南大学</td>
<td>专业</td>
<td>热能与动力工程</td>
</tr>
</tbody></table>
<hr>
<h3 id="基本技能"><a href="#基本技能" class="headerlink" title="基本技能"></a>基本技能</h3><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><ul>
<li>熟练掌握各种标签</li>
<li>熟练掌握HTML5新增的属性及标签<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4></li>
<li>熟练掌握css属性</li>
<li>熟练运用CSS3特性实现各种动画</li>
<li>掌握flex及rem布局</li>
<li>掌握字体图标的制作及使用<h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4></li>
<li>熟练掌握基本js知识</li>
<li>熟练运用DOM、BOM操作</li>
<li>熟练运用ES6基本语法<h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4></li>
<li>熟练运用jquery及相关插件、echats，了解three.js、go.js等js插件</li>
<li>掌握boostrap、layui、easyUI等</li>
<li>熟练运用vue，了解raect、react-native。<h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h4></li>
<li>熟练开发微信小程序</li>
<li>微信公众号、微信机器人<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4></li>
<li>熟练掌握git进行代码管理</li>
<li>会运用eslint规范代码编写</li>
<li>掌握webpack打包</li>
<li>掌握NPM，会编写NPM包并发布</li>
<li>搭建过公司私有的NPM仓库<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4></li>
<li>了解网页渲染流程，会进行相关的性能优化</li>
<li>会对webpack打包进行优化</li>
<li>会对项目进行业务划分，抽离组件，实现组件开发</li>
<li>web安全</li>
<li>HTTP了解及优化<h4 id="后台-数据库"><a href="#后台-数据库" class="headerlink" title="后台+数据库"></a>后台+数据库</h4></li>
<li>使用node.js（express）编写过后台应用</li>
<li>使用ssh框架写过简单的java</li>
<li>会写简单sql</li>
</ul>
<hr>
<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul>
<li>小程序+活动页面</li>
<li>数据可视化大屏开发</li>
<li>后台管理系统</li>
<li>H5页面app</li>
<li>web开发<h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4>已上线小程序6个（最大的一个日活跃用户量2000+，腾讯评测性能优秀）<br>自己开发两个（为点餐商城类，因为审核原因未上线）<h4 id="数据可视化大屏"><a href="#数据可视化大屏" class="headerlink" title="数据可视化大屏"></a>数据可视化大屏</h4>主要使用echarts、three.js、go.js等插件实现图表及数据的展示，并使用canvas、svg、css3绘制炫酷的动画效果，灵活多变的展现各种数据，将数据语言转化为图形语言，让用户更快更好的获取信息。<h4 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h4>技术：利用vue-cli搭建vue框架，并优化webpack打包优化项，使用vue、vue-router、vuex、axios、elementUI(ant-design-vue)编写中台管理页面。<br>模块：主要包含菜单权限模块、用户模块、基础服务设置模块、订单模块、打印模块。<br>特点：主要是后台用户操作，包含表单查询、数据报表增删改查、下单、详情页展示等主要功能，一般使用菜单、导航加主页面的页面结构，主页面为百分比宽度，自适应大小分辨率，追求统一的页面风格。<h4 id="H5页面APP"><a href="#H5页面APP" class="headerlink" title="H5页面APP"></a>H5页面APP</h4>技术：使用混合开发的方式，后台安卓以及ios提供壳子，利用技术bridge实现与NA的交互。主要使用vue全家桶+mint编写相应界面及交互。<br>特点：利用原生嵌套h5页面的方式实现快速迭代开发，采用rem+flex布局方式，兼容大小屏，使用keepalive保持页面数据缓存，减少用户数据加载。<h4 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h4>技术：利用vue全家桶，或者jquery实现快速开发，追求与UI的完美展现<br>举例：以做过的人力招聘系统，为外部及内部人员提供岗位应聘的全流程服务，主要流程为信息发布、报名、笔试、面试（多轮）、最终是否聘用。此外还有应聘规则设置等页面为主流程提供服务。<br>特点：追求好看的界面，一般采用定宽的页面结构，自定义编写各种页面组件效果，追求个性化，看中web安全。</li>
</ul>
<hr>
<h2 id="自我总结"><a href="#自我总结" class="headerlink" title="自我总结"></a>自我总结</h2><p>对现有的前端技术有一定的了解，有一颗不停学习的心，阅读过一些书籍及代码文章，有合作进取的能力，希望以后能在某一方面有更加深入的研究。</p>
]]></content>
      <categories>
        <category>自己</category>
      </categories>
      <tags>
        <tag>cedar</tag>
      </tags>
  </entry>
  <entry>
    <title>chalk</title>
    <url>/2019/06/24/chalk/</url>
    <content><![CDATA[<p>本文主要讲控制台输出工具chalk,控制输出样式和颜色以及背景色</p>
<a id="more"></a>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://github.com/chalk/chalk">github</a><br><code>//安装  npm install chalk</code></p>
<h3 id="util-format"><a href="#util-format" class="headerlink" title="util.format"></a>util.format</h3><ul>
<li>％s：String将用于转换除BigInt，Object和-0之外的所有值。 BigInt值将用n表示，而没有用户定义toString函数的Objects使用带有+++ options {depth：0，colors：false，compact：3}的util.inspect（）进行检查。</li>
<li>％d：Number将用于转换除BigInt和Symbol之外的所有值。</li>
<li>％i：parseInt（value，10）用于除BigInt和Symbol之外的所有值。</li>
<li>％f：parseFloat（value）用于所有期望符号的值。</li>
<li>％j：JSON。如果参数包含循环引用，则替换为字符串’[Circular]’。</li>
<li>％o：对象。具有通用JavaScript对象格式的对象的字符串表示形式。类似于带有选项{showHidden：true，showProxy：true}的util.inspect（）。这将显示完整对象，包括非可枚举属性和代理。</li>
<li>％O：对象。具有通用JavaScript对象格式的对象的字符串表示形式。类似于util.inspect（）没有选项。这将显示完整对象，不包括非可枚举属性和代理。</li>
<li>%%：单个百分号（’％’）</li>
<li>返回：<string>格式化的字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const name &#x3D; &#39;cws&#39;;</span><br><span class="line">console.log(&#39;Hello %s&#39;), chalk.green(name);</span><br><span class="line">&#x2F;&#x2F; hello cws</span><br></pre></td></tr></table></figure>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4></li>
<li>reset : 重置样式</li>
<li>bold 加粗</li>
<li>dim 置灰</li>
<li>italic 斜体</li>
<li>underline 下划线</li>
<li>inverse 交换背景色 和文字颜色</li>
<li>hidden 隐藏</li>
<li>strikethrough 删除线 但是  支持不是很好  有的不显示</li>
<li>visible 显示<h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4></li>
<li>black</li>
<li>red</li>
<li>green</li>
<li>yellow</li>
<li>blue (On Windows the bright version is used since normal blue is illegible)</li>
<li>magenta</li>
<li>cyan</li>
<li>white</li>
<li>gray (“bright black”)</li>
<li>redBright</li>
<li>greenBright</li>
<li>yellowBright</li>
<li>blueBright</li>
<li>magentaBright</li>
<li>cyanBright</li>
<li>whiteBright<h4 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h4></li>
<li>bgBlack</li>
<li>bgRed</li>
<li>bgGreen</li>
<li>bgYellow</li>
<li>bgBlue</li>
<li>bgMagenta</li>
<li>bgCyan</li>
<li>bgWhite</li>
<li>bgBlackBright</li>
<li>bgRedBright</li>
<li>bgGreenBright</li>
<li>bgYellowBright</li>
<li>bgBlueBright</li>
<li>bgMagentaBright</li>
<li>bgCyanBright</li>
<li>bgWhiteBright<h4 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chalk.hex(&#39;#DEADED&#39;).underline(&#39;Hello, world!&#39;)</span><br><span class="line">chalk.keyword(&#39;orange&#39;)(&#39;Some orange text&#39;)</span><br><span class="line">chalk.rgb(15, 100, 204).inverse(&#39;Hello!&#39;)</span><br><span class="line">chalk.bgHex(&#39;#DEADED&#39;).underline(&#39;Hello, world!&#39;)</span><br><span class="line">chalk.bgKeyword(&#39;orange&#39;)(&#39;Some orange text&#39;)</span><br><span class="line">chalk.bgRgb(15, 100, 204).inverse(&#39;Hello!&#39;)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>chalk</tag>
      </tags>
  </entry>
  <entry>
    <title>commander</title>
    <url>/2019/06/24/commander/</url>
    <content><![CDATA[<p>本文主要讲了命令行的输入参数解析功能</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install commander</code></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const commander &#x3D; require(&#39;commander&#39;);</span><br><span class="line">const program &#x3D; new commander.Command();</span><br><span class="line">program.version(&#39;0.0.1&#39;);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .option(&#39;-d, --debug&#39;, &#39;output extra debugging&#39;)</span><br><span class="line">  .option(&#39;-s, --small&#39;, &#39;small pizza size&#39;)</span><br><span class="line">  .option(&#39;-p, --pizza-type &lt;type&gt;&#39;, &#39;flavour of pizza&#39;);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br><span class="line"></span><br><span class="line">if (program.debug) console.log(program.opts());</span><br><span class="line">console.log(&#39;pizza details:&#39;);</span><br><span class="line">if (program.small) console.log(&#39;- small pizza size&#39;);</span><br><span class="line">if (program.pizzaType) console.log(&#96;- $&#123;program.pizzaType&#125;&#96;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  命令输出内容</span><br><span class="line">$ pizza-options -d</span><br><span class="line">&#123; debug: true, small: undefined, pizzaType: undefined &#125;</span><br><span class="line">pizza details:</span><br><span class="line">$ pizza-options -p</span><br><span class="line">error: option &#96;-p, --pizza-type &lt;type&gt;&#39; argument missing</span><br><span class="line">$ pizza-options -ds -p vegetarian</span><br><span class="line">&#123; debug: true, small: true, pizzaType: &#39;vegetarian&#39; &#125;</span><br><span class="line">pizza details:</span><br><span class="line">- small pizza size</span><br><span class="line">- vegetarian</span><br><span class="line">$ pizza-options --pizza-type&#x3D;cheese</span><br><span class="line">pizza details:</span><br><span class="line">- cheese</span><br></pre></td></tr></table></figure>
<h2 id="官方案例"><a href="#官方案例" class="headerlink" title="官方案例"></a>官方案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var program &#x3D; require(&#39;commander&#39;);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .version(&#39;0.1.0&#39;)</span><br><span class="line">  .option(&#39;-C, --chdir &lt;path&gt;&#39;, &#39;change the working directory&#39;)</span><br><span class="line">  .option(&#39;-c, --config &lt;path&gt;&#39;, &#39;set config path. defaults to .&#x2F;deploy.conf&#39;)</span><br><span class="line">  .option(&#39;-T, --no-tests&#39;, &#39;ignore test hook&#39;);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(&#39;setup [env]&#39;)</span><br><span class="line">  .description(&#39;run setup commands for all envs&#39;)</span><br><span class="line">  .option(&quot;-s, --setup_mode [mode]&quot;, &quot;Which setup mode to use&quot;)</span><br><span class="line">  .action(function(env, options)&#123;</span><br><span class="line">    var mode &#x3D; options.setup_mode || &quot;normal&quot;;</span><br><span class="line">    env &#x3D; env || &#39;all&#39;;</span><br><span class="line">    console.log(&#39;setup for %s env(s) with %s mode&#39;, env, mode);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(&#39;exec &lt;cmd&gt;&#39;)</span><br><span class="line">  .alias(&#39;ex&#39;)</span><br><span class="line">  .description(&#39;execute the given remote cmd&#39;)</span><br><span class="line">  .option(&quot;-e, --exec_mode &lt;mode&gt;&quot;, &quot;Which exec mode to use&quot;)</span><br><span class="line">  .action(function(cmd, options)&#123;</span><br><span class="line">    console.log(&#39;exec &quot;%s&quot; using %s mode&#39;, cmd, options.exec_mode);</span><br><span class="line">  &#125;).on(&#39;--help&#39;, function() &#123;</span><br><span class="line">    console.log(&#39;&#39;);</span><br><span class="line">    console.log(&#39;Examples:&#39;);</span><br><span class="line">    console.log(&#39;&#39;);</span><br><span class="line">    console.log(&#39;  $ deploy exec sequential&#39;);</span><br><span class="line">    console.log(&#39;  $ deploy exec async&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(&#39;*&#39;)</span><br><span class="line">  .action(function(env)&#123;</span><br><span class="line">    console.log(&#39;deploying &quot;%s&quot;&#39;, env);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>commander</tag>
      </tags>
  </entry>
  <entry>
    <title>confluence搭建</title>
    <url>/2019/11/01/confluence%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>知识共享仓库confluence的搭建</p>
<a id="more"></a>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 利用 docker 安装</span><br><span class="line">docker pull cptactionhank&#x2F;atlassian-confluence:latest</span><br><span class="line">docker run -d --name confluence -p 8090:8090 --user root:root cptactionhank&#x2F;atlassian-confluence:latest</span><br><span class="line">&#x2F;&#x2F; 破解</span><br><span class="line">opt&#x2F;confluence&#x2F;conflence&#x2F;Web-info&#x2F;lib&#x2F;atlassian-extras-decoder-v2-3.3.0.jar</span><br><span class="line">&#x2F;&#x2F; 破解后覆盖原文件 如果使用mysql  还要加入 mysql的链接jar包 放在上边的目录下</span><br><span class="line">mysql-connector-java-5.1.44-bin</span><br><span class="line">&#x2F;&#x2F; 在页面中8090端口打开进行配置，下载资料中的文件，在本机运行下方代码，把 serveID 放入破解中进行破解。</span><br><span class="line">java -jar  confluence_keygen.jar</span><br></pre></td></tr></table></figure>
<h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><p>修改mysql的配置文件，添加如下内容</p>
<p>[mysqld]<br>character-set-server=utf8<br>collation-server=utf8_bin<br>default-storage-engine=INNODB<br>max_allowed_packet=512M<br>innodb_log_file_size=1024M<br>transaction-isolation = READ-COMMITTED</p>
<p>Note：需要Restart MySQL上述参数才能生效</p>
<p>创建confluence数据库及用户<br>mysql&gt;CREATE DATABASE confluence CHARACTER SET utf8 COLLATE utf8_bin;<br>mysql&gt;GRANT ALL PRIVILEGES ON confluence.* TO ‘confluence’@’192.168.11.246’  IDENTIFIED BY ‘mima’;</p>
<p>Note：上述Grant授权命令中的ip地址是confluence Server的ip。<br>Confluence 同理<br>mysql&gt;CREATE DATABASE confluence CHARACTER SET utf8 COLLATE utf8_bin;<br>mysql&gt;GRANT ALL PRIVILEGES ON confluence.* TO ‘confluence’@’192.168.11.246’  IDENTIFIED BY ‘mima’;</p>
<p>mysql&gt;FLUSH PRIVILEGES;<br>mysql&gt;QUIT</p>
<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p>链接：<a href="https://pan.baidu.com/s/1HZFwNc0OL5z43fNyb6ZC-A">https://pan.baidu.com/s/1HZFwNc0OL5z43fNyb6ZC-A</a><br>提取码：8j1b<br>复制这段内容后打开百度网盘手机App，操作更方便哦<br>docker复制命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从主机复制到容器sudo docker cp host_path containerID:container_path</span><br><span class="line">从容器复制到主机sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>mysql要用5.6 版本的</li>
<li>数据库要设置utf-8<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">collation_server&#x3D;utf8_unicode_ci</span><br><span class="line">character_set_server&#x3D;utf8</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">&#x2F;&#x2F; my_conf</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">collation-server&#x3D;utf8_bin</span><br><span class="line">character_set_server&#x3D;utf8</span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8&#39;</span><br><span class="line">max_allowed_packet&#x3D;256M</span><br><span class="line">innodb_log_file_size&#x3D;2GB</span><br><span class="line">sql_mode &#x3D; NO_AUTO_VALUE_ON_ZERO</span><br><span class="line">transaction-isolation&#x3D;READ-COMMITTED</span><br><span class="line">binlog_format&#x3D;row</span><br></pre></td></tr></table></figure></li>
<li>服务器内存最好2核4G</li>
<li>链接mysql要增加jar</li>
</ul>
]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>console.log</title>
    <url>/2019/06/11/console-log/</url>
    <content><![CDATA[<p>一些好玩的控制台输出</p>
<a id="more"></a>
<h3 id="figlet"><a href="#figlet" class="headerlink" title="figlet"></a>figlet</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install figlet</span><br><span class="line">var figlet &#x3D; require(&#39;figlet&#39;);</span><br><span class="line"> </span><br><span class="line">figlet(&#39;想要展现的文字&#39;, function(err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(&#39;Something went wrong...&#39;);</span><br><span class="line">        console.dir(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="佛像保佑"><a href="#佛像保佑" class="headerlink" title="佛像保佑"></a>佛像保佑</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log([</span><br><span class="line">    &quot;                   _ooOoo_&quot;,</span><br><span class="line">    &quot;                  o8888888o&quot;,</span><br><span class="line">    &quot;                  88\&quot; . \&quot;88&quot;,</span><br><span class="line">    &quot;                  (| -_- |)&quot;,</span><br><span class="line">    &quot;                  O\\  &#x3D;  &#x2F;O&quot;,</span><br><span class="line">    &quot;               ____&#x2F;&#96;---&#39;\\____&quot;,</span><br><span class="line">    &quot;             .&#39;  \\\\|     |&#x2F;&#x2F;  &#96;.&quot;,</span><br><span class="line">    &quot;            &#x2F;  \\\\|||  :  |||&#x2F;&#x2F;  \\&quot;,</span><br><span class="line">    &quot;           &#x2F;  _||||| -:- |||||-  \\&quot;,</span><br><span class="line">    &quot;           |   | \\\\\\  -  &#x2F;&#x2F;&#x2F; |   |&quot;,</span><br><span class="line">    &quot;           | \\_|  &#39;&#39;\\---&#x2F;&#39;&#39;  |   |&quot;,</span><br><span class="line">    &quot;           \\  .-\\__  &#96;-&#96;  ___&#x2F;-. &#x2F;&quot;,</span><br><span class="line">    &quot;         ___&#96;. .&#39;  &#x2F;--.--\\  &#96;. . __&quot;,</span><br><span class="line">    &quot;      .\&quot;\&quot; &#39;&lt;  &#96;.___\\_&lt;|&gt;_&#x2F;___.&#39;  &gt;&#39;\&quot;\&quot;.&quot;,</span><br><span class="line">    &quot;     | | :  &#96;- \\&#96;.;&#96;\\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |&quot;,</span><br><span class="line">    &quot;     \\  \\ &#96;-.   \\_ __\\ &#x2F;__ _&#x2F;   .-&#96; &#x2F;  &#x2F;&quot;,</span><br><span class="line">    &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;,</span><br><span class="line">    &quot;                   &#96;&#x3D;---&#x3D;&#39;&quot;,</span><br><span class="line">    &quot;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&quot;,</span><br><span class="line">    &quot;         佛祖保佑       永无BUG&quot;</span><br><span class="line">].join(&#39;\n&#39;))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>console</tag>
      </tags>
  </entry>
  <entry>
    <title>cpu and gpu</title>
    <url>/2019/09/15/cpu-and-gpu/</url>
    <content><![CDATA[<p>了解一下cpu &amp;&amp; gpu的区别</p>
<a id="more"></a>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>通俗来讲，cpu就是电脑的处理器，GPU就是显卡。CPU擅长统领全局等复杂操作，GPU擅长对大数据进行简单重复操作。CPU是从事复杂脑力劳动的教援，而GPU是进行大量并行计算的体力劳动者。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>cpu由系统内存、Cache存储器、算术逻辑单元ALU、控制器组成。<br>CPU构造复杂，协调各种复杂逻辑的计算，而GPU可以看做很多核构成的线性结构。提供了多核并行计算的基础结构，且核心数非常多，可以支撑大量数据的并行计算。<br>所以对于图形图像来说，需要进行大量简单的运算，适合gpu进行渲染。<br>2D 显示芯片在处理3D图像和特效时主要依赖CPU的处理能力，称为“软加速”。3D显示芯片是将三维图像和特效处理功能集中在显示芯片内，也即所谓的“硬件加速”功能。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>在前端的技术中，主要面临的两方面的思考，用户操作逻辑的判断计算，数据效果的展示。CSS3就采用了gpu渲染，所以在js运行的同时不会使动画卡顿，所以在今后的VR与AR中，个人认为GPU将拥有更大展现能力。<br>如今，用户追求流畅的操作体验，以及炫酷的展现效果，具体应该怎样合理的使用GPU和CPU去实现不同的效果，从而达到用户的要求。<br>本篇文章只是一个简单的思考以及开端，记下来，以后可以更好的去看看。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/19903344">设计原理</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>cpu&amp;&amp;gpu</tag>
      </tags>
  </entry>
  <entry>
    <title>docker  文件日志过大</title>
    <url>/2020/10/16/docker-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>

<p>日志地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;container\_id&#x2F;</span><br></pre></td></tr></table></figure>
<p>两种方式</p>
<p>// 删除日志后重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf </span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>// 日志文件写空</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;dev&#x2F;null &gt; \*-json.log</span><br></pre></td></tr></table></figure>
<p>终极解决办法，设置容器日志大小，仅针对新建容器有效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;:&quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;&quot;max-size&quot;:&quot;500m&quot;, &quot;max-file&quot;:&quot;3&quot;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>// 重启docker守护进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>downLoad插件</title>
    <url>/2019/09/29/downLoad%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>原生写的一个下载插件</p>
<a id="more"></a>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装</span><br><span class="line">cnpm install downloadFile</span><br><span class="line">&#x2F;&#x2F; 引入</span><br><span class="line">improt download from ‘downloadFile’</span><br><span class="line">&#x2F;&#x2F; 直接引入</span><br><span class="line">&lt;script src&#x3D;’.&#x2F;static&#x2F;downloadFile.js’&gt;</span><br><span class="line">&#x2F;&#x2F; 使用</span><br><span class="line">download(&#123; </span><br><span class="line"> url: &#39;http:&#x2F;&#x2F;localhost:8082&#x2F;unicom&#x2F;api&#x2F;open&#x2F;bjCmccOrder&#x2F;export&#39;,</span><br><span class="line"> header: &#123;</span><br><span class="line"> &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;,</span><br><span class="line"> &#39;token&#39;: &#39;token&#39;</span><br><span class="line"> &#125; ,</span><br><span class="line"> fileName: &#39;&#39;,</span><br><span class="line"> sendData: data,</span><br><span class="line"> method: &#39;get&#39;,</span><br><span class="line"> success:success,</span><br><span class="line"> error:error</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 参数</span><br><span class="line"> url-------下载地址（必填）</span><br><span class="line"> header----请求头（默认JSON）</span><br><span class="line"> fileName--下载文件名称（没有就是当前时间）</span><br><span class="line"> sendData--请求参数</span><br><span class="line"> method----get&#x2F;post,默认post</span><br><span class="line"> success---成功回调函数</span><br><span class="line"> error-----失败回调函数</span><br></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; plugin.js</span><br><span class="line">;(function(window, document) &#123;</span><br><span class="line">  &quot;use strict&quot;</span><br><span class="line">  &#x2F;*</span><br><span class="line">    obj: json对象，7个参数</span><br><span class="line">    参数  url-------下载地址（必填）</span><br><span class="line">          header----请求头（默认JSON）</span><br><span class="line">          fileName--下载文件名称（没有就是当前时间）</span><br><span class="line">          sendData--请求参数</span><br><span class="line">          method----get&#x2F;post,默认post</span><br><span class="line">          success---成功回调</span><br><span class="line">          error-----失败回调</span><br><span class="line">    使用:</span><br><span class="line">          download(&#123;</span><br><span class="line">            url: url,</span><br><span class="line">            header: &#123;</span><br><span class="line">              &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;,</span><br><span class="line">              &#39;authorization&#39;: &#39;bearer &#39; + store.getters.token</span><br><span class="line">            &#125;,</span><br><span class="line">            fileName: fileName,</span><br><span class="line">            sendData: data,</span><br><span class="line">            method: &#39;get&#39;,</span><br><span class="line">            success: success,</span><br><span class="line">            error: error</span><br><span class="line">          &#125;)</span><br><span class="line">  *&#x2F;</span><br><span class="line">  function download (obj) &#123;</span><br><span class="line">    var xhr &#x3D; new XMLHttpRequest()</span><br><span class="line">    &#x2F;&#x2F; 请求方式、url、异步 --- 默认post</span><br><span class="line">    xhr.open(obj.method ||&#39;POST&#39;, obj.url, true)</span><br><span class="line">    if (obj.header) &#123;</span><br><span class="line">      &#x2F;&#x2F; 添加请求头</span><br><span class="line">      for (var key in obj.header) &#123;</span><br><span class="line">        xhr.setRequestHeader(key, obj.header[key]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 前端请求二进制数据的时候需要设置数据响应格式</span><br><span class="line">    xhr.responseType &#x3D; &#39;arraybuffer&#39;</span><br><span class="line">    &#x2F;&#x2F; 没有传入名字就已时间命名</span><br><span class="line">    if (!obj.fileName) &#123;</span><br><span class="line">      obj.fileName &#x3D; getNowTime() + &#39;.xlsx&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.onload &#x3D; function () &#123;</span><br><span class="line">      &#x2F;&#x2F; 请求状态200 成功</span><br><span class="line">      if (xhr.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取请求头类型</span><br><span class="line">        var type &#x3D; xhr.getResponseHeader(&#39;Content-Type&#39;)</span><br><span class="line">        &#x2F;&#x2F; blob对象  处理二进制数据</span><br><span class="line">        var blob &#x3D; new Blob([xhr.response], &#123; type: type &#125;)</span><br><span class="line">        if (typeof window.navigator.msSaveBlob !&#x3D;&#x3D; &#39;undefined&#39;) &#123;</span><br><span class="line">          &#x2F;&#x2F; ie下载方法</span><br><span class="line">          window.navigator.msSaveBlob(blob, obj.fileName)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          &#x2F;&#x2F; 生产URL</span><br><span class="line">          var URL &#x3D; window.URL || window.webkitURL</span><br><span class="line">          var objectUrl &#x3D; URL.createObjectURL(blob)</span><br><span class="line">          &#x2F;&#x2F;创建a标签添加进body，并点击下载，然后移除</span><br><span class="line">          var a &#x3D; document.createElement(&#39;a&#39;)</span><br><span class="line">          if (typeof a.download &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;</span><br><span class="line">            window.location &#x3D; objectUrl</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            a.href &#x3D; objectUrl</span><br><span class="line">            a.download &#x3D; obj.fileName</span><br><span class="line">            document.body.appendChild(a)</span><br><span class="line">            a.click()</span><br><span class="line">            a.remove()</span><br><span class="line">          &#125;</span><br><span class="line">          &#x2F;&#x2F; 成功</span><br><span class="line">          obj.success &amp;&amp; obj.success()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 失败</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Blob对象来指定所要处理的数据</span><br><span class="line">        var b &#x3D; new Blob([xhr.response]);</span><br><span class="line">        &#x2F;&#x2F; FileReader</span><br><span class="line">        var r &#x3D; new FileReader();</span><br><span class="line">        &#x2F;&#x2F; 按字符读取文件内容</span><br><span class="line">        r.readAsText(b, &#39;utf-8&#39;);</span><br><span class="line">        r.onload &#x3D; function ()&#123;</span><br><span class="line">          obj.error &amp;&amp; obj.error(window.JSON.parse(r.result))</span><br><span class="line">          &#x2F;&#x2F; var a &#x3D; window.JSON.parse(r.result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 将请求发送到服务器</span><br><span class="line">    xhr.send(window.JSON.stringify(obj.sendData))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 获得当前时间</span><br><span class="line">  function getNowTime() &#123;</span><br><span class="line">    &#x2F;&#x2F; 加0</span><br><span class="line">    function add_10(num) &#123;</span><br><span class="line">      if (num &lt; 10) &#123;</span><br><span class="line">        num &#x3D; &#39;0&#39; + num</span><br><span class="line">      &#125;</span><br><span class="line">      return num;</span><br><span class="line">    &#125;</span><br><span class="line">    var myDate &#x3D; new Date();</span><br><span class="line">    var nowTime &#x3D; myDate.getFullYear() + &#39;-&#39; + add_10(myDate.getMonth()) + &#39;-&#39; + add_10(myDate.getDate()) </span><br><span class="line">    return nowTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 最后将插件对象暴露给全局对象</span><br><span class="line">  &#x2F;&#x2F; window &#x3D; (function()&#123; return this || (0, eval)(&#39;this&#39;); &#125;());</span><br><span class="line">  if (typeof module !&#x3D;&#x3D; &quot;undefined&quot; &amp;&amp; module.exports) &#123;</span><br><span class="line">    &#x2F;&#x2F; 导出模块</span><br><span class="line">    module.exports &#x3D; download;</span><br><span class="line">  &#125; else if (typeof define &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; define.amd) &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义模块</span><br><span class="line">    define(function()&#123;return download;&#125;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F; download添加到window上</span><br><span class="line">    !(&#39;download&#39; in window) &amp;&amp; (window.download &#x3D; download);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(window, document));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts自定义图表主题</title>
    <url>/2020/05/26/echarts%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E8%A1%A8%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>echarts图表默认字体是黑色，背景白色，如果遇到大屏展示，像棚改系统，需要修改默认的色系。一个一个图去修改配置项会很浪费时间。这时就需要用到echarts提供的自定义主题的功能，大大提升了开发效率。</p>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><h4 id="1-进入echarts自定义主题网站"><a href="#1-进入echarts自定义主题网站" class="headerlink" title="1. 进入echarts自定义主题网站"></a>1. 进入<a href="https://www.echartsjs.com/theme-builder/">echarts自定义主题网站</a></h4><p>可以看到默认有十几种主题   <img src="http://10.144.213.26:9898/wp-content/uploads/2020/05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200526102437.png">  </p>
<h4 id="2-配置主题"><a href="#2-配置主题" class="headerlink" title="2.配置主题"></a>2.配置主题</h4><p>如果默认主题无法 满足需求，可以修改配置，背景色，标题颜色，折线，柱状图图例及横纵坐标的颜色等，右侧会自动重绘，生成配置后的效果。   <img src="http://10.144.213.26:9898/wp-content/uploads/2020/05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200526103705.png"> <img src="http://10.144.213.26:9898/wp-content/uploads/2020/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200526102724.png">  </p>
<h4 id="3-下载主题"><a href="#3-下载主题" class="headerlink" title="3.下载主题"></a>3.下载主题</h4><p>配置完成后点击“下载主题”   <img src="http://10.144.213.26:9898/wp-content/uploads/2020/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200526102737.png"> 可以下载JS版本及JSON版本   <img src="http://10.144.213.26:9898/wp-content/uploads/2020/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200526102750.png"></p>
<h4 id="4-项目中使用"><a href="#4-项目中使用" class="headerlink" title="4.项目中使用"></a>4.项目中使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;echarts.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- 引入 vintage 主题 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;theme&#x2F;vintage.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 第二个参数可以指定前面引入的主题</span><br><span class="line">var chart &#x3D; echarts.init(document.getElementById(&#39;main&#39;), &#39;vintage&#39;);</span><br><span class="line">chart.setOption(&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>vue中使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;@&#x2F;styles&#x2F;vintage.js&#39;</span><br><span class="line">var chart &#x3D; echarts.init(document.getElementById(&#39;main&#39;), &#39;vintage&#39;); </span><br><span class="line">chart.setOption(&#123; ... &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Flutter-01 为什么有了原生开发还出现了跨平台开发？</title>
    <url>/2020/06/05/flutter-01-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%86%E5%8E%9F%E7%94%9F%E5%BC%80%E5%8F%91%E8%BF%98%E5%87%BA%E7%8E%B0%E4%BA%86%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%9F/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>一、什么是原生开发。 原生应用程序是指使用相应的平台的开发工具和开发语言，直接调用系统提供的SDK API开发APP应用。目前比较流行的移动平台有Android和iOS两种，开发Android应用使用Java或者Kotlin语言直接调用Android SDK开发；而开发iOS原生应用是使用Object-C或者Swift语言调用iOS SDK开发苹果原生应用程序。原生开发的应用主要有以下优势：</p>
<ul>
<li>   可访问平台全部功能（GPS、摄像头）；</li>
<li>  速度快、性能高、可以实现复杂动画及绘制，整体用户体验好；</li>
</ul>
<p>主要缺点：</p>
<ul>
<li>  平台特定，开发成本高；不同平台必须维护不同代码，人力成本随之变大；</li>
<li>  内容固定，动态化弱，大多数情况下，有新功能更新时只能发版；</li>
</ul>
<p>在移动互联网发展初期，业务场景并不复杂，原生开发还可以应对产品需求迭代。 但近几年，随着物联网时代到来、移动互联网高歌猛进，日新月异，在很多业务场景中，传统的纯原生开发已经不能满足日益增长的业务需求。主要表现在：</p>
<ul>
<li>  动态化内容需求增大；当需求发生变化时，纯原生应用需要通过版本升级来更新内容，但应用上架、审核是需要周期的，这对高速变化的互联网时代来说是很难接受的，所以，对应用动态化(不发版也可以更新应用内容)的需求就变的迫在眉睫。</li>
<li>  业务需求变化快，开发成本变大；由于原生开发一般都要维护Android、iOS两个开发团队，版本迭代时，无论人力成本，还是测试成本都会变大。</li>
</ul>
<p>针对纯原生开发面临动态化和开发成本两个主要问题，诞生了一些开平台的动态化框架，如：H5+原生（Cordova、Ionic、微信小程序）、JavaScript开发+原生渲染 （React Native、Weex、快应用）、自绘UI+原生(QT for mobile、Flutter)三大类型，下一节将分别介绍这三大类型。（本文主要参考Flutter中文网和《Flutter实战》一书）。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter02_现行主流的跨平台技术</title>
    <url>/2020/06/08/flutter02-%E7%8E%B0%E8%A1%8C%E4%B8%BB%E6%B5%81%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>一、跨平台主要技术 为应对移动端原生开发面临的动态化不足（动态化主要指是否支持动态下发代码和是否支持热更新）以及开发成本比较大，产生了一些跨平台的动态化框架，根据跨平台的实现原理主要分为以下三类：</p>
<ul>
<li>  H5+原生（微信小程序）</li>
<li>  JavaScript开发+原生渲染（React-Native）</li>
<li>  自绘UI+原生（Flutter）</li>
</ul>
<p>这三类都有各自的优缺点。 二、H5+原生混合开发 这类框架主要原理就是将APP的一部分需要动态变动的内容通过H5来实现，通过原生的网页加载控件WebView (Android)或WKWebView（iOS）来加载，如果一个应用的大多数功能都是H5实现的话，也称其为<strong>Web APP</strong>。 在混合开发中，H5代码是运行在WebView中，而WebView实质上就是一个浏览器内核，其JavaScript运行在一个权限受限的沙箱中，所以对于大多数系统能力都没有访问权限，如无法访问文件系统、不能使用蓝牙等。所以，对于H5不能实现的功能，都需要原生去做。而混合框架一般都会在原生代码中预先实现一些访问系统能力的API， 然后暴露给WebView以供JavaScript调用，这样一来，WebView就成为了JavaScript与原生API之间通信的桥梁，主要负责JavaScript与原生之间传递调用消息，而消息的传递必须遵守一个标准的协议，它规定了消息的格式与含义，我们把依赖于WebView的用于在JavaScript与原生之间通信并实现了某种消息传输协议的工具称之为<strong>WebView JavaScript Bridge</strong>, 简称 <strong>JsBridge</strong>，它也是混合开发框架的核心。因此，混合应用的优点是动态内容是H5，web技术栈，社区及资源丰富，但是对于复杂的界面、功能以及动画，WebView不堪重任，性能不能很好的保证。 三、JavaScript开发+原生渲染 React-Native (简称RN)是Facebook开源的跨平台移动应用开发框架，是React 在原生移动应用平台的衍生产物，目前支持iOS和Android两个平台，React-Native通过 JavaScriptCore将虚拟DOM映射为原生控件树，将虚拟DOM的布局信息通过JavaScriptCore传递给对应的原生控件进行渲染，至此，React Native 便实现了跨平台。 由于React-Native渲染时需要JavaScript和原生之间通信，在有些场景比如拖动可能会因为通信频繁导致卡顿。其次也因为JavaScript为脚本语言，执行时需要JIT(Just In Time)，执行效率和AOT(Ahead Of Time)代码仍有差距。其三也因为渲染依赖原生控件，不同平台的控件需要单独维护，并且当系统更新时，社区控件可能会滞后；除此之外，其控件系统也会受到原生UI系统限制，例如，在Android中，手势冲突消歧规则是固定的，这在使用不同人写的控件嵌套时，手势冲突问题将会变得很棘手。 四、自绘UI+原生 自绘UI+原生技术是通过在不同平台实现一个统一接口的渲染引擎来绘制UI，不依赖系统原生控件，达到不同平台UI的一致性。它的主要缺点是目前还不支持动态化，主要优点是性能高，渲染UI不依赖原生控件，代码容易维护，不同平台的UI外观保真度和一致性比较高。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter开发问题</title>
    <url>/2020/08/11/flutter%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>Flutter android GradleException显示红色报错解决办法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">throw new GradleException(...)</span><br><span class="line"></span><br><span class="line">throw new Exception(...)</span><br></pre></td></tr></table></figure>
<p>在flutter开发过程中，运行flutter命令，flutter doctor 或者flutter run等命令，如果出现Waiting for another flutter command to release the startup lock..    只要进入flutter sdk 目录，然后找到<code>bin/cache/lockfile</code>文件，删除后再运行flutter doctor。错误就会解决   Your app isn’t using AndroidX 在gradle.properties中添加如下代码即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android.enableJetifier\&#x3D;true</span><br><span class="line"></span><br><span class="line">1.  android.useAndroidX\&#x3D;true</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>flutter环境搭建</title>
    <url>/2020/06/16/flutter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>用户环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUB\_HOSTED\_URL：https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">FLUTTER\_STORAGE\_BASE\_URL：https:&#x2F;&#x2F;storage.flutter-io.cn</span><br></pre></td></tr></table></figure>
<hr>
<p>用户环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载：git clone -b stable https:&#x2F;&#x2F;github.com&#x2F;flutter&#x2F;flutter.git</span><br><span class="line">用户变量PATH追加安装flutter的 flutter\\bin的全路径</span><br><span class="line">运行：flutter doctor \\android\\build.gradle 文件内更改如下 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注释       google()</span><br><span class="line">&#x2F;&#x2F; 注释       jcenter()</span><br><span class="line">maven &#123; url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;google&#39;&#125;</span><br><span class="line">maven &#123; url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;jcenter&#39; &#125;</span><br><span class="line">maven &#123; url &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#39;&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>下载Android Studio 安装Dart及Flutter插件，可以快速新建一个flutter项目。</p>
<h4 id="创建Flutter应用"><a href="#创建Flutter应用" class="headerlink" title="创建Flutter应用"></a>创建Flutter应用</h4><ol>
<li> 选择 <strong>File&gt;New Flutter Project</strong> 。</li>
<li> 选择 <strong>Flutter application</strong> 作为 project 类型, 然后点击 Next。</li>
<li> 输入项目名称 (如 <code>myapp</code>)，然后点击 Next。</li>
<li> 点击 <strong>Finish</strong>。</li>
<li> 等待Android Studio安装SDK并创建项目。</li>
</ol>
<p>上述命令创建一个Flutter项目，项目名为myapp，其中包含一个使用<a href="https://material.io/guidelines/">Material 组件</a>的简单演示应用程序。</p>
<p>在项目目录中，您应用程序的代码位于 <code>lib/main.dart</code>。</p>
<h4 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h4><ol>
<li> 定位到Android Studio工具栏，如图1-3所示： <img src="https://pcdn.flutterchina.club/imgs/1-3.png" alt="图1-3"></li>
<li> 在 <strong>target selector</strong> 中, 选择一个运行该应用的Android设备。如果没有列出可用，请选择 <strong>Tools&gt;Android&gt;AVD Manager</strong> 并在那里创建一个。</li>
<li> 在工具栏中点击 <strong>Run图标</strong>。</li>
<li> 如果一切正常, 您应该在您的设备或模拟器上会看到启动的应用程序： <img src="https://pcdn.flutterchina.club/imgs/1-4.png" alt="图1-4"></li>
</ol>
<h4 id="体验热重载"><a href="#体验热重载" class="headerlink" title="体验热重载"></a>体验热重载</h4><p>Flutter 可以通过 <em>热重载（hot reload）</em> 实现快速的开发周期，热重载就是无需重启应用程序就能实时加载修改后的代码，并且不会丢失状态。简单的对代码进行更改，然后告诉IDE或命令行工具你需要重新加载（点击reload按钮），你就会在你的设备或模拟器上看到更改。</p>
<ol>
<li> 打开<code>lib/main.dart</code>文件</li>
<li> 将字符串 <code>&#39;You have pushed the button this many times:&#39;</code> 更改为 <code>&#39;You have clicked the button this many times:&#39;</code></li>
<li> 不要按“停止”按钮; 让您的应用继续运行.</li>
<li> 要查更改，请调用 <strong>Save</strong> (<code>cmd-s</code> / <code>ctrl-s</code>)，或者点击 <strong>热重载按钮</strong> (带有闪电⚡️图标的按钮)。 你会立即在运行的应用程序中看到更新的字符串。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>HTML规范</title>
    <url>/2019/05/27/html%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="DOCTYPE-声明"><a href="#DOCTYPE-声明" class="headerlink" title="DOCTYPE 声明"></a>DOCTYPE 声明</h2><p>一个DOCTYPE必须包含以下部分，并严格按照顺序出现：</p>
<a id="more"></a>
<blockquote>
<ol>
<li>A string that is an ASCII case-insensitive match for the string “&lt;!DOCTYPE”.</li>
<li>One or more space characters.</li>
<li>A string that is an ASCII case-insensitive match for the string “html”.</li>
<li>Optionally, a DOCTYPE legacy string or an obsolete permitted DOCTYPE string (defined below).</li>
<li>Zero or more space characters.</li>
<li>A “&gt;” (U+003E) character.</li>
</ol>
</blockquote>
<ol>
<li>一个ASCII字符串 “&lt;!DOCTYPE” ，大小写不敏感</li>
<li>一个或多个空白字符</li>
<li>一个ASCII字符串”html”，大小写不敏感</li>
<li>一个可选的历史遗留的DOCTYPE字符串 （<a href="http://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#doctype-legacy-string">DOCTYPE legacy string</a>），或者一个可选的已过时但被允许的DOCTYPE字符串 （<a href="http://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#obsolete-permitted-doctype-string">obsolete permitted DOCTYPE string</a>） 字符串</li>
<li>一个或多个空白字符</li>
<li>一个编码为 U+003E 的字符 “&gt;”</li>
</ol>
<h3 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h3><p>HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="更多关于-DOCTYPE声明"><a href="#更多关于-DOCTYPE声明" class="headerlink" title="更多关于 DOCTYPE声明"></a>更多关于 DOCTYPE声明</h3><p><a href="http://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#the-doctype">#The DOCTYPE</a></p>
<h2 id="页面语言LANG"><a href="#页面语言LANG" class="headerlink" title="页面语言LANG"></a>页面语言LANG</h2><p>Lang属性的取值应该遵循互联网工程任务组–IETF（The Internet Engineering Task Force）制定的关于语言标签的文档 <a href="http://tools.ietf.org/html/bcp47">BCP 47 - Tags for Identifying Languages</a></p>
<h3 id="团队约定-1"><a href="#团队约定-1" class="headerlink" title="团队约定"></a>团队约定</h3><p>推荐使用属性值 <code>cmn-Hans-CN</code>（简体, 中国大陆），但是考虑浏览器和操作系统的兼容性，目前仍然使用 <code>zh-CN</code> 属性值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更多地区语言参考：</p>
<pre><code>zh-SG 中文 (简体, 新加坡)   对应 cmn-Hans-SG 普通话 (简体, 新加坡)
zh-HK 中文 (繁体, 香港)     对应 cmn-Hant-HK 普通话 (繁体, 香港)
zh-MO 中文 (繁体, 澳门)     对应 cmn-Hant-MO 普通话 (繁体, 澳门)
zh-TW 中文 (繁体, 台湾)     对应 cmn-Hant-TW 普通话 (繁体, 台湾)</code></pre>
<h4 id="已废弃不推荐使用的-Languages-Tags"><a href="#已废弃不推荐使用的-Languages-Tags" class="headerlink" title="已废弃不推荐使用的 Languages Tags"></a>已废弃不推荐使用的 Languages Tags</h4><p>以下写法已于 2009 年废弃，请勿使用（cmn、wuu、yue、gan 等已由 2005 年的 extlang 升级到 2009 年的 language）：</p>
<pre><code>zh-cmn, zh-cmn-Hans, zh-cmn-Hant, zh-wuu, zh-yue, zh-gan</code></pre>
<p>以下写法已于 2009 年废弃，不推荐使用：</p>
<pre><code>zh-Hans, zh-Hans-CN, zh-Hans-SG, zh-Hans-HK, zh-Hans-MO, zh-Hans-TW, 
zh-Hant, zh-Hant-CN, zh-Hant-SG, zh-Hant-HK, zh-Hant-MO, zh-Hant-TW</code></pre>
<p>更多已废弃 Languages Tags 参考 <a href="http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry">IANA Language Subtag Registry</a> 里面的 “Type: redundant“”</p>
<h4 id="更多关于-Languages-Tags-："><a href="#更多关于-Languages-Tags-：" class="headerlink" title="更多关于 Languages Tags ："></a>更多关于 Languages Tags ：</h4><p><a href="http://www.w3.org/International/articles/language-tags/">W3C Language tags in HTML and XML</a></p>
<p><a href="http://www.zhihu.com/question/20797118?utm_source=weibo&utm_medium=weibo_share&utm_content=share_question&utm_campaign=share_sidebar">网页头部的声明应该是用 lang=”zh” 还是 lang=”zh-cn”？</a></p>
<h2 id="CHARSET"><a href="#CHARSET" class="headerlink" title="CHARSET"></a>CHARSET</h2><blockquote>
<p>Because the character sets in ISO-8859 was limited in size, and not compatible in multilingual environments, the Unicode Consortium developed the Unicode Standard.</p>
<p>The Unicode Standard covers (almost) all the characters, punctuations, and symbols in the world.</p>
<p>Unicode enables processing, storage, and transport of text independent of platform and language.</p>
<p>The default character encoding in HTML-5 is UTF-8.</p>
</blockquote>
<p>因为 ISO-8859 中字符集大小是有限的，且在多语言环境中不兼容，所以 Unicode 联盟开发了 Unicode 标准。</p>
<p>Unicode 标准覆盖了（几乎）所有的字符、标点符号和符号。</p>
<p>Unicode 使文本的处理、存储和运输，独立于平台和语言。</p>
<p>HTML-5 中默认的字符编码是 UTF-8</p>
<p>参阅 <a href="http://www.w3schools.com/charsets/ref_html_utf8.asp">HTML Unicode (UTF-8) Reference</a></p>
<h3 id="团队约定-2"><a href="#团队约定-2" class="headerlink" title="团队约定"></a>团队约定</h3><p>一般情况下统一使用 “UTF-8” 编码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于历史原因，有些业务可能会使用 “GBK” 编码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;GBK&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>请尽量统一写成标准的 “UTF-8”，不要写成 “utf-8” 或 “utf8” 或 “UTF8”。根据 <a href="http://www.ietf.org/rfc/rfc3629">IETF对UTF-8的定义</a>，其编码标准的写法是 “UTF-8”；而 UTF8 或 utf8 的写法只是出现在某些编程系统中，如 .NET framework 的类 System.Text.Encoding 中的一个属性名就叫 UTF8。</p>
<h4 id="更多关于"><a href="#更多关于" class="headerlink" title="更多关于"></a>更多关于</h4><p>UTF-8写法: <a href="http://stackoverflow.com/questions/809620/utf8-or-utf-8">UTF8 or UTF-8?</a> </p>
<p>GBK：<a href="http://www.ietf.org/assignments/charset-reg/GBK">Application of IANA Charset Registration for GBK</a></p>
<p>Charset ：<a href="http://www.w3.org/TR/html5/document-metadata.html#character-encoding-declaration">character-encoding-declaration</a> </p>
<h2 id="元素及标签闭合"><a href="#元素及标签闭合" class="headerlink" title="元素及标签闭合"></a>元素及标签闭合</h2><p>HTML元素共有以下5种：</p>
<ul>
<li>空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr</li>
<li>原始文本元素：script、style</li>
<li>RCDATA元素：textarea、title</li>
<li>外来元素：来自MathML命名空间和SVG命名空间的元素。</li>
<li>常规元素：其他HTML允许的元素都称为常规元素。</li>
</ul>
<p>元素标签的闭合应遵循以下原则：</p>
<blockquote>
<p>Tags are used to delimit the start and end of elements in the markup. Raw text, escapable raw text, and normal elements have a start tag to indicate where they begin, and an end tag to indicate where they end. The start and end tags of certain normal elements can be omitted, as described below in the section on optional tags. Those that cannot be omitted must not be omitted. Void elements only have a start tag; end tags must not be specified for void elements. Foreign elements must either have a start tag and an end tag, or a start tag that is marked as self-closing, in which case they must not have an end tag.</p>
</blockquote>
<ul>
<li>原始文本元素、RCDATA元素以及常规元素都有一个开始标签来表示开始，一个结束标签来表示结束。</li>
<li><a href="http://www.w3.org/TR/html5/syntax.html#optional-tags">某些元素的开始和结束标签是可以省略的</a>，如果规定标签不能被省略，那么就绝对不能省略它。</li>
<li>空元素只有一个开始标签，且不能为空元素设置结束标签。</li>
<li>外来元素可以有一个开始标签和配对的结束标签，或者只有一个自闭合的开始标签，且后者情况下该元素不能有结束标签。</li>
</ul>
<h3 id="团队约定-3"><a href="#团队约定-3" class="headerlink" title="团队约定"></a>团队约定</h3><p>为了能让浏览器更好的解析代码以及能让代码具有更好的可读性，有如下约定：</p>
<ul>
<li>所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上。</li>
<li>空元素标签都不加 “/” 字符</li>
</ul>
<p><em>推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一段文字，我有始有终，浏览器能正确解析<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一段文字，我有始无终，浏览器亦能正确解析</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>更多关于元素及标签关闭：<a href="http://www.w3.org/TR/html5/syntax.html#elements-0">#Elements</a></p>
<h2 id="书写风格"><a href="#书写风格" class="headerlink" title="书写风格"></a>书写风格</h2><h3 id="HTML代码大小写"><a href="#HTML代码大小写" class="headerlink" title="HTML代码大小写"></a>HTML代码大小写</h3><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p>
<p><em>推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;DEMO&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">DIV</span> <span class="attr">CLASS</span>=<span class="string">&quot;DEMO&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">DIV</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML文本、CDATA、JavaScript、meta标签某些属性等内容可大小写混合</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 优先使用 IE 最新版本和 Chrome Frame --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML文本内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I AM WHAT I AM <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> demoName = <span class="string">&#x27;demoName&#x27;</span>;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!-- CDATA 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">...</span><br><span class="line">]]&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="类型属性"><a href="#类型属性" class="headerlink" title="类型属性"></a>类型属性</h3><p>不需要为 CSS、JS 指定类型属性，HTML5 中默认已包含</p>
<p><em>推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><ul>
<li>元素属性值使用双引号语法</li>
<li>元素属性值可以写上的都写上</li>
</ul>
<p><em>推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">checked</span> &gt;</span></span><br></pre></td></tr></table></figure>


<p>更多关于元素属性：<a href="http://www.w3.org/TR/html5/syntax.html#attributes-0">#Attributes</a></p>
<h3 id="特殊字符引用"><a href="#特殊字符引用" class="headerlink" title="特殊字符引用"></a>特殊字符引用</h3><blockquote>
<p>In certain cases described in other sections, text may be mixed with character references. These can be used to escape characters that couldn’t otherwise legally be included in text.</p>
</blockquote>
<p>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p>
<p>在 HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体</p>
<p><em>推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>more<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>more&gt;&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更多关于符号引用：<a href="http://www.w3.org/TR/html5/syntax.html#character-references">#Character references</a></p>
<h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jdc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="纯数字输入框"><a href="#纯数字输入框" class="headerlink" title="纯数字输入框"></a>纯数字输入框</h3><p>使用 <code>type=&quot;tel&quot;</code> 而不是 <code>type=&quot;number&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure>
<h3 id="代码嵌套"><a href="#代码嵌套" class="headerlink" title="代码嵌套"></a>代码嵌套</h3><p>元素嵌套规范，每个块状元素独立一行，内联元素可选</p>
<p><em>推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>段落元素与标题元素只能嵌套内联元素</p>
<p><em>推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>ios与Android基本设计原则</title>
    <url>/2020/06/08/ios%E4%B8%8Eandroid%E5%9F%BA%E6%9C%AC%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h1 id="ios"><a href="#ios" class="headerlink" title="ios"></a><strong>ios</strong></h1><h2 id="明晰"><a href="#明晰" class="headerlink" title="明晰"></a>明晰</h2><p>对功能的高度关注激发了设计灵感，控件、颜色、字体等突出了重要内容并传达交互性</p>
<h2 id="尊重"><a href="#尊重" class="headerlink" title="尊重"></a>尊重</h2><p>流畅的动作及清晰，美观的界面，较少使用边框和渐变，以保持界面通透</p>
<h2 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h2><p>独特的视觉层和动作传达层次感，触摸和发现增强了人们的愉悦感</p>
<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="隐喻"><a href="#隐喻" class="headerlink" title="隐喻"></a>隐喻</h2><p>将优秀设计的经典原理与技术和科学的创新与可能性相结合，受到物理世界及其纹理的启发，包括他们如何反射光和投射阴影</p>
<h2 id="鲜明形象"><a href="#鲜明形象" class="headerlink" title="鲜明形象"></a>鲜明形象</h2><p>设计系统旨在实现品牌表达。而且能够构建出视觉层级、视觉意义以及视觉聚焦，设计语言强调根据用户行为凸显核心功能，进而为用户提供操作指引</p>
<h2 id="动效"><a href="#动效" class="headerlink" title="动效"></a>动效</h2><p>运动通过微妙的反馈和连贯的过渡来吸引注意力并保持连续性。当元素出现在屏幕上时，他们会转换和重新组织环境，而交互会产生新的转换。 <img src="https://image.uisdc.com/wp-content/uploads/2020/01/uisdc-cy-20200119-3.jpeg"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>jsBridge</title>
    <url>/2019/06/28/jsBridge/</url>
    <content><![CDATA[<p>本文主要记下自己看过一下jsBridege的知识</p>
<a id="more"></a>
<h2 id="参照网站"><a href="#参照网站" class="headerlink" title="参照网站"></a>参照网站</h2><ul>
<li><a href="https://blog.ymfe.org/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84JSBridge/">移动混合开发中的 JSBridge</a></li>
<li><a href="https://juejin.im/post/5bda6f276fb9a0226d18931f">JSBridge实战</a></li>
<li><a href="https://juejin.im/post/5ab48a79f265da23a0497da5">时下app分以下几种技术选型</a></li>
<li><a href="https://awhisper.github.io/2017/09/09/injectUIWebView/">UIWebView代码注入时机与姿势</a></li>
<li><a href="https://juejin.im/post/5934e984ac502e0068ad14d0#heading-4">JSSDK</a><h2 id="当前的技术选型"><a href="#当前的技术选型" class="headerlink" title="当前的技术选型"></a>当前的技术选型</h2></li>
<li>Webapp，框架有cordova，ionic等</li>
<li>Hybrid，即Native+h5方式</li>
<li>React Native, weex方向</li>
<li>纯Native，这个没啥好说的</li>
<li>flutter，明日之星<h2 id="bridge原理"><a href="#bridge原理" class="headerlink" title="bridge原理"></a>bridge原理</h2>为了解决 H5和Native的双向通信的问题。主旨思想是在H5和NA之间搭建一个桥梁（Bridge），给两端留好更友好、更合理的接口。</li>
</ul>
<hr>
<h3 id="H5调用NA方法梳理"><a href="#H5调用NA方法梳理" class="headerlink" title="H5调用NA方法梳理"></a>H5调用NA方法梳理</h3><table>
<thead>
<tr>
<th align="center">平台</th>
<th align="left">方法</th>
<th align="right">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Android</td>
<td align="left">shouldOverrideUrlLoading</td>
<td align="right">scheme拦截方法</td>
</tr>
<tr>
<td align="center">Android</td>
<td align="left">addJavascriptInterface</td>
<td align="right">API</td>
</tr>
<tr>
<td align="center">Android</td>
<td align="left">onJsAlert()、onJsConfirm()、onJsPrompt（）</td>
<td align="right">无</td>
</tr>
<tr>
<td align="center">IOS</td>
<td align="left">拦截URL</td>
<td align="right">无</td>
</tr>
<tr>
<td align="center">IOS(UIwebview)</td>
<td align="left">JavaScriptCore</td>
<td align="right">API方法，IOS7+ 支持</td>
</tr>
<tr>
<td align="center">IOS(WKwebview)</td>
<td align="left">window.webkit.messageHandlers</td>
<td align="right">APi方法，IOS8+支持</td>
</tr>
</tbody></table>
<h3 id="NA调用H5方法梳理"><a href="#NA调用H5方法梳理" class="headerlink" title="NA调用H5方法梳理"></a>NA调用H5方法梳理</h3><table>
<thead>
<tr>
<th align="center">平台</th>
<th align="left">方法</th>
<th align="right">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Android</td>
<td align="left">loadurl()</td>
<td align="right"></td>
</tr>
<tr>
<td align="center">Android</td>
<td align="left">evaluateJavascript()</td>
<td align="right">Android 4.4 +</td>
</tr>
<tr>
<td align="center">IOS(UIwebview)</td>
<td align="left">stringByEvaluatingJavaScriptFromString</td>
<td align="right"></td>
</tr>
<tr>
<td align="center">IOS(UIwebview)</td>
<td align="left">JavaScriptCore</td>
<td align="right">IOS7.0+</td>
</tr>
<tr>
<td align="center">IOS(Wkwebview)</td>
<td align="left">evaluateJavaScript:javaScriptString</td>
<td align="right">iOS8.0+</td>
</tr>
</tbody></table>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="拦截url"><a href="#拦截url" class="headerlink" title="拦截url"></a>拦截url</h3><p>H5和NA通信方面，最简单直接的思路是：NA拦截H5的URL获取消息（一般是通过修改iframe的src来实现 ①），经过业务处理，NA执行JS（在H5侧提前注册好的全局方法）回调通知H5。</p>
<h4 id="H5代码实现如下："><a href="#H5代码实现如下：" class="headerlink" title="H5代码实现如下："></a>H5代码实现如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;content&quot;&gt;XXXXX&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; ① 注册全局函数,以便端调用</span><br><span class="line">    window.setAllContent &#x3D; function()&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; ② 通用方法函数</span><br><span class="line">    var sendschema &#x3D; function(action,param)&#123;</span><br><span class="line">        let tempnode &#x3D; document.createElement(&#39;iframe&#39;);</span><br><span class="line">        tempnode.src &#x3D; &quot;bdnews:&#x2F;&#x2F;&quot;+action+param;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; ③ H5逻辑开始 运行函数</span><br><span class="line">    document.addEventListener(&quot;DOMContentLoaded&quot;,function()&#123;</span><br><span class="line">        sendschema(&#39;load_finish&#39;);</span><br><span class="line">    &#125;,false);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">  </span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Android原理大致如下："><a href="#Android原理大致如下：" class="headerlink" title="Android原理大致如下："></a>Android原理大致如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webView.setWebViewClient(new WebViewClient() &#123;</span><br><span class="line">    public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;</span><br><span class="line">         </span><br><span class="line">        &#x2F;&#x2F; 场景一： 拦截请求、接收schema</span><br><span class="line">        if (url.equals(&quot;load_url&quot;)) &#123;</span><br><span class="line">           </span><br><span class="line">            &#x2F;&#x2F; 处理逻辑</span><br><span class="line">            dosomething</span><br><span class="line">  </span><br><span class="line">            &#x2F;&#x2F; 回掉</span><br><span class="line">            view.loadUrl(&quot;javascript:setAllContent(&quot; + json + &quot;);&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F; 场景二：端自己调用H5，没有请求发起</span><br><span class="line">        clickbutton()&#123;</span><br><span class="line">            view.loadUrl(&quot;javascript:setAllContent(&quot; + json + &quot;);&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="IOS大概逻辑如下"><a href="#IOS大概逻辑如下" class="headerlink" title="IOS大概逻辑如下:"></a>IOS大概逻辑如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 初始化webview</span><br><span class="line">UIWebView * view &#x3D; [[UIWebView alloc]initWithFrame:self.view.frame];</span><br><span class="line">[view loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;http:&#x2F;&#x2F;www.xx.com&quot;]]];</span><br><span class="line">[self.view addSubview:view];&amp;nbsp;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">&#x2F;*</span><br><span class="line">webView协议中的方法</span><br><span class="line">shouldStartLoadWithRequest &#x2F;&#x2F;准备加载内容时调用的方法，通过返回值来进行是否加载的设置</span><br><span class="line">webViewDidStartLoad &#x2F;&#x2F;开始加载时调用的方法</span><br><span class="line">webViewDidFinishLoad &#x2F;&#x2F;结束加载时调用的方法</span><br><span class="line">didFailLoadWithError &#x2F;&#x2F;加载失败时调用的方法</span><br><span class="line">*&#x2F;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType</span><br><span class="line">&#123;</span><br><span class="line">    if ([urlString hasPrefix:@&quot;scheme:&#x2F;&#x2F;hybrid?info&#x3D;&quot;]) &#123;</span><br><span class="line">        if([name isEqualToString:@&quot;load_finish&quot;])&#123;</span><br><span class="line">            &#x2F;&#x2F; [self.webView setContent];</span><br><span class="line">            [self.webView stringByEvaluatingJavaScriptFromString:strFormat];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- clickbutton()&#123;</span><br><span class="line">    [self.webView setContent];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数名关联"><a href="#函数名关联" class="headerlink" title="函数名关联"></a>函数名关联</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let BDAPPnode &#x3D; &#123;</span><br><span class="line">   callbacks: &#123;&#125;,</span><br><span class="line">   &#x2F;&#x2F; 调用函数注册</span><br><span class="line">   invoke(action, params, successfnname, successfn) &#123;</span><br><span class="line">       this.callbacks[successfnname] &#x3D; &#123;</span><br><span class="line">           success: successfn</span><br><span class="line">       &#125;;</span><br><span class="line">       sendschema(action, params);</span><br><span class="line">   &#125;,</span><br><span class="line"> </span><br><span class="line">   &#x2F;&#x2F; NA调用</span><br><span class="line">   callbackSuccess(callbackname, params) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           BDAPPnode.callbackFromNative(callbackname, params, true);</span><br><span class="line">       &#125; catch (e) &#123;</span><br><span class="line">           console.log(&#39;Error in error callback: &#39; + callbackname + &#39; &#x3D; &#39; + e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   callbackFromNative(callbackname, params, isSuccess) &#123;</span><br><span class="line">       let callback &#x3D; this.callbacks[callbackname];</span><br><span class="line">       if (callback) &#123;</span><br><span class="line">           if (isSuccess) &#123;</span><br><span class="line">               callback.success &amp;&amp; callback.success(params);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="ID关联"><a href="#ID关联" class="headerlink" title="ID关联"></a>ID关联</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let BDAPPnode &#x3D; &#123;</span><br><span class="line">   callbackId: Math.floor(Math.random() * 2000000000),</span><br><span class="line">   callbacks: &#123;&#125;,</span><br><span class="line">   invoke(action, params, onSuccess, onFail) &#123;</span><br><span class="line">       this.callbackId++;</span><br><span class="line">       this.callbacks[self.callbackId] &#x3D; &#123;</span><br><span class="line">           success: onSuccess,</span><br><span class="line">           fail: onFail</span><br><span class="line">       &#125;;</span><br><span class="line">       sendschema(action, params, this.callbackId);</span><br><span class="line">   &#125;,</span><br><span class="line">   callbackSuccess(callbackId, params) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           BDAPPnode.callbackFromNative(callbackId, params, true);</span><br><span class="line">       &#125; catch (e) &#123;</span><br><span class="line">           console.log(&#39;Error in error callback: &#39; + callbackId + &#39; &#x3D; &#39; + e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   callbackError(callbackId, params) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           BDAPPnode.callbackFromNative(callbackId, params, false);</span><br><span class="line">       &#125; catch (e) &#123;</span><br><span class="line">           console.log(&#39;Error in error callback: &#39; + callbackId + &#39; &#x3D; &#39; + e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   callbackFromNative(callbackId, params, isSuccess) &#123;</span><br><span class="line">       let callback &#x3D; this.callbacks[callbackId];</span><br><span class="line">       if (callback) &#123;</span><br><span class="line">           if (isSuccess) &#123;</span><br><span class="line">               callback.success &amp;&amp; callback.success(callbackId, params);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               callback.fail &amp;&amp; callback.fail(callbackId, params);</span><br><span class="line">           &#125;</span><br><span class="line">           delete BDAPPnode.callbacks[callbackId];</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="注入API"><a href="#注入API" class="headerlink" title="注入API"></a>注入API</h2><ul>
<li>JavaScript 调用 Native 推荐使用 注入 API 的方式（iOS6 忽略，Android 4.2以下使用 WebViewClient 的 onJsPrompt 方式）。</li>
<li>Native 调用 JavaScript 则直接执行拼接好的 JavaScript 代码即可。</li>
</ul>
<p>注入 API 方式的主要原理是，通过 WebView 提供的接口，向 JavaScript 的 Context（window）中注入对象或者方法，让 JavaScript 调用时，直接执行相应的 Native 代码逻辑，达到 JavaScript 调用 Native 的目的。<br>在javascripte中  直接可以使用 利用window.method来使用注入的api<br>唯一标识 id 是这个回调逻辑的关键。 JSBridge：用一个自增的唯一 id，来标识并存储回调函数，并把此 id 以参数形式传递给 Native，而 Native 也以此 id 作为回溯的标识。这样，即可实现 Callback 回调逻辑。<br>一个案列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; 保存id</span><br><span class="line">    var id &#x3D; 0,</span><br><span class="line">    &#x2F;&#x2F; 将回调函数用键值对的模式保存下来</span><br><span class="line">        callbacks &#x3D; &#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F; NA注册进来的方法</span><br><span class="line">        registerFuncs &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    window.JSBridge &#x3D; &#123;</span><br><span class="line">        &#x2F;&#x2F; 调用 Native</span><br><span class="line">        invoke: function(bridgeName, callback, data) &#123;</span><br><span class="line">            &#x2F;&#x2F; 判断环境，获取不同的 nativeBridge</span><br><span class="line">            var thisId &#x3D; id ++; &#x2F;&#x2F; 获取唯一 id</span><br><span class="line">            callbacks[thisId] &#x3D; callback; &#x2F;&#x2F; 存储 Callback</span><br><span class="line">            nativeBridge.postMessage(&#123;</span><br><span class="line">                bridgeName: bridgeName,</span><br><span class="line">                data: data || &#123;&#125;,</span><br><span class="line">                callbackId: thisId &#x2F;&#x2F; 传到 Native 端</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        receiveMessage: function(msg) &#123;</span><br><span class="line">            var bridgeName &#x3D; msg.bridgeName,</span><br><span class="line">                data &#x3D; msg.data || &#123;&#125;,</span><br><span class="line">                callbackId &#x3D; msg.callbackId, &#x2F;&#x2F; Native 将 callbackId 原封不动传回</span><br><span class="line">                responstId &#x3D; msg.responstId;</span><br><span class="line">            &#x2F;&#x2F; 具体逻辑</span><br><span class="line">            &#x2F;&#x2F; bridgeName 和 callbackId 不会同时存在</span><br><span class="line">            if (callbackId) &#123;</span><br><span class="line">                if (callbacks[callbackId]) &#123; &#x2F;&#x2F; 找到相应句柄</span><br><span class="line">                    callbacks[callbackId](msg.data); &#x2F;&#x2F; 执行调用</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (bridgeName) &#123;</span><br><span class="line">                if (registerFuncs[bridgeName]) &#123; &#x2F;&#x2F; 通过 bridgeName 找到句柄</span><br><span class="line">                    var ret &#x3D; &#123;&#125;,</span><br><span class="line">                        flag &#x3D; false;</span><br><span class="line">                    registerFuncs[bridgeName].forEach(function(callback) &#x3D;&gt; &#123;</span><br><span class="line">                        callback(data, function(r) &#123;</span><br><span class="line">                            flag &#x3D; true;</span><br><span class="line">                            ret &#x3D; Object.assign(ret, r);</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    if (flag) &#123;</span><br><span class="line">                        nativeBridge.postMessage(&#123; &#x2F;&#x2F; 回调 Native</span><br><span class="line">                            responstId: responstId,</span><br><span class="line">                            ret: ret</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        register: function(bridgeName, callback) &#123;</span><br><span class="line">            if (!registerFuncs[bridgeName])  &#123;</span><br><span class="line">                registerFuncs[bridgeName] &#x3D; [];</span><br><span class="line">            &#125;</span><br><span class="line">            registerFuncs[bridgeName].push(callback); &#x2F;&#x2F; 存储回调</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h2><h3 id="native注入"><a href="#native注入" class="headerlink" title="native注入"></a>native注入</h3><p>注入方式和 Native 调用 JavaScript 类似，直接执行桥的全部代码。<br>它的优点在于：桥的版本很容易与 Native 保持一致，Native 端不用对不同版本的 JSBridge 进行兼容；与此同时，它的缺点是：注入时机不确定，需要实现注入失败后重试的机制，保证注入的成功率，同时 JavaScript 端在调用接口时，需要优先判断 JSBridge 是否已经注入成功。</p>
<h3 id="js注入"><a href="#js注入" class="headerlink" title="js注入"></a>js注入</h3><p>直接与 JavaScript 一起执行。<br>与由 Native 端注入正好相反，它的优点在于：JavaScript 端可以确定 JSBridge 的存在，直接调用即可；缺点是：如果桥的实现方式有更改，JSBridge 需要兼容多版本的 Native Bridge 或者 Native Bridge 兼容多版本的 JSBridge。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>webAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>js高精度浮点数运算精度丢失问题</title>
    <url>/2020/05/23/js%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0%E8%BF%90%E7%AE%97%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>1.问题描述</strong><br>js 浮点数运算出现精度失真问题，如： <img src="http://10.144.213.26:9898/wp-content/uploads/2020/05/%E6%8D%95%E8%8E%B7-300x33.png"><br><strong>2. 原理</strong><br>查了下资料，其实JavsScript中，变量在存储时并不区分number和float类型，而是统一按float存储。而javascript使用<a href="https://www.baidu.com/s?wd=IEEE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">IEEE</a> <a href="https://www.baidu.com/s?wd=754&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">754</a>-2008 标准定义的64bit浮点格式存储number，按照<a href="https://www.baidu.com/s?wd=IEEE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">IEEE</a> <a href="https://www.baidu.com/s?wd=754&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">754</a>的定义： <a href="http://en.wikipedia.org/wiki/IEEE_754-2008%C2%A0">http://en.wikipedia.org/wiki/IEEE_754-2008</a> decimal64对应的整形部分长度为10,小数部分长度为16，所以默认的计算结果为“7.0000000000000001”，如最后一个小数为0，则取1作为<a href="https://www.baidu.com/s?wd=%E6%9C%89%E6%95%88%E6%95%B0%E5%AD%97&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">有效数字</a>标志。类似地，可以想像，1/3的结果应该是0.3333333333333333。 <strong>3.解决</strong> (1).保留小数: parseInt parseFloat((0.07*100).toPrecision(12)) // = 7 parseFloat((0.01+0.02).toPrecision(12)) // = 0.03 (2). 取整数Math.round Math.round((0.07*100))</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>linux 一些命令</title>
    <url>/2020/05/22/linux-%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>npm 安装权限问题 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install \--unsafe-perm&#x3D;true --allow-root 进程追踪</span><br><span class="line"></span><br><span class="line">yum install strace</span><br></pre></td></tr></table></figure>
<p>-tt : 在每行输出的前面，显示毫秒级别的时间 -T : 显示每次系统调用所花费的时间 -v : 对于某些相关调用，把完整的环境变量，文件stat结构等打出来。 -f : 跟踪目标进程，以及目标进程创建的所有子进程 -e : 控制要跟踪的事件和跟踪行为,比如指定要跟踪的系统调用名称 -o : 把strace的输出单独写到指定的文件 -s : 当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是32个字节 -p : 指定要跟踪的进程pid, 要同时跟踪多个pid, 重复多次-p选项即可 ps 命令最经常使用地还是用于监控后台进程地工作情况,因为后台进程是不和屏幕键盘这些标准输入/输出设 备进行通信地,所以如果需要检测其情况,便可以运用 ps 命令了. lsof  命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf   node-v6.10.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sudo:</span> npm：找不到命令</span><br></pre></td></tr></table></figure>

<p><em>进入 /usr/bin</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/npm /usr/bin/npm</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/node /usr/bin/node</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>linux配置防火墙 Centos7下 添加 端口白名单</title>
    <url>/2020/09/20/linux%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99-centos7%E4%B8%8B-%E6%B7%BB%E5%8A%A0-%E7%AB%AF%E5%8F%A3%E7%99%BD%E5%90%8D%E5%8D%95/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>1.查看下防火墙的状态：systemctl status firewalld</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --list-ports       ##查看已开放的端口</span><br></pre></td></tr></table></figure>
<p>2.添加8501端口到白名单 执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;8501&#x2F;tcp</span><br></pre></td></tr></table></figure>
<p>3.重启防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p> </p>
<p>其他常用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state                          ##查看防火墙状态，是否是running  </span><br><span class="line">firewall-cmd --reload                          ##重新载入配置，比如添加规则之后，需要执行此命令  </span><br><span class="line">firewall-cmd --get-zones                      ##列出支持的zone  </span><br><span class="line">firewall-cmd --get-services                    ##列出支持的服务，在列表中的服务是放行的  </span><br><span class="line">firewall-cmd --query-service ftp              ##查看ftp服务是否支持，返回yes或者no  </span><br><span class="line">firewall-cmd --add-service&#x3D;ftp                ##临时开放ftp服务  </span><br><span class="line">firewall-cmd --add-service&#x3D;ftp --permanent    ##永久开放ftp服务  </span><br><span class="line">firewall-cmd --remove-service&#x3D;ftp --permanent  ##永久移除ftp服务  </span><br><span class="line">firewall-cmd --add-port&#x3D;80&#x2F;tcp --permanent    ##永久添加80端口   </span><br><span class="line">firewall-cmd --remove-port&#x3D;80&#x2F;tcp --permanent    ##永久添加80端口   </span><br><span class="line">firewall-cmd --zone&#x3D;public --list-ports       ##查看已开放的端口</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>loading</title>
    <url>/2019/07/20/loading/</url>
    <content><![CDATA[<p>自己封装的loading。</p>
<a id="more"></a>
<h2 id="LOADING"><a href="#LOADING" class="headerlink" title="LOADING"></a>LOADING</h2><p>自己实现的一个全局LOADING动画。可以用来加载等。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li>start 百分比 正整数 默认为0</li>
<li>speed 速度 ’slow，littleSlow，normal，fast‘ 默认为normal</li>
<li>autoClose 自动关闭 布尔值  true或者false 默认为false<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3></li>
<li>start 开启动画</li>
<li>set 设置参数  支持传入（start、speed、autoClose）对象传入</li>
<li>end 结束</li>
<li>restart 重启  设置初始 0%</li>
<li>pause 暂停<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> (function(root, factory) &#123;</span><br><span class="line">   if (typeof define &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; define.amd) &#123;</span><br><span class="line">    define(factory);</span><br><span class="line">  &#125; else if (typeof exports &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">    module.exports &#x3D; factory();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    root.cwsProgress &#x3D; factory();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(window, function() &#123;</span><br><span class="line">  var cwsProgress &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 版本号</span><br><span class="line">    version:&#39;0.0.0&#39;,</span><br><span class="line">    &#x2F;&#x2F; 保存DOM元素，用来使用</span><br><span class="line">    dom:null,</span><br><span class="line">    &#x2F;&#x2F; 保存计时器</span><br><span class="line">    timeId:null,</span><br><span class="line">    &#x2F;&#x2F; 设置，speed：速度，start：起始的百分比</span><br><span class="line">    settings:&#123;</span><br><span class="line">      speed:&quot;normal&quot;,</span><br><span class="line">      start:0,</span><br><span class="line">      antoClose:false</span><br><span class="line">    &#125;,</span><br><span class="line">    level:&#123;</span><br><span class="line">      slow:2,</span><br><span class="line">      littleSlow:5,</span><br><span class="line">      normal:10,</span><br><span class="line">      fast:25</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 开启loading</span><br><span class="line">    start:function()&#123;</span><br><span class="line">      if(this.hasDom())&#123;</span><br><span class="line">        this.dom &#x3D; document.getElementById(&#39;cwsprogress&#39;)</span><br><span class="line">        this.dom.style.display &#x3D; &#39;block&#39;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        var dom&#x3D;document.createElement(&quot;div&quot;)</span><br><span class="line">        dom.id &#x3D; &quot;cwsprogress&quot;</span><br><span class="line">        dom.innerHTML &#x3D; this.tempalte(this.settings.start)</span><br><span class="line">        dom.setAttribute(&quot;style&quot;,&quot;position: fixed;width: 100%;height: 100%;top:0;left:0;background-color: rgba(0,0,0,0.2)&quot;)</span><br><span class="line">        dom.innerHTML &#x3D; this.tempalte(this.settings.start)</span><br><span class="line">        document.body.appendChild(dom)</span><br><span class="line">        this.dom &#x3D; dom</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 调用计时器</span><br><span class="line">      if(this.timeId)&#123;</span><br><span class="line">        clearTimeout(this.timeId)</span><br><span class="line">      &#125;</span><br><span class="line">      this.stepFun()</span><br><span class="line">      return this</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 继续调用</span><br><span class="line">    reStart()&#123;</span><br><span class="line">      this.settings.start &#x3D; 0</span><br><span class="line">      this.start()</span><br><span class="line">      return this</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 使用计时器</span><br><span class="line">    stepFun()&#123;</span><br><span class="line">      this.settings.start +&#x3D; parseInt(Math.random() * this.level[this.settings.speed])</span><br><span class="line">      if(this.settings.start &gt;&#x3D; 100)&#123;</span><br><span class="line">        if(this.settings.antoClose)&#123;</span><br><span class="line">          this.end()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        this.changePecent()</span><br><span class="line">        this.timeId &#x3D; setTimeout(this.stepFun.bind(this),200)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 改变百分比进度</span><br><span class="line">    changePecent()&#123;</span><br><span class="line">      if(this.hasDom())&#123;</span><br><span class="line">        document.getElementById(&#39;processDiv&#39;).style.width &#x3D; this.settings.start + &quot;%&quot;</span><br><span class="line">        document.getElementById(&#39;processSpan&#39;).innerHTML &#x3D; &#39;努力中...&#39; + this.settings.start + &#39;%&#39;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        console.log(&quot;DOM已经被移除了&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 结束loading</span><br><span class="line">    end:function()&#123;</span><br><span class="line">      clearTimeout(this.timeId)</span><br><span class="line">      if(this.hasDom())&#123;</span><br><span class="line">        this.dom.style.display &#x3D; &#39;none&#39;</span><br><span class="line">      &#125;</span><br><span class="line">      return this</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 暂停定时器</span><br><span class="line">    pause()&#123;</span><br><span class="line">      clearTimeout(this.timeId)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 设置参数</span><br><span class="line">    set:function(config)&#123;</span><br><span class="line">      if(Object.prototype.toString.call(config) &#x3D;&#x3D; &quot;[object Object]&quot;)&#123;</span><br><span class="line">        this.settings.start &#x3D; parseInt(config.start) || 0</span><br><span class="line">        this.settings.speed &#x3D; config.speed || &#39;normal&#39;</span><br><span class="line">        this.settings.antoClose &#x3D; !!config.antoClose</span><br><span class="line">        if(this.settings.start &gt;&#x3D; 100 || this.settings.start &lt;&#x3D; 0)&#123;</span><br><span class="line">          console.log(&quot;请传入0-100的数字&quot;)</span><br><span class="line">          return this</span><br><span class="line">        &#125;</span><br><span class="line">        this.changePecent()</span><br><span class="line">        if(!this.level[this.settings.speed])&#123;</span><br><span class="line">          console.log(&quot;速度等级:slow、littleSlow、normal、fast&quot;)</span><br><span class="line">          return this</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        console.log(&#39;请传入一个对象&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">      return this</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 组装模板</span><br><span class="line">    tempalte:function(percent)&#123;</span><br><span class="line">      var pre &#x3D; parseInt(percent) || 0</span><br><span class="line">      var str &#x3D; &#39;&#39;</span><br><span class="line">      str +&#x3D; &#39;&lt;div style&#x3D;&quot;width: 40%;min-width: 200px;max-width: 600px;position: absolute;top: 50%;left: 50%;transform: translate(-50%,-50%);&quot;&gt;&#39;</span><br><span class="line">      str +&#x3D; &#39;&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;hd-file01-ms.sf-express.com&#x2F;uploads&#x2F;f&#x2F;f&#x2F;e&#x2F;ffeef69ebcacf3a50636f6f56c86761b.gif&quot; style&#x3D;&quot;width: 100%&quot;&gt;&#39;</span><br><span class="line">      str +&#x3D; &#39;&lt;div style&#x3D;&quot;margin-top: 25px;position: relative;&quot;&gt;&#39;</span><br><span class="line">      str +&#x3D; &#39;&lt;div style&#x3D;&quot;width: 100%;height: 30px;background-color: #eee;border-radius: 30px;overflow: hidden;&quot;&gt;&#39;</span><br><span class="line">      str +&#x3D; &#39;&lt;div id&#x3D;&quot;processDiv&quot; style&#x3D;&quot;width:&#39;+percent+&#39;%;height:100%;background-color: #231815&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">      str +&#x3D; &#39;&lt;span style&#x3D;&quot;position: absolute;top: -10px;left: 50%;transform: translate(-50%,-100%); font-size: 16px;color: #050505;&quot; id&#x3D;&quot;processSpan&quot;&gt;加载中...&#39;+percent+&#39;%&lt;&#x2F;span&gt;&#39;</span><br><span class="line">      str +&#x3D; &#39;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">      return str</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 判断是否包含DOM</span><br><span class="line">    hasDom:function()&#123;</span><br><span class="line">      return !!document.getElementById(&#39;cwsprogress&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return cwsProgress</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>MD语法编写</title>
    <url>/2019/05/27/md%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><a id="more"></a>
<h2 id="号标题"><a href="#号标题" class="headerlink" title="#号标题"></a>#号标题</h2><p>前面带#号，后面带文字，分别表示h1-h6,h1下面会有一条横线，注意，#号后面有空格<br>==标题<br>=======================<br>在标题的下一行写==号 数量不限制 &gt;1<br>–二级标题</p>
<hr>
<p>在标题的下一行写-   数量不限制  &gt;1</p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表可以用* ， + ， — 来创建</p>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>数字后面的点只能是英文的点，特别注意，有序列表的序号是根据第一行列表的数字顺序来的</p>
<h1 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h1><p>用法就是在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用可以嵌套，只需要多加一个&gt; &gt;&gt;表示二级引用 最多到6层</p>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线可以由* _（星号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以  *表示虚线 _表示实线</p>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="行内连接"><a href="#行内连接" class="headerlink" title="行内连接"></a>行内连接</h2><p>行内式的链接格式是：链接的文字放在[]中，链接地址放在随后的（）中  链接还可以带title属性</p>
<h2 id="参数式"><a href="#参数式" class="headerlink" title="参数式"></a>参数式</h2><p>这就好理解了，就是把链接当成参数，适合多出使用相同链接的场景，注意参数的对应关系，参数定义时，这几种写法都可以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[foo]: http:&#x2F;&#x2F;example.com&#x2F; &quot;Optional Title Here&quot;</span><br><span class="line"></span><br><span class="line">[foo]: http:&#x2F;&#x2F;example.com&#x2F; &#39;Optional Title Here&#39;</span><br><span class="line"></span><br><span class="line">[foo]: http:&#x2F;&#x2F;example.com&#x2F; (Optional Title Here)</span><br><span class="line"></span><br><span class="line">[foo]: &lt;http:&#x2F;&#x2F;example.com&#x2F;&gt; &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure>

<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>也分为行内式和参数式  用法和链接一样，区别是图片前面要写一个！</p>
<h1 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h1><h2 id="一行"><a href="#一行" class="headerlink" title="一行"></a>一行</h2><p>用单反引号包起来</p>
<h2 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h2><p>多行用三个反引号，如果要写注释，可以在反引号后面写</p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name | age |sex</span><br><span class="line">:-:| -:| :-</span><br><span class="line">居中| 右对齐|左对齐</span><br><span class="line">zhangsan| 18| man</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="left">age</th>
<th align="right">sex</th>
</tr>
</thead>
<tbody><tr>
<td align="center">zhangsan</td>
<td align="left">18</td>
<td align="right">man</td>
</tr>
</tbody></table>
<h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>一个星号或者是一个下划线包起来，会转换为<em>倾斜，如果是2个，会转换为<strong>加粗</p>
<h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>和jS保持一直 \</p>
<h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>两个<del>包表示删除线  如：`</del> 删除线文字<del>` 显示 ~</del>删除线文字~~</p>
]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>mobileSelect</title>
    <url>/2019/09/29/mobileSelect/</url>
    <content><![CDATA[<p>好用的下拉选择</p>
<a id="more"></a>
<p>一、应用分析mobileSelect应用场景及代码分析（以npm开发为例）<br> 1、 进行npm安装及引入<br>     npm安装及引入:</p>
<pre><code> 1、 安装：npm install mobile-select -D

 2、 引入：在对应的js文件中引入import MobileSelect from &#39;mobile-select&#39;</code></pre>
<p>研发 &gt; mobileSelect插件分析 &gt; 图片5.png</p>
<p>  2、 mobileSelect的使用<br>     1、 mobileSelect是一种适合于H5及其他移动端开发的下拉选择插件</p>
<pre><code> 2、 先定义一个空对象用来</code></pre>
<p> data() {</p>
<pre><code>  return &#123;

    mobileSelect4:null&#125;



 3、 在template中设置一个div，并且定义其id，用于装载接收下拉框实例对象</code></pre>
<div>

  <div id="trigger4">单项选择</div>

<p>  &lt;button @click=”hehe”&gt;点击我有惊喜</button></p>
</div>



<pre><code> 4、 实例化对象，在mounted的时候，进行对对象的实例化</code></pre>
<p>// var mobileSelect4 = new MobileSelect({</p>
<pre><code>  //     trigger: &quot;#trigger4&quot;,

  //     title: &quot;单项选择&quot;,

  //     wheels: [

  //         &#123;data: [&quot;周日&quot;,&quot;周一&quot;,&quot;周二&quot;,&quot;周三&quot;,&quot;周四&quot;,&quot;周五&quot;,&quot;周六&quot;]&#125;

  //     ],

  //     callback:(indexArr, data)=&gt;&#123;

  //       console.log(data);

  //     &#125;

  // &#125;);</code></pre>
<p>  3、 mobileSelect的属性<br>   当我们需要下拉框的样式，及选中、打开弹窗的时候，需要进行属性的修改，我们可以对下列的属性进行修改，获取我们的需求</p>
<p>this.mobileSelect4 = new MobileSelect({</p>
<pre><code>    trigger: &#39;#trigger4&#39;,     //必须的项

    title: &#39;数据字段名映射&#39;,

    position:[1,1],//初始值索引  1，1位第一个数组的第二个值，及第二个其及children的第二个值

    // triggerDisplayData:false, //选中的字体是否在页面上显示html  true为显示,false为不显示 默认为true

    // connector:&#39;da_da&#39;, //选中之后，数据的连接符号

    // maskOpacity:0.1, //透明度，指的是非下拉框透明度，是指整个页面的透明度

    // ensureBtnText:&quot;一点击&quot;,  //确定处字样修改

    // cancelBtnText:&#39;一取消&#39;, //取消处字样修改

    // ensureBtnColor:&#39;#cecece&#39;, //确定按钮的字体颜色

    // cancelBtnColor:&#39;#f0e&#39;,    //取消按钮的字体颜色

    // titleColor:&quot;#eff&quot;,    //标题的字体颜色

    // titleBgColor:&#39;#0f0&#39;,  //标题的背景颜色

    // textColor:&quot;#f00&quot;,    //下拉的文本颜色

    // bgColor:&#39;#ff0&#39;,         //下拉的背景颜色

    wheels: [

                &#123;data:[

                    &#123;

                        id:&#39;1&#39;,

                        title:&#39;A&#39;,

                        children:[

                            &#123;id:&#39;A1&#39;,title:&#39;A-a&#39;&#125;,

                            &#123;id:&#39;A2&#39;,title:&#39;A-b&#39;&#125;,

                            &#123;id:&#39;A3&#39;,title:&#39;A-c&#39;&#125;

                        ]

                    &#125;,

                    &#123;

                        id:&#39;1&#39;,

                        title:&#39;B&#39;,

                        children:[

                            &#123;id:&#39;B1&#39;,title:&#39;B-a&#39;,children:[

                            &#123;id:&#39;f1&#39;,title:&#39;f-a&#39;&#125;,

                            &#123;id:&#39;f2&#39;,title:&#39;f-b&#39;&#125;,

                            &#123;id:&#39;f3&#39;,title:&#39;f-c&#39;&#125;

                        ]&#125;,

                            &#123;id:&#39;B2&#39;,title:&#39;B-b&#39;&#125;,

                            &#123;id:&#39;B3&#39;,title:&#39;B-c&#39;&#125;

                        ]

                    &#125;,

                ]&#125;

            ],

    keyMap: &#123;

        id:&#39;id&#39;,

        value: &#39;title&#39;,

        childs :&#39;children&#39;

    &#125;,  //用于children类型，



    // callback:(indexArr, data)=&gt;&#123;

    //     console.log(data);

    //     //将其保存起来

    //     this.week = data

    // &#125;,

//     cancel:(indexArr, data)=&gt;&#123;

//      console.log(data)

//    &#125;, //点击取消触发的函数  

//    //

//    onShow:(e)=&gt;&#123;

//      console.log(&#39;111222&#39;)

//    &#125;,  //显示的时候触发的函数

//    onHide:(e)=&gt;&#123;

//      console.log(&#39;曹大爷，您好呀&#39;)

//    &#125; //隐藏的时候触发的函数

&#125;);</code></pre>
<p>  4、 mobileSelect的方法<br>  mobileSelect有丰富的方法供我们使用，当我们需要在某个节点，某个需求点进行一系列操作，获取某些需求的时候，我们可以通过这些方法，进行修改属性。</p>
<p>hehe(){</p>
<pre><code>    // console.log(this.mobileSelect4)

    this.mobileSelect4.setTitle(&#39;松哥真的很帅&#39;);   //修改下拉框标题

    // console.log(this.week[1].id)

    // this.mobileSelect4.updateWheels([

    //                 &#123;

    //                     id:&#39;1&#39;,

    //                     title:&#39;c&#39;,

    //                     children:[

    //                         &#123;id:&#39;c1&#39;,title:&#39;c-a&#39;&#125;,

    //                         &#123;id:&#39;c2&#39;,title:&#39;c-b&#39;&#125;,

    //                         &#123;id:&#39;c3&#39;,title:&#39;c-c&#39;&#125;

    //                     ]

    //                 &#125;,

    //                 &#123;

    //                     id:&#39;1&#39;,

    //                     title:&#39;d&#39;,

    //                     children:[

    //                         &#123;id:&#39;d1&#39;,title:&#39;d-a&#39;&#125;,

    //                         &#123;id:&#39;d2&#39;,title:&#39;d-b&#39;&#125;,

    //                         &#123;id:&#39;d3&#39;,title:&#39;d-c&#39;&#125;

    //                     ]

    //                 &#125;,

    //             ]

    //         );  //重新渲染所有的轮子数据

    // this.mobileSelect4.updateWheel(

    //                 0, //数组下标

    //                 &#123;

    //                     id:&#39;1&#39;,

    //                     title:&#39;d&#39;,

    //                     children:[

    //                         &#123;id:&#39;d1&#39;,title:&#39;d-a&#39;&#125;,

    //                         &#123;id:&#39;d2&#39;,title:&#39;d-b&#39;&#125;,

    //                         &#123;id:&#39;d3&#39;,title:&#39;d-c&#39;&#125;

    //                     ]

    //                 &#125;,

    //         );  //指定某个轮子的数据替换 ，但是级联格式不支持



    //locatePosition

  //   this.mobileSelect4.locatePosition(

  //   1,2)  //指定打开下拉框的时候，轮子选中的位置在哪里，但是数据不变



    console.log(this.mobileSelect4.getValue())  //直接获取选中的值

    this.mobileSelect4.show();   //显示，当达到一定条件及需求的时候可以调用显示

    this.mobileSelect4.hide();  //隐藏，当达到一定条件及需求的时候可以调用隐藏



  &#125;,</code></pre>
<p>二、源码分析（基于MobileSelect对象分析）</p>
<p>1、HTML结构和CSS表现<br>   1、通过在body中创建mobileSelect div,用于占据整个页面，蒙层div grayLayer用于遮挡影响其他页面层；创建content弹出层，为下拉框选择的BOM，content层fix定位，至于页面最底边；效果如下：</p>
<p> 研发 &gt; mobileSelect插件分析 &gt; 图片1.png</p>
<p>实现代码如下：</p>
<p>_this.mobileSelect = document.createElement(“div”);</p>
<p>_this.mobileSelect.className = “mobileSelect”;</p>
<p>_this.mobileSelect.innerHTML =</p>
<p>‘<div class="grayLayer"></div>‘+</p>
<pre><code>    &#39;&lt;div class=&quot;content&quot;&gt;&#39;+

        &#39;&lt;div class=&quot;btnBar&quot;&gt;&#39;+

            &#39;&lt;div class=&quot;fixWidth&quot;&gt;&#39;+

                &#39;&lt;div class=&quot;cancel&quot;&gt;&#39;+ cancelText +&#39;&lt;/div&gt;&#39;+

                &#39;&lt;div class=&quot;title&quot;&gt;&lt;/div&gt;&#39;+

                &#39;&lt;div class=&quot;ensure&quot;&gt;&#39;+ ensureText +&#39;&lt;/div&gt;&#39;+

            &#39;&lt;/div&gt;&#39;+

        &#39;&lt;/div&gt;&#39;+

        &#39;&lt;div class=&quot;panel&quot;&gt;&#39;+

            &#39;&lt;div class=&quot;fixWidth&quot;&gt;&#39;+

             &#39;&lt;div class=&quot;wheels&quot;&gt;&#39;+

            &#39;&lt;/div&gt;&#39;+

                &#39;&lt;div class=&quot;selectLine&quot;&gt;&lt;/div&gt;&#39;+

                &#39;&lt;div class=&quot;shadowMask&quot;&gt;&lt;/div&gt;&#39;+

            &#39;&lt;/div&gt;&#39;+

        &#39;&lt;/div&gt;&#39;+ &#39;&lt;/div&gt;&#39;;</code></pre>
<p>   2、根据数据长度来渲染（单项选择、双向选择、多项选择、级联）</p>
<pre><code> 数据长度的不同，影响了下拉选择的结构及样式，该下拉选择框支持多种模式的下拉选择（单项选择、双向选择、多项选择、级联），直接用数据可以渲染出不同的效果，且大小一样的选择框，具体效果如下：</code></pre>
<p> 研发 &gt; mobileSelect插件分析 &gt; 图片2.png</p>
<pre><code> 实现方式：通过数据行为for循环，将后端（或者前端固定数据）进行for循环DOM操作生成多个wheel（滚动区域某一列容器），实现创建动态的HTML。</code></pre>
<p>   3、 多个wheel（滚动区域某一列容器）</p>
<pre><code>Wheel有多个，每个wheel（滚动区域某一列容器）都是由相同的大小的ul组成，当对单个（滚动区域某一列容器）wheel进行向上滑动的时候，ul相对于wheel（滚动区域某一列容器）的父级div向上偏离对应尺寸。</code></pre>
<p>具体的实现方法（mobileSelect对象的movePosition方法）：</p>
<p>movePosition: function(theSlider, distance){</p>
<pre><code>      theSlider.style.webkitTransform = &#39;translate3d(0,&#39; + distance + &#39;px, 0)&#39;;

      theSlider.style.transform = &#39;translate3d(0,&#39; + distance + &#39;px 0)&#39;;

  &#125;,</code></pre>
<p>样式表现：</p>
<p>研发 &gt; mobileSelect插件分析 &gt; 图片3.png</p>
<p>4、 中间行高亮样式原理：</p>
<p>.mobileSelect .content .panel .shadowMask {</p>
<p>  position: absolute;</p>
<p>top: 0;</p>
<p> width: 100%;</p>
<p>  height: 200px;</p>
<p>  background: -webkit-gradient(linear, left top, left bottom, from(#ffffff), color-stop(rgba(255, 255, 255, 0)), to(#ffffff));</p>
<p>  background: -webkit-linear-gradient(top, #ffffff, rgba(255, 255, 255, 0), #ffffff);</p>
<p>  background: linear-gradient(to bottom, #ffffff, rgba(255, 255, 255, 0, #ffffff);</p>
<p>  opacity: 0.9;</p>
<p>  pointer-events: none;</p>
<p>}</p>
<p>高亮效果：</p>
<p> 研发 &gt; mobileSelect插件分析 &gt; 图片4.png</p>
<p>2、js行为<br>  1、初始方法init()；</p>
<pre><code> 1.1点击触发下拉框方法，触发mobileSelect中的初始方法init()；

 1.2 init()是需要传参数，其中必传及非必传的参数的在应用中有说明；其中必传的参数为（trigger: &#39;#trigger4&#39;, ），trigger参数为实例化mobileSelect对象，DOM操作的基本，wheelsData参数，是实现下拉的基本；

 1.3通过调用 renderWheels()方法实现初始的DOM操作，实现轮子的初始效果；其中多wheel滚动区域的效果，是通过wheelsData的for循环DOM操作实现的。</code></pre>
<p>  2、mobileSelect对象中的常用原型方法；</p>
<pre><code> 2.1 updateWheels 重新渲染所有的轮子数据；

 2.2 updateWheel  指定某个轮子的数据替换 ，但是级联格式不支持；

 2.3 locatePosition 指定打开下拉框的时候，轮子选中的位置在哪里，但是数据；不变

 2.4 show显示的函数、hide隐藏的函数</code></pre>
<p>  3、通过初始方法判断是moblieSelect是在手机端使用还是在电脑端使用，通过判断方法checkIsPC(),</p>
<p>checkIsPC: function(){</p>
<pre><code>  var _this = this;

  var sUserAgent = navigator.userAgent.toLowerCase();

  var bIsIpad = sUserAgent.match(/ipad/i) == &quot;ipad&quot;;

  var bIsIphoneOs = sUserAgent.match(/iphone os/i) == &quot;iphone os&quot;;

  var bIsMidp = sUserAgent.match(/midp/i) == &quot;midp&quot;;

  var bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == &quot;rv:1.2.3.4&quot;;

  var bIsUc = sUserAgent.match(/ucweb/i) == &quot;ucweb&quot;;

  var bIsAndroid = sUserAgent.match(/android/i) == &quot;android&quot;;

  var bIsCE = sUserAgent.match(/windows ce/i) == &quot;windows ce&quot;;

  var bIsWM = sUserAgent.match(/windows mobile/i) == &quot;windows mobile&quot;;

  if ((bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM)) &#123;

      _this.isPC = false;

  &#125;

&#125;,</code></pre>
<p>通过判断方法，判断是手机端还是PC端实例化该对象。</p>
<p>   手机端的监听类型有：’touchstart’ 、’touchend’ 、’touchmove’ ；</p>
<p>   PC端的监听类型有：’mousedown’ 、’mousemove’ 、’mouseup’；</p>
<p>Import(点击获取数据)</p>
<p>   手机端实例化对象，触发touch()方法，通过判断event.type即监听类型的不同，进行不同的实现。</p>
<p>   ‘touchstart’  event.touches[0].clientY  获取当前相对于当前窗口的 y 坐标</p>
<p>   ‘touchend’   确定最后的位移，以及高亮行对应的值</p>
<p>   ‘mousemove’ 获取位移</p>
<p>   PC端实例化对象，触发dragClick()方法，通过判断event.type即监听类型的不同，进行不同的实现。</p>
<p>   ‘mousedown’ event.clientY  获取当前相对于当前窗口的 y 坐标</p>
<p>   ‘mouseup’   确定最后的位移，以及高亮行对应的值</p>
<p>   ‘mousemove’ 获取位移</p>
<p>三、mobileSelect特性总结<br>   1、原生js移动端选择控件，不依赖任何库</p>
<p>   2、可传入普通数组或者json数组</p>
<p>   3、可根据传入的参数长度，自动渲染出对应的列数，支持单项到多项选择</p>
<p>   4、自动识别是否级联</p>
<p>  5、丰富的动态样式自定义</p>
<p>  6、提供了重定位函数、兼容pc端</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>select</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx强制使用https访问(http跳转到https)</title>
    <url>/2020/08/14/nginx%E5%BC%BA%E5%88%B6%E4%BD%BF%E7%94%A8https%E8%AE%BF%E9%97%AEhttp%E8%B7%B3%E8%BD%AC%E5%88%B0https/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>配置ngnix</p>
<p>server {  </p>
<p>    listen  192.168.1.111:80;  </p>
<p>    server_name test.com;     </p>
<p>    rewrite ^(.*)$  https://$host$1 permanent;  </p>
<p>}  </p>
<p>index.html刷新网页 http下增加html</p>
<p>&lt;html&gt;  &lt;meta http-equiv=“refresh” content=“0;url=<a href="https://test.com/&quot;/&gt;">https://test.com/&quot;\&gt;</a> &lt;/html&gt;</p>
<p>ngnix配置</p>
<p>server {  <br>    listen  80;  <br>    server_name test.com;  <br>      <br>    location / {  <br>                #index.html放在虚拟主机监听的根目录下  <br>        root /srv/www/http.test.com/;  <br>    }  <br>        #将404的页面重定向到https的首页  <br>    error_page  404 <a href="https://test.com/">https://test.com/</a>;  <br>}</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx服务器之负载均衡策略（6种）</title>
    <url>/2020/08/19/nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%EF%BC%886%E7%A7%8D%EF%BC%89/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h2 id="1、轮询"><a href="#1、轮询" class="headerlink" title="1、轮询"></a>1、轮询</h2><p>　　最基本的配置方法，上面的例子就是轮询的方式，它是upstream模块默认的负载均衡默认策略。每个请求会按时间顺序逐一分配到不同的后端服务器。</p>
<p>　　有如下参数：</p>
<p>fail_timeout</p>
<p>与max_fails结合使用。</p>
<p>max_fails</p>
<p>设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了，</p>
<p>fail_time</p>
<p>服务器会被认为停机的时间长度,默认为10s。</p>
<p>backup</p>
<p>标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。</p>
<p>down</p>
<p>标记服务器永久停机了。</p>
<p>　　注意：</p>
<ul>
<li>  在轮询中，如果服务器down掉了，会自动剔除该服务器。</li>
<li>  缺省配置就是轮询策略。</li>
<li>  此策略适合服务器配置相当，无状态且短平快的服务使用。</li>
</ul>
<h2 id="2、weight"><a href="#2、weight" class="headerlink" title="2、weight"></a>2、weight</h2><p>　　权重方式，在轮询策略的基础上指定轮询的几率。例子如下：</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> #动态服务器组<br>    upstream dynamic_zuoyu {<br>        server localhost:8080   weight=2;  #tomcat 7.0 server localhost:8081;  #tomcat 8.0 server localhost:8082   backup;  #tomcat 8.5 server localhost:8083   max_fails=3 fail_timeout=20s;  #tomcat 9.0 }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>　　在该例子中，weight参数用于指定轮询几率，weight的默认值为1,；weight的数值与访问比率成正比，比如Tomcat 7.0被访问的几率为其他服务器的两倍。</p>
<p>　　注意：</p>
<ul>
<li>  权重越高分配到需要处理的请求越多。</li>
<li>  此策略可以与least_conn和ip_hash结合使用。</li>
<li>  此策略比较适合服务器的硬件配置差别比较大的情况。</li>
</ul>
<h2 id="3、ip-hash"><a href="#3、ip-hash" class="headerlink" title="3、ip_hash"></a>3、ip_hash</h2><p>　　指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>#动态服务器组<br>    upstream dynamic_zuoyu {<br>        ip_hash;    #保证每个访客固定访问一个后端服务器<br>        server localhost:8080   weight=2;  #tomcat 7.0 server localhost:8081;  #tomcat 8.0 server localhost:8082;  #tomcat 8.5 server localhost:8083   max_fails=3 fail_timeout=20s;  #tomcat 9.0 }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>　　注意：</p>
<ul>
<li>  在nginx版本1.3.1之前，不能在ip_hash中使用权重（weight）。</li>
<li>  ip_hash不能与backup同时使用。</li>
<li>  此策略适合有状态服务，比如session。</li>
<li>  当有服务器需要剔除，必须手动down掉。</li>
</ul>
<h2 id="4、least-conn"><a href="#4、least-conn" class="headerlink" title="4、least_conn"></a>4、least_conn</h2><p>　　把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> #动态服务器组<br>    upstream dynamic_zuoyu {<br>        least_conn;    #把请求转发给连接数较少的后端服务器<br>        server localhost:8080   weight=2;  #tomcat 7.0 server localhost:8081;  #tomcat 8.0 server localhost:8082 backup;  #tomcat 8.5 server localhost:8083   max_fails=3 fail_timeout=20s;  #tomcat 9.0 }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p>　　注意：</p>
<ul>
<li>  此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况。</li>
</ul>
<h2 id="5、第三方策略"><a href="#5、第三方策略" class="headerlink" title="5、第三方策略"></a>5、第三方策略</h2><p>　　第三方的负载均衡策略的实现需要安装第三方插件。</p>
<h3 id="①fair"><a href="#①fair" class="headerlink" title="①fair"></a>①fair</h3><p>　　按照服务器端的响应时间来分配请求，响应时间短的优先分配。</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> #动态服务器组<br>    upstream dynamic_zuoyu {<br>        server localhost:8080;  #tomcat 7.0 server localhost:8081;  #tomcat 8.0 server localhost:8082;  #tomcat 8.5 server localhost:8083;  #tomcat 9.0 fair;    #实现响应时间短的优先分配<br>    }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<h3 id="②url-hash"><a href="#②url-hash" class="headerlink" title="②url_hash"></a>②url_hash</h3><p>　　按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
<p> #动态服务器组<br>    upstream dynamic_zuoyu {<br>        hash $request_uri;    #实现每个url定向到同一个后端服务器<br>        server localhost:8080;  #tomcat 7.0 server localhost:8081;  #tomcat 8.0 server localhost:8082;  #tomcat 8.5 server localhost:8083;  #tomcat 9.0 }</p>
<p><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>nrm和nvm</title>
    <url>/2019/10/29/nrm/</url>
    <content><![CDATA[<p>管理npm的小工具</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>nvm  管理node版本的工具</li>
<li>nrm  管理registry的工具<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2>nvm install latest： 安装最新的 nodejs 版本<br>nvm install 6.11.1： 安装对应的 nodejs 版本<br>nvm uninstall 6.11.1： 卸载对应的 nodejs 版本<br>nvm list available： 列出所有可用的 nodejs 版本<br>nvm list： 查看nvm列出已经安装的 nodejs 版本<br>nvm use 6.11.1： 使用对应的 nodejs 版本<h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装</span><br><span class="line">npm install nrm -g</span><br><span class="line">&#x2F;&#x2F; 查看源</span><br><span class="line">nrm ls</span><br><span class="line">&#x2F;&#x2F; 使用</span><br><span class="line">nrm use taobao</span><br><span class="line">&#x2F;&#x2F; 添加</span><br><span class="line">nrm add company http:&#x2F;&#x2F;npm.xxx.cn</span><br><span class="line">&#x2F;&#x2F; 删除</span><br><span class="line">nrm del company</span><br><span class="line">&#x2F;&#x2F; 测试</span><br><span class="line">nrm test [registry]：测试源的速度，不加对应的 registry 名称，测试所有源的速度，添加对应的名称，比如 company，就是测试 company 对应的源的速度</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>nuxt 使用 vue-meta动态配置meta相关问题</title>
    <url>/2020/07/14/nuxt-%E4%BD%BF%E7%94%A8-vue-meta%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AEmeta%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h4 id="1-需求背景"><a href="#1-需求背景" class="headerlink" title="1.需求背景"></a>1.需求背景</h4><p>需求：按照政府网站（域名以ankang.gov.cn结尾的网站）的规范要求, 站点/栏目/网页 要进行规范化的头部配置，因此单页面的vue 网站需要进行动态的meta 配置。例如：</p>
<p>一）网站标签。</p>
<p>规范名称</p>
<p>标签名称</p>
<p>是否多值</p>
<p>设置要求</p>
<p>赋值内容</p>
<p>网站名称</p>
<p>SiteName</p>
<p>否</p>
<p>必选</p>
<p>政府网站的规范名称</p>
<p>网站域名</p>
<p>SiteDomain</p>
<p>是</p>
<p>必选</p>
<p>政府网站的英文域名</p>
<p>政府网站标识码</p>
<p>SiteIDCode</p>
<p>否</p>
<p>必选</p>
<p>政府网站合法身份的标识</p>
<p>示例如下：</p>
<p>〈head〉 … 〈meta name=“SiteName” content=“中国政府网”〉 〈meta name=“SiteDomain”content=“<a href="http://www.gov.cn”〉/">www.gov.cn”〉</a> 〈meta name=“SiteIDCode” content=“bm01000001”〉 … 〈/head〉</p>
<p>二）栏目标签。</p>
<p>规范名称</p>
<p>标签名称</p>
<p>是否多值</p>
<p>设置要求</p>
<p>赋值内容</p>
<p>栏目名称</p>
<p>ColumnName</p>
<p>否</p>
<p>必选</p>
<p>政府网站具体栏目的名称</p>
<p>栏目描述</p>
<p>ColumnDescription</p>
<p>是</p>
<p>必选</p>
<p>反映栏目设置目的、主要内容的说明</p>
<p>栏目关键词</p>
<p>ColumnKeywords</p>
<p>是</p>
<p>必选</p>
<p>反映栏目内容特点的词语</p>
<p>栏目类别</p>
<p>ColumnType</p>
<p>是</p>
<p>必选</p>
<p>首页</p>
<p>概况信息</p>
<p>机构职能</p>
<p>负责人信息</p>
<p>工作动态</p>
<p>政策文件</p>
<p>信息公开指南</p>
<p>信息公开目录</p>
<p>信息公开年报</p>
<p>依申请公开</p>
<p>数据发布</p>
<p>数据开放</p>
<p>政策解读</p>
<p>回应关切</p>
<p>办事服务</p>
<p>咨询投诉</p>
<p>征集调查</p>
<p>在线访谈</p>
<p>……</p>
<p>示例如下：</p>
<p>〈head〉 … 〈meta name=“SiteName” content=“中国政府网”〉 〈meta name=“SiteDomain”content=“<a href="http://www.gov.cn”〉/">www.gov.cn”〉</a> 〈meta name=“SiteIDCode” content=“bm01000001”〉 〈meta name=“ColumnName” content=“政策”〉 〈meta name=“ColumnDescription” content=“中国政府网政策栏目发布中央和地方政府制定的法规，政策文件，中共中央有关文件，国务院公报，政府白皮书，政府信息公开，政策解读等。提供法律法规和已发布的文件的查询功能”〉 〈meta name=“ColumnKeywords” content=“国务院文件，行政法规，部门规章，中央文件，政府白皮书，国务院公报，政策专辑”〉 〈meta name=“ColumnType” content=“政策文件”〉 … 〈/head〉</p>
<p>（三）内容页面标签。</p>
<p>规范名称</p>
<p>标签名称</p>
<p>是否多值</p>
<p>设置要求</p>
<p>赋值内容</p>
<p>标题</p>
<p>ArticleTitle</p>
<p>否</p>
<p>必选</p>
<p>具体内容信息的标题</p>
<p>发布时间</p>
<p>PubDate</p>
<p>否</p>
<p>必选</p>
<p>内容信息的发布时间，格式为YYYY—MM—DD HH∶MM</p>
<p>来源</p>
<p>ContentSource</p>
<p>否</p>
<p>必选</p>
<p>文章的发布单位或转载来源</p>
<p>关键词</p>
<p>Keywords</p>
<p>否</p>
<p>可选</p>
<p>反映文章信息内容特点的词语</p>
<p>作者</p>
<p>Author</p>
<p>否</p>
<p>可选</p>
<p>文章的作者或责任编辑</p>
<p>摘要</p>
<p>Description</p>
<p>否</p>
<p>可选</p>
<p>内容信息的内容概要</p>
<p>图片</p>
<p>Image</p>
<p>否</p>
<p>可选</p>
<p>正文中图片URL</p>
<p>网址</p>
<p>Url</p>
<p>否</p>
<p>可选</p>
<p>文章的URL地址</p>
<p>示例如下：</p>
<p>〈head〉 … 〈meta name=“SiteName” content=“中国政府网”〉 〈meta name=“SiteDomain”content=“<a href="http://www.gov.cn”〉/">www.gov.cn”〉</a> 〈meta name=“SiteIDCode” content=“bm01000001”〉 〈meta name=“ColumnName” content=“要闻”〉 〈meta name=“ColumnType” content=“工作动态”〉 〈meta name=“ArticleTitle” content=“今天的国务院常务会议定了这3件大事”〉 〈meta name=“PubDate” content=“2017—04—12 21∶37”〉 〈meta name=“ContentSource” content=“中国政府网”〉 〈meta name=“Keywords” content=“国务院常务会，医疗联合体，中小学，幼儿园，安全风险防控，统计法”〉 〈meta name=“Author”content=“陆茜”〉 〈meta name=“Description” content=“部署推进医疗联合体建设，部署加强中小学幼儿园安全风险防控体系建设，通过《中华人民共和国统计法实施条例（草案）》。4月12日的国务院常务会定了这3件大事，会上，李克强总理对这些工作作出了哪些部署？”〉 〈meta name=“Url”</p>
<p>content=“<a href="http://www.gov.cn/xinwen/2017%E2%80%9404/12/content/_5185257.htm%E2%80%9D%E3%80%89">www.gov.cn/xinwen/2017—04/12/content\_5185257.htm”〉</a></p>
<p>… 〈/head〉</p>
<p> </p>
<h4 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h4><p>  引入 vue-meta .</p>
<ol>
<li>安装：npm install vue-meta –save</li>
<li>配置：</li>
</ol>
<p><img src="http://10.144.213.26:9898/wp-content/uploads/2020/07/111-300x265.jpg"><img src="http://10.144.213.26:9898/wp-content/uploads/2020/07/222-300x180.jpg"><br>  3.使用：在页面的export default 中引入 metaInfo方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  metaInfo () &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      meta: \[</span><br><span class="line"></span><br><span class="line">        &#123; charset: &#39;utf-8&#39; &#125;,</span><br><span class="line"></span><br><span class="line">        &#123; vmid: &#39;viewport&#39;, name: &#39;viewport&#39;, content: &#39;width&#x3D;device-width, initial-scale&#x3D;1&#39; &#125;,</span><br><span class="line"></span><br><span class="line">        &#123; vmid: &#39;keywords&#39;, name: &#39;keywords&#39;, content: &#39;化龙山国家级自然保护区,化龙山自然保护区,化龙山自然保护区&#39; &#125;,</span><br><span class="line"></span><br><span class="line">        &#123; vmid: &#39;description&#39;, hid: &#39;description&#39;, name: &#39;description&#39;, content: &#39;化龙山国家级自然保护区&#39; &#125;,</span><br><span class="line"></span><br><span class="line">        &#123; vmid: &#39;SiteName&#39;, name: &#39;SiteName&#39;, content: &#39;陕西化龙山国家级自然保护区&#39; &#125;,</span><br><span class="line"></span><br><span class="line">        &#123; vmid: &#39;SiteDomain&#39;, name: &#39;SiteDomain&#39;, content: &#39;hlsbhq.ankang.gov.cn&#x2F;&#39; &#125;,</span><br><span class="line"></span><br><span class="line">        &#123; vmid: &#39;ColumnName&#39;, name: &#39;ColumnName&#39;, content: this.colName &#125;,</span><br><span class="line"></span><br><span class="line">        &#123; vmid: &#39;ColumnDescription&#39;, name: &#39;ColumnDescription&#39;, content: this.colDescription &#125;,</span><br><span class="line"></span><br><span class="line">        &#123; vmid: &#39;ColumnKeywords&#39;, name: &#39;ColumnKeywords&#39;, content: this.colKeywords &#125;,</span><br><span class="line"></span><br><span class="line">        &#123; vmid: &#39;ColumnType&#39;, name: &#39;ColumnType&#39;, content: this.colType &#125;</span><br><span class="line"></span><br><span class="line">      \]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>nuxt 学习中遇到的问题</title>
    <url>/2020/07/17/nuxt-%E5%AD%A6%E4%B9%A0%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h2 id="构建问题"><a href="#构建问题" class="headerlink" title="构建问题"></a>构建问题</h2><p>1</p>
<p>如何在 head 里面引入 js 文件?</p>
<blockquote>
<p>背景: 在 <code>&lt;head&gt;</code> 标签中，以 inline 的形式引入 <code>flexible.js</code> 文件</p>
</blockquote>
<blockquote>
<p>移动端项目可以引入 <code>flexible.js</code> 来实现移动端适配</p>
</blockquote>
<p>Nuxt.js 通过 <code>vue-meta</code> 实现<strong>头部标签</strong>管理 通过查看文档发现，可以按照如下方式配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nuxt.config.js</span><br><span class="line">head: &#123;  </span><br><span class="line">  script: [</span><br><span class="line">    &#123; </span><br><span class="line">      innerHTML: &#39;console.log(&quot;hello&quot;)&#39;, </span><br><span class="line">      type: &#39;text&#x2F;javascript&#39;, </span><br><span class="line">      charset: &#39;utf-8&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果，生成 html 如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script </span><br><span class="line">data-n-head&#x3D;&quot;true&quot; </span><br><span class="line">type&#x3D;&quot;text&#x2F;javascript&quot; </span><br><span class="line">charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">console.log(&quot;hello&quot;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>发现 <code>vue-meta</code> 把引号做了转义处理，加入 <code>__dangerouslyDisableSanitizers: [&#39;script&#39;]</code> 后，就不会再对这些字符做转义了。 注释：该字段使用需慎重！ 接下来，要把 <code>console.log(&quot;hello&quot;)</code> 的内容替换成 <code>flexible.js</code>，配置升级之后如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head: &#123;  </span><br><span class="line">  script: [</span><br><span class="line">   &#123; </span><br><span class="line">    innerHTML: require(&#39;.&#x2F;assets&#x2F;js&#x2F;flexible&#39;), </span><br><span class="line">    type: &#39;text&#x2F;javascript&#39;, </span><br><span class="line">    charset: &#39;utf-8&#39;</span><br><span class="line">   &#125;</span><br><span class="line">  ],</span><br><span class="line">  __dangerouslyDisableSanitizers: [&#39;script&#39;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>踩坑成功，下一个坑…</p>
<p>2</p>
<p>如何预处理器?</p>
<blockquote>
<p>背景：在组件中的 <code>&lt;template&gt;、``&lt;script&gt;</code> 或 <code>&lt;style&gt;</code> 上使用各种预处理器</p>
</blockquote>
<blockquote>
<p>加上处理器后，控制台报错</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style lang&#x3D;&quot;sass&quot;&gt;</span><br><span class="line">.red</span><br><span class="line">  color: red</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>这个问题解决方法非常简单，只需要安装这些依赖就好：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev node-sass sass-loader</span><br></pre></td></tr></table></figure>

<p>但是解决过程并不是很顺利的，在阅读中文文档时，忽略版本号，按照上面的提示进行操作，发现不能成功，最后发现了该解决方案。 中文文档的版本号<strong>过低</strong>，如需查看文档，一定要看最新版本的英文文档！</p>
<p>3</p>
<p>如何使用 px2rem?</p>
<blockquote>
<p>背景：在 css 中，写入 px，通过 <code>px2rem loader</code> 将 px 转换成 rem</p>
</blockquote>
<p>在以前的项目中，是通过 <code>px2rem loader</code> 实现的，但是在 Nuxt.js 项目下，添加 css loader 还是很费力的，因为涉及到 <code>vue-loader</code>。 想到了一个其他方案： 可以使用 <code>postcss</code> 处理。可以在 <code>nuxt.config.js</code> 文件中添加配置，也可以在<code>postcss.conf.js</code> 文件中添加。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">build: &#123;  </span><br><span class="line">  postcss: [    </span><br><span class="line">    require(&#39;postcss-px2rem&#39;)(&#123;</span><br><span class="line">      remUnit: 75 &#x2F;&#x2F; 转换基本单位</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>4</p>
<p>如何拓展 webpack 配置?</p>
<blockquote>
<p>背景：给 utils 目录添加 alias</p>
</blockquote>
<p>刚刚说到，Nuxt.js 内置了 <code>webpack</code> 配置 如果要<strong>拓展配置</strong>，在 <code>nuxt.config.js</code> 文件中添加。 同时也可以在该文件中，将配置信息打印出来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extend (config, ctx) &#123;</span><br><span class="line">  console.log(&#39;webpack config:&#39;, config)  </span><br><span class="line">  if (ctx.isClient) &#123;    </span><br><span class="line">    &#x2F;&#x2F; 添加 alias 配置</span><br><span class="line">    Object.assign(config.resolve.alias, &#123;      </span><br><span class="line">      &#39;utils&#39;: path.resolve(__dirname, &#39;utils&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5</p>
<p>如何添加 vue plugin?</p>
<blockquote>
<p>背景：封装了一个 toast vue plugin</p>
</blockquote>
<blockquote>
<p>由于 vue 实例化的过程没有暴露出来，在哪个时机注入进去呢？</p>
</blockquote>
<p>可以在 <code>nuxt.config.js</code> 中添加 plugins 配置，这样插件就会在 Nuxt.js 应用初始化之前被加载导入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  plugins: [&#39;~plugins&#x2F;toast&#39;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>~plugins/toast.js 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import toast from &#39;..&#x2F;utils&#x2F;toast&#39;</span><br><span class="line">import &#39;..&#x2F;assets&#x2F;css&#x2F;toast.css&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(toast)</span><br></pre></td></tr></table></figure>

<p>6</p>
<p>如何修改环境变量 NODE_ENV?</p>
<blockquote>
<p>背景：在项目中，设置 3 个 <code>NODE_ENV</code> 的值，来对应不同的版本。</p>
</blockquote>
<blockquote>
<p>development，本地开发；release，预发布版本；production，线上版本。</p>
</blockquote>
<blockquote>
<p>其中，预发布版本比 production 版本，多出 vconsole。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line">&quot;scripts&quot;: &#123;  </span><br><span class="line">  &quot;buildDev&quot;: &quot;cross-env NODE_ENV&#x3D;release nuxt build &amp;&amp; backpack build&quot;,  </span><br><span class="line">  &quot;startDev&quot;: &quot;cross-env NODE_ENV&#x3D;release PORT&#x3D;3000 node build&#x2F;main.js&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>打印 <code>process.env.NODE_ENV</code> 依旧是：<code>production</code>。 在 <strong>backpack</strong> 的源码中，找到了答案： 在执行 <code>backpack build</code> 命令时，会把 <code>process.env.NODE_ENV</code> 修改为 <code>production</code>，并且是写死的不可配置的…… （重写 backpack，恩~） 注意：lerna 来管理还是一个值得关注的工具 只能在 <code>process.env</code> 下，添加 <code>__ENV</code> 属性，代表 <code>NODE_ENV</code>这时，在页面中打印出来的信息 <code>process.env.__ENV undefined</code>，但是可以打印出 <code>process.env.NODE_ENV</code>。可以通过配置 <code>nuxt.config.js</code> 中的，<code>env</code> 属性，解决该问题： <code>env: &#123;  __ENV: process.env.__ENV &#125;</code> <strong>开发问题</strong> 1</p>
<p>Window 或 Document 对象未定义?</p>
<blockquote>
<p>背景: 在引入第三方插件，或者直接在代码中写 <code>window</code> 时</p>
</blockquote>
<blockquote>
<p>控制台会给出警告，<code>window</code> 未定义。</p>
</blockquote>
<p>发生在这个问题的原因时，node 服务端并没有 <code>window</code> 或 <code>document</code> 对象。 解决方法：通过 <strong><code>process.browser</code></strong> 来区分环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (process.browser) &#123;  </span><br><span class="line">  &#x2F;&#x2F; 引入第三方插件</span><br><span class="line">  require(&#39;***&#39;)  </span><br><span class="line">  &#x2F;&#x2F; 或者修改window对象下某一属性</span><br><span class="line">  window.mobike &#x3D; &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>NUXT中使用filter</title>
    <url>/2020/05/16/nuxt%E4%B8%AD%E4%BD%BF%E7%94%A8filter/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>

<ul>
<li>  在nuxt.config.js配置filter.js</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    &#123; src: &#39;@&#x2F;plugins&#x2F;filters.js&#39;, ssr: false &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>  新建plugins/filter.js</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">cosnt filters&#x3D; &#123; time:()&#x3D;&gt;&#123; retrun &#39;年月日&#39; &#125; &#125; &#x2F;&#x2F; Vue注册全局过滤器 Object.keys(filters).forEach((key) &#x3D;&gt; &#123;  return Vue.filter(key, filters[key]) &#125;);</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>  在html直接使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;new Date()  time&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>nuxt开发</title>
    <url>/2020/06/04/nuxt%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h2 id="nuxt端口设置"><a href="#nuxt端口设置" class="headerlink" title="nuxt端口设置"></a>nuxt端口设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package.json</span><br><span class="line"></span><br><span class="line">&quot;config&quot;: &#123;</span><br><span class="line">      &quot;nuxt&quot;: &#123;</span><br><span class="line">            &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;port&quot;: &quot;21111&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─.gitignore</span><br><span class="line"></span><br><span class="line">├─nuxt.config.js   配置文件</span><br><span class="line"></span><br><span class="line">├─package-lock.json</span><br><span class="line"></span><br><span class="line">├─package.json</span><br><span class="line"></span><br><span class="line">├─README.md</span><br><span class="line"></span><br><span class="line">├─yarn.lock</span><br><span class="line"></span><br><span class="line">├─store   数据</span><br><span class="line"></span><br><span class="line">   ├─index.js</span><br><span class="line"></span><br><span class="line">   ├─README.md</span><br><span class="line"></span><br><span class="line">   ├─types.js</span><br><span class="line"></span><br><span class="line">   ├─modules</span><br><span class="line"></span><br><span class="line">       └menu.js</span><br><span class="line"></span><br><span class="line">├─static   静态文件</span><br><span class="line"></span><br><span class="line">   ├─favicon.ico</span><br><span class="line"></span><br><span class="line">   └README.md</span><br><span class="line"></span><br><span class="line">├─server  服务端启动入口</span><br><span class="line"></span><br><span class="line">   └index.js</span><br><span class="line"></span><br><span class="line">├─plugins  插件</span><br><span class="line"></span><br><span class="line">    ├─element-ui.js</span><br><span class="line"></span><br><span class="line">    ├─filters.js</span><br><span class="line"></span><br><span class="line">    ├─README.md</span><br><span class="line"></span><br><span class="line">    └swiper.js</span><br><span class="line"></span><br><span class="line">├─pages  页面</span><br><span class="line"></span><br><span class="line">   ├─index.vue</span><br><span class="line"></span><br><span class="line">   ├─README.md</span><br><span class="line"></span><br><span class="line">   ├─index</span><br><span class="line"></span><br><span class="line">      ├─index.vue</span><br><span class="line"></span><br><span class="line">      ├─search</span><br><span class="line"></span><br><span class="line">         └\_keyword.vue</span><br><span class="line"></span><br><span class="line">      ├─column</span><br><span class="line"></span><br><span class="line">         └\_code.vue</span><br><span class="line"></span><br><span class="line">      ├─article</span><br><span class="line"></span><br><span class="line">          └\_id.vue</span><br><span class="line"></span><br><span class="line">├─middleware  中间件</span><br><span class="line"></span><br><span class="line">     └README.md</span><br><span class="line"></span><br><span class="line">├─layouts     布局</span><br><span class="line"></span><br><span class="line">    ├─default.vue</span><br><span class="line"></span><br><span class="line">    ├─error.vue</span><br><span class="line"></span><br><span class="line">    └README.md</span><br><span class="line"></span><br><span class="line">├─dist     打包后目录</span><br><span class="line"></span><br><span class="line">├─components 组件</span><br><span class="line"></span><br><span class="line">     ├─columnOne.vue</span><br><span class="line"></span><br><span class="line">     ├─columnPic.vue</span><br><span class="line"></span><br><span class="line">     ├─columnTwo.vue</span><br><span class="line"></span><br><span class="line">     ├─customVideoPlay.vue</span><br><span class="line"></span><br><span class="line">     ├─footer.vue</span><br><span class="line"></span><br><span class="line">     ├─header.vue</span><br><span class="line"></span><br><span class="line">     ├─myvideo.vue</span><br><span class="line"></span><br><span class="line">     ├─README.md</span><br><span class="line"></span><br><span class="line">     └sideBar.vue</span><br><span class="line"></span><br><span class="line">├─assets  文件</span><br><span class="line"></span><br><span class="line">   ├─README.md</span><br><span class="line"></span><br><span class="line">   ├─utils</span><br><span class="line"></span><br><span class="line">      ├─config.js</span><br><span class="line"></span><br><span class="line">      └http.js</span><br><span class="line"></span><br><span class="line">   ├─styles</span><br><span class="line"></span><br><span class="line">      ├─iconfont.eot</span><br><span class="line"></span><br><span class="line">      ├─iconfont.scss</span><br><span class="line"></span><br><span class="line">      ├─iconfont.svg</span><br><span class="line"></span><br><span class="line">      ├─iconfont.ttf</span><br><span class="line"></span><br><span class="line">      ├─iconfont.woff</span><br><span class="line"></span><br><span class="line">      ├─iconfont.woff2</span><br><span class="line"></span><br><span class="line">      └variable.scss</span><br><span class="line"></span><br><span class="line">   ├─services</span><br><span class="line"></span><br><span class="line">       └index.js</span><br><span class="line"></span><br><span class="line">   ├─images</span><br><span class="line"></span><br><span class="line">├─.nuxt  打包后运行文件</span><br><span class="line"></span><br><span class="line">   ├─App.js</span><br><span class="line"></span><br><span class="line">   ├─axios.js</span><br><span class="line"></span><br><span class="line">   ├─client.js</span><br><span class="line"></span><br><span class="line">   ├─empty.js</span><br><span class="line"></span><br><span class="line">   ├─index.js</span><br><span class="line"></span><br><span class="line">   ├─loading.html</span><br><span class="line"></span><br><span class="line">   ├─middleware.js</span><br><span class="line"></span><br><span class="line">   ├─router.js</span><br><span class="line"></span><br><span class="line">   ├─router.scrollBehavior.js</span><br><span class="line"></span><br><span class="line">   ├─server.js</span><br><span class="line"></span><br><span class="line">   ├─store.js</span><br><span class="line"></span><br><span class="line">   ├─utils.js</span><br><span class="line"></span><br><span class="line">   ├─views</span><br><span class="line"></span><br><span class="line">      ├─app.template.html</span><br><span class="line"></span><br><span class="line">      └error.html</span><br><span class="line"></span><br><span class="line">   ├─mixins</span><br><span class="line"></span><br><span class="line">      ├─fetch.client.js</span><br><span class="line"></span><br><span class="line">      └fetch.server.js</span><br><span class="line"></span><br><span class="line">   ├─components</span><br><span class="line"></span><br><span class="line">        ├─nuxt-child.js</span><br><span class="line"></span><br><span class="line">        ├─nuxt-error.vue</span><br><span class="line"></span><br><span class="line">        ├─nuxt-link.client.js</span><br><span class="line"></span><br><span class="line">        ├─nuxt-link.server.js</span><br><span class="line"></span><br><span class="line">        ├─nuxt-loading.vue</span><br><span class="line"></span><br><span class="line">        └nuxt.js</span><br></pre></td></tr></table></figure>
<h2 id="nuxt的方法属性"><a href="#nuxt的方法属性" class="headerlink" title="nuxt的方法属性"></a>nuxt的方法属性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asyncData 使得你能够在渲染组件之前异步获取数据</span><br><span class="line">fetch  方法用于在渲染页面前填充应用的状态树（store）数据， 与 asyncData 方法类似，不同的是它不会设置组件的数据</span><br><span class="line">loading 属性为您提供了禁用特定页面上的默认加载进度条的选项。</span><br><span class="line">layouts 根目录下的所有文件都属于个性化布局文件，可以在页面组件中利用 layout 属性来引用。</span><br><span class="line">middleware 属性  设置中间件，比如校验登录等</span><br><span class="line">transition 如果想给某个页面自定义过渡特效的话</span><br><span class="line">validate 动态路由对应的页面组件中配置一个校验方法用于校验动态路由参数的有效性</span><br></pre></td></tr></table></figure>
<h2 id="nuxt的多请求"><a href="#nuxt的多请求" class="headerlink" title="nuxt的多请求"></a>nuxt的多请求</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async asyncData (&#123; params, error &#125;) &#123;</span><br><span class="line">    let \[request1Data, request2Data, request3Data\] &#x3D; await Promise.all(\[</span><br><span class="line">      axios.get(&#39;&#x2F;api&#x2F;home&#x2F;request1&#39;),</span><br><span class="line">      axios.get(&#39;&#x2F;api&#x2F;home&#x2F;requset2&#39;),</span><br><span class="line">      axios.get(&#39;&#x2F;api&#x2F;home&#x2F;request3&#39;)</span><br><span class="line">    \])</span><br><span class="line">    return &#123;</span><br><span class="line">      data1: request1Data.data,</span><br><span class="line">      data2: request2Data.data,</span><br><span class="line">      data3: request3Data.data</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>pm2 守护进程</title>
    <url>/2020/05/20/pm2-%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h2 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br><span class="line"><span class="comment"># 然后需要将pm2建立软连接，pm2的bin文件是在nodejs/bin/pm2, 所以： /home/nodejs/bin/pm2 是node 的命令位置</span></span><br><span class="line">ln -s /home/nodejs/bin/pm2 /usr/<span class="built_in">local</span>/bin/pm2</span><br></pre></td></tr></table></figure>

<h2 id="pm2-的一些命令"><a href="#pm2-的一些命令" class="headerlink" title="pm2 的一些命令"></a>pm2 的一些命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start npm --name <span class="string">&quot;nuxt&quot;</span> -- run start</span><br><span class="line">$ npm install pm2 -g     <span class="comment"># 命令行安装 pm2 </span></span><br><span class="line">$ pm2 start app.js -i 4 <span class="comment">#后台运行pm2，启动4个app.js </span></span><br><span class="line">                                <span class="comment"># 也可以把&#x27;max&#x27; 参数传递给 start</span></span><br><span class="line">                                <span class="comment"># 正确的进程数目依赖于Cpu的核心数目</span></span><br><span class="line">$ pm2 start app.js --name my-api <span class="comment"># 命名进程</span></span><br><span class="line">$ pm2 list               <span class="comment"># 显示所有进程状态</span></span><br><span class="line">$ pm2 monit              <span class="comment"># 监视所有进程</span></span><br><span class="line">$ pm2 logs               <span class="comment">#  显示所有进程日志</span></span><br><span class="line">$ pm2 stop all           <span class="comment"># 停止所有进程</span></span><br><span class="line">$ pm2 restart all        <span class="comment"># 重启所有进程</span></span><br><span class="line">$ pm2 reload all         <span class="comment"># 0秒停机重载进程 (用于 NETWORKED 进程)</span></span><br><span class="line">$ pm2 stop 0             <span class="comment"># 停止指定的进程</span></span><br><span class="line">$ pm2 restart 0          <span class="comment"># 重启指定的进程</span></span><br><span class="line">$ pm2 startup            <span class="comment"># 产生 init 脚本 保持进程活着</span></span><br><span class="line">$ pm2 web                <span class="comment"># 运行健壮的 computer API endpoint</span></span><br><span class="line">$ pm2 delete 0           <span class="comment"># 杀死指定的进程</span></span><br><span class="line">$ pm2 delete all         <span class="comment"># 杀死全部进程</span></span><br></pre></td></tr></table></figure>

<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>项目根目录 pm2 init <br>vi ecosystem.config.js <code>module.exports = &#123;   apps: [&#123;     name: &#39;nuxt-app&#39;,     script: &#39;./node_modules/nuxt/bin/nuxt.js&#39;,  // 不能用npm run start 的命令，会报错端口占用     args: &#39;start&#39;,     // Options reference: https://pm2.io/doc/en/runtime/reference/ecosystem-file/     instances: 2, // 实例个数，也可以填 &#39;max&#39; 自动匹配服务器支持的最大实例数     exec_mode: &#39;cluster&#39;,     autorestart: true,     watch: false,     max_memory_restart: &#39;1G&#39;, // 我的服务器是1g内存，当超过1g内存，会重启     env: &#123;       NODE_ENV: &#39;development&#39;     &#125;,     env_production: &#123;       NODE_ENV: &#39;production&#39;     &#125;   &#125;] &#125;;</code> // 运行程序 pm2 start</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>promise实现</title>
    <url>/2019/06/02/promise%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>本文主要写promise自己的实现方式</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 判断变量否为function</span><br><span class="line">  const isFunction &#x3D; variable &#x3D;&gt; typeof variable &#x3D;&#x3D;&#x3D; &#39;function&#39;</span><br><span class="line">  &#x2F;&#x2F; 定义Promise的三种状态常量</span><br><span class="line">  const PENDING &#x3D; &#39;PENDING&#39;</span><br><span class="line">  const FULFILLED &#x3D; &#39;FULFILLED&#39;</span><br><span class="line">  const REJECTED &#x3D; &#39;REJECTED&#39;</span><br><span class="line"></span><br><span class="line">  class MyPromise &#123;</span><br><span class="line">    constructor (handle) &#123;</span><br><span class="line">      if (!isFunction(handle)) &#123;</span><br><span class="line">        throw new Error(&#39;MyPromise must accept a function as a parameter&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 添加状态</span><br><span class="line">      this._status &#x3D; PENDING</span><br><span class="line">      &#x2F;&#x2F; 添加状态</span><br><span class="line">      this._value &#x3D; undefined</span><br><span class="line">      &#x2F;&#x2F; 添加成功回调函数队列</span><br><span class="line">      this._fulfilledQueues &#x3D; []</span><br><span class="line">      &#x2F;&#x2F; 添加失败回调函数队列</span><br><span class="line">      this._rejectedQueues &#x3D; []</span><br><span class="line">      &#x2F;&#x2F; 执行handle</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">        handle(this._resolve.bind(this), this._reject.bind(this)) </span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        this._reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加resovle时执行的函数</span><br><span class="line">    _resolve (val) &#123;</span><br><span class="line">      const run &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        if (this._status !&#x3D;&#x3D; PENDING) return</span><br><span class="line">        this._status &#x3D; FULFILLED</span><br><span class="line">        &#x2F;&#x2F; 依次执行成功队列中的函数，并清空队列</span><br><span class="line">        const runFulfilled &#x3D; (value) &#x3D;&gt; &#123;</span><br><span class="line">          let cb;</span><br><span class="line">          while (cb &#x3D; this._fulfilledQueues.shift()) &#123;</span><br><span class="line">            cb(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 依次执行失败队列中的函数，并清空队列</span><br><span class="line">        const runRejected &#x3D; (error) &#x3D;&gt; &#123;</span><br><span class="line">          let cb;</span><br><span class="line">          while (cb &#x3D; this._rejectedQueues.shift()) &#123;</span><br><span class="line">            cb(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,</span><br><span class="line">          当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态</span><br><span class="line">        *&#x2F;</span><br><span class="line">        if (val instanceof MyPromise) &#123;</span><br><span class="line">          val.then(value &#x3D;&gt; &#123;</span><br><span class="line">            this._value &#x3D; value</span><br><span class="line">            runFulfilled(value)</span><br><span class="line">          &#125;, err &#x3D;&gt; &#123;</span><br><span class="line">            this._value &#x3D; err</span><br><span class="line">            runRejected(err)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this._value &#x3D; val</span><br><span class="line">          runFulfilled(val)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 为了支持同步的Promise，这里采用异步调用</span><br><span class="line">      setTimeout(run, 0)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加reject时执行的函数</span><br><span class="line">    _reject (err) &#123; </span><br><span class="line">      if (this._status !&#x3D;&#x3D; PENDING) return</span><br><span class="line">      &#x2F;&#x2F; 依次执行失败队列中的函数，并清空队列</span><br><span class="line">      const run &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        this._status &#x3D; REJECTED</span><br><span class="line">        this._value &#x3D; err</span><br><span class="line">        let cb;</span><br><span class="line">        while (cb &#x3D; this._rejectedQueues.shift()) &#123;</span><br><span class="line">          cb(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 为了支持同步的Promise，这里采用异步调用</span><br><span class="line">      setTimeout(run, 0)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加then方法</span><br><span class="line">    then (onFulfilled, onRejected) &#123;</span><br><span class="line">      const &#123; _value, _status &#125; &#x3D; this</span><br><span class="line">      &#x2F;&#x2F; 返回一个新的Promise对象</span><br><span class="line">      return new MyPromise((onFulfilledNext, onRejectedNext) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 封装一个成功时执行的函数</span><br><span class="line">        let fulfilled &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            if (!isFunction(onFulfilled)) &#123;</span><br><span class="line">              onFulfilledNext(value)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              let res &#x3D;  onFulfilled(value);</span><br><span class="line">              if (res instanceof MyPromise) &#123;</span><br><span class="line">                &#x2F;&#x2F; 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span><br><span class="line">                res.then(onFulfilledNext, onRejectedNext)</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F;否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span><br><span class="line">                onFulfilledNext(res)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; catch (err) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果函数执行出错，新的Promise对象的状态为失败</span><br><span class="line">            onRejectedNext(err)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 封装一个失败时执行的函数</span><br><span class="line">        let rejected &#x3D; error &#x3D;&gt; &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            if (!isFunction(onRejected)) &#123;</span><br><span class="line">              onRejectedNext(error)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                let res &#x3D; onRejected(error);</span><br><span class="line">                if (res instanceof MyPromise) &#123;</span><br><span class="line">                  &#x2F;&#x2F; 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span><br><span class="line">                  res.then(onFulfilledNext, onRejectedNext)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                  &#x2F;&#x2F;否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span><br><span class="line">                  onFulfilledNext(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; catch (err) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果函数执行出错，新的Promise对象的状态为失败</span><br><span class="line">            onRejectedNext(err)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        switch (_status) &#123;</span><br><span class="line">          &#x2F;&#x2F; 当状态为pending时，将then方法回调函数加入执行队列等待执行</span><br><span class="line">          case PENDING:</span><br><span class="line">            this._fulfilledQueues.push(fulfilled)</span><br><span class="line">            this._rejectedQueues.push(rejected)</span><br><span class="line">            break</span><br><span class="line">          &#x2F;&#x2F; 当状态已经改变时，立即执行对应的回调函数</span><br><span class="line">          case FULFILLED:</span><br><span class="line">            fulfilled(_value)</span><br><span class="line">            break</span><br><span class="line">          case REJECTED:</span><br><span class="line">            rejected(_value)</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加catch方法</span><br><span class="line">    catch (onRejected) &#123;</span><br><span class="line">      return this.then(undefined, onRejected)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加静态resolve方法</span><br><span class="line">    static resolve (value) &#123;</span><br><span class="line">      &#x2F;&#x2F; 如果参数是MyPromise实例，直接返回这个实例</span><br><span class="line">      if (value instanceof MyPromise) return value</span><br><span class="line">      return new MyPromise(resolve &#x3D;&gt; resolve(value))</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加静态reject方法</span><br><span class="line">    static reject (value) &#123;</span><br><span class="line">      return new MyPromise((resolve ,reject) &#x3D;&gt; reject(value))</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加静态all方法</span><br><span class="line">    static all (list) &#123;</span><br><span class="line">      return new MyPromise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 返回值的集合</span><br><span class="line">         *&#x2F;</span><br><span class="line">        let values &#x3D; []</span><br><span class="line">        let count &#x3D; 0</span><br><span class="line">        for (let [i, p] of list.entries()) &#123;</span><br><span class="line">          &#x2F;&#x2F; 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span><br><span class="line">          this.resolve(p).then(res &#x3D;&gt; &#123;</span><br><span class="line">            values[i] &#x3D; res</span><br><span class="line">            count++</span><br><span class="line">            &#x2F;&#x2F; 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span><br><span class="line">            if (count &#x3D;&#x3D;&#x3D; list.length) resolve(values)</span><br><span class="line">          &#125;, err &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; 有一个被rejected时返回的MyPromise状态就变成rejected</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 添加静态race方法</span><br><span class="line">    static race (list) &#123;</span><br><span class="line">      return new MyPromise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        for (let p of list) &#123;</span><br><span class="line">          &#x2F;&#x2F; 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span><br><span class="line">          this.resolve(p).then(res &#x3D;&gt; &#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">          &#125;, err &#x3D;&gt; &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    finally (cb) &#123;</span><br><span class="line">      return this.then(</span><br><span class="line">        value  &#x3D;&gt; MyPromise.resolve(cb()).then(() &#x3D;&gt; value),</span><br><span class="line">        reason &#x3D;&gt; MyPromise.resolve(cb()).then(() &#x3D;&gt; &#123; throw reason &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native安卓系统如何使用图标</title>
    <url>/2020/06/13/react-native%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h3 id="一、使用图标库react-native-vector-icons"><a href="#一、使用图标库react-native-vector-icons" class="headerlink" title="一、使用图标库react-native-vector-icons"></a>一、使用图标库react-native-vector-icons</h3><h4 id="1-安装react-native-vector-icons；里面集合了很多的图标库；"><a href="#1-安装react-native-vector-icons；里面集合了很多的图标库；" class="headerlink" title="1. 安装react-native-vector-icons；里面集合了很多的图标库；"></a>1. 安装react-native-vector-icons；里面集合了很多的图标库；</h4><p>yarn add react-native-vector-icons –save</p>
<h4 id="2-链接到项目"><a href="#2-链接到项目" class="headerlink" title=" 2. 链接到项目"></a><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612144922.png"> 2. 链接到项目</h4><p>react-native link react-native-vector-icons</p>
<h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><p>打开node_modules文件找到react-native-vector-icons文件，可以看到里面有很多字体文件，以Ionicons为例，js文件中都标明了用法 <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612145547.png"> 可以找到这些字体文件的官网，看需要哪些图标，自己拷贝名称在代码中使用，以Ionicons为例，官网地址是<a href="https://ionicframework.com/docs/v3/ionicons/">https://ionicframework.com/docs/v3/ionicons/</a> <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612145642.png"> 在首页中新增一个“add-circle”图标</p>
<p>import Ionicons from ‘react-native-vector-icons/Ionicons’; // 引入</p>
<p><Ionicons name="ios-add-circle" size={20} color="#4F8EF7" /> // 使用</p>
<p>看到效果图：</p>
<p><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612150311.png"></p>
<h3 id="二、使用自定义字体"><a href="#二、使用自定义字体" class="headerlink" title="二、使用自定义字体"></a>二、使用自定义字体</h3><p>项目中常需要用自己设计的图标，如iconfont。我们自己的图标也是用iconfont。如何在安卓中使用自定义的图标？</p>
<h4 id="1-下载图标文件至本地，需要用到后缀为-ttf和-json的文件"><a href="#1-下载图标文件至本地，需要用到后缀为-ttf和-json的文件" class="headerlink" title="1. 下载图标文件至本地，需要用到后缀为.ttf和.json的文件"></a>1. 下载图标文件至本地，需要用到后缀为.ttf和.json的文件</h4><p><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612170159.png"> <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612170226.png"></p>
<h4 id="2-将iconfont-json拷贝到-android-app-src-main-assets-fonts目录下"><a href="#2-将iconfont-json拷贝到-android-app-src-main-assets-fonts目录下" class="headerlink" title="2. 将iconfont.json拷贝到\android\app\src\main\assets\fonts目录下"></a>2. 将iconfont.json拷贝到\android\app\src\main\assets\fonts目录下</h4><h4 id="3-提取-json文件中需要的字段"><a href="#3-提取-json文件中需要的字段" class="headerlink" title="3. 提取.json文件中需要的字段"></a>3. 提取.json文件中需要的字段</h4><p>这里我们还是以react-native-vector-icons为工具，可以参考它的源码编写自己的图标库。可以看到react-native-vector-icons引入了createIconSet方法和一个json文件。json文件key是icon的名称，value是编码。 <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612170543.png"> <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612170651.png"> 下载的iconfont.json如下图，因此需要写一个方法提取出需要key和value值，key值取font_class, value取unicode_decimal。 <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612170907.png"></p>
<p>// 将json文件的内容赋值给a变量<br>var obj = {};<br>a.glyphs.forEach(v =&gt; {<br>obj[v.font_class] = v.unicode_decimal<br>})<br>console.log(JSON.stringfy(obj))</p>
<p>控制台执行以上代码，赋值打印出的内容，创建一个json文件，将打印的内容放进去。 <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612171414.png"></p>
<h4 id="4-引入代码"><a href="#4-引入代码" class="headerlink" title="4. 引入代码"></a>4. 引入代码</h4><p>再创建一个js文件，参考react-native-vector-icons的写法，如下</p>
<p>import { createIconSet } from ‘react-native-vector-icons’;<br>import glyphMap from ‘./icons.json’;<br>const Iconfont = createIconSet(glyphMap, ‘iconfont’, ‘iconfont.ttf’);<br>export default Iconfont;</p>
<h4 id="5-使用"><a href="#5-使用" class="headerlink" title="5. 使用"></a>5. 使用</h4><p>import Iconfont from ‘../styles/icons/icons’<br><View style={styles.textContainer}><br>   <Text>这是用户页~</Text><br>   &lt;Iconfont name={“Datadisplay”} size={50} /&gt;<br></View></p>
<p>可以看到效果如下 <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612171713.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>React Native开发环境搭建——Android Studio</title>
    <url>/2020/06/09/react-native%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h2 id="一、安装依赖"><a href="#一、安装依赖" class="headerlink" title="一、安装依赖"></a>一、安装依赖</h2><p>必须安装的依赖有：Node、Python2、JDK 和 Android Studio。 虽然你可以使用<code>任何编辑器</code>来开发应用（编写 js 代码），但你仍然必须安装 Android Studio 来获得编译 Android 应用所需的工具和环境 <strong>Node, Python2, JDK</strong> 注意 Node 的版本应大于等于 12，Python 的版本必须为 2.x（不支持 3.x），而 JDK 的版本必须是 1.8（目前不支持 1.9 及更高版本，注意 1.8 版本官方也直接称 8 版本）。安装完 Node 后建议设置 npm 镜像（淘宝源）以加速后面的过程（或使用科学上网工具）。</p>
<h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><p>Yarn是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。 安装完 yarn 之后就可以用 yarn 代替 npm 了。</p>
<h3 id="Android-开发环境"><a href="#Android-开发环境" class="headerlink" title="Android 开发环境"></a>Android 开发环境</h3><p>如果你之前没有接触过 Android 的开发环境，那么请做好心理准备，这一过程相当繁琐。请<code>万分仔细</code>地阅读下面的说明，严格对照文档进行配置操作。</p>
<blockquote>
<p>请注意！！！国内用户必须必须必须有稳定的翻墙工具，否则在下载、安装、配置过程中会不断遭遇链接超时或断开，无法进行开发工作。某些翻墙工具可能只提供浏览器的代理功能，或只针对特定网站代理等等，请自行研究配置或更换其他软件。总之如果报错中出现有网址，那么 99% 就是无法正常翻墙。</p>
</blockquote>
<h4 id="1-安装-Android-Studio"><a href="#1-安装-Android-Studio" class="headerlink" title="1. 安装 Android Studio"></a>1. 安装 Android Studio</h4><p>安装界面中选择”Custom”选项，确保选中了以下几项：</p>
<ul>
<li>  Android SDK</li>
<li>  Android SDK Platform</li>
<li>  Performance (Intel ® HAXM)</li>
<li>  Android Virtual Device</li>
</ul>
<h4 id="2-安装-Android-SDK"><a href="#2-安装-Android-SDK" class="headerlink" title="2. 安装 Android SDK"></a>2. 安装 Android SDK</h4><p>Android Studio 默认会安装最新版本的 Android SDK。目前编译 React Native 应用需要的是<code>Android 9 (Pie)</code>版本的 SDK（注意 SDK 版本不等于终端系统版本，RN 目前支持 android4.1 以上设备）。你可以在 Android Studio 的 SDK Manager 中选择安装各版本的 SDK。 你可以在 Android Studio 的欢迎界面中找到 SDK Manager。点击”Configure”，然后就能看到”SDK Manager”。 <img src="https://cdn.jsdelivr.net/gh/reactnativecn/react-native-website@gh-pages/docs/assets/GettingStartedAndroidStudioWelcomeWindows.png" alt="Android Studio Welcome"></p>
<blockquote>
<p>SDK Manager 还可以在 Android Studio 的”Preferences”菜单中找到。具体路径是<strong>Appearance &amp; Behavior</strong> → <strong>System Settings</strong> → <strong>Android SDK</strong>。</p>
</blockquote>
<p>在 SDK Manager 中选择”SDK Platforms”选项卡，然后在右下角勾选”Show Package Details”。展开<code>Android 9 (Pie)</code>选项，确保勾选了下面这些组件（重申你必须使用稳定的翻墙工具，否则可能都看不到这个界面）：</p>
<ul>
<li>  Android SDK Platform 28</li>
<li>  Intel x86 Atom_64 System Image（官方模拟器镜像文件，使用非官方模拟器不需要安装此组件）</li>
</ul>
<p>然后点击”SDK Tools”选项卡，同样勾中右下角的”Show Package Details”。展开”Android SDK Build-Tools”选项，确保选中了 React Native 所必须的<code>28.0.3</code>版本。你可以同时安装多个其他版本。 最后点击”Apply”来下载和安装这些组件。</p>
<h4 id="3-配置-ANDROID-HOME-环境变量"><a href="#3-配置-ANDROID-HOME-环境变量" class="headerlink" title="3. 配置 ANDROID_HOME 环境变量"></a>3. 配置 ANDROID_HOME 环境变量</h4><p>React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径，从而正常进行编译。 打开<code>控制面板</code> -&gt; <code>系统和安全</code> -&gt; <code>系统</code> -&gt; <code>高级系统设置</code> -&gt; <code>高级</code> -&gt; <code>环境变量</code> -&gt; <code>新建</code>，创建一个名为<code>ANDROID_HOME</code>的环境变量（系统或用户变量均可），指向你的 Android SDK 所在的目录（具体的路径可能和下图不一致，请自行确认）： <img src="https://cdn.jsdelivr.net/gh/reactnativecn/react-native-website@gh-pages/docs/assets/GettingStartedAndroidEnvironmentVariableANDROID_HOME.png" alt="ANDROID_HOME Environment Variable"> SDK 默认是安装在下面的目录：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">c:\Users\你的用户名\AppData\Local\Android\Sdk</span><br></pre></td></tr></table></figure>

<p>你可以在 Android Studio 的”Preferences”菜单中查看 SDK 的真实路径，具体是<strong>Appearance &amp; Behavior</strong> → <strong>System Settings</strong> → <strong>Android SDK</strong>。 你需要关闭现有的命令符提示窗口然后重新打开，这样新的环境变量才能生效。</p>
<h4 id="4-把一些工具目录添加到环境变量-Path-中"><a href="#4-把一些工具目录添加到环境变量-Path-中" class="headerlink" title="4. 把一些工具目录添加到环境变量 Path 中"></a>4. 把一些工具目录添加到环境变量 Path 中</h4><p>打开<code>控制面板</code> -&gt; <code>系统和安全</code> -&gt; <code>系统</code> -&gt; <code>高级系统设置</code> -&gt; <code>高级</code> -&gt; <code>环境变量</code>，选中<strong>Path</strong>变量，然后点击<strong>编辑</strong>。点击<strong>新建</strong>然后把这些工具目录路径添加进去：platform-tools、emulator、tools、tools/bin</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">%ANDROID_HOME%\platform<span class="literal">-tools</span></span><br><span class="line">%ANDROID_HOME%\emulator</span><br><span class="line">%ANDROID_HOME%\tools</span><br><span class="line">%ANDROID_HOME%\tools\bin</span><br></pre></td></tr></table></figure>

<h2 id="二、创建新项目"><a href="#二、创建新项目" class="headerlink" title="二、创建新项目"></a>二、创建新项目</h2><p>npx react-native init AwesomeProject</p>
<h3 id="使用-Android-模拟器"><a href="#使用-Android-模拟器" class="headerlink" title="使用 Android 模拟器"></a>使用 Android 模拟器</h3><p>你可以使用 Android Studio 打开项目下的”android”目录，然后可以使用”AVD Manager”来查看可用的虚拟设备，它的图标看起来像下面这样： <img src="https://cdn.jsdelivr.net/gh/reactnativecn/react-native-website@gh-pages/docs/assets/GettingStartedAndroidStudioAVD.png" alt="Android Studio AVD Manager"> 如果你刚刚才安装 Android Studio，那么可能需要先创建一个虚拟设备。点击”Create Virtual Device…”，然后选择所需的设备类型并点击”Next”，然后选择<strong>Pie</strong> API Level 28 image.</p>
<h2 id="编译并运行-React-Native-应用"><a href="#编译并运行-React-Native-应用" class="headerlink" title="编译并运行 React Native 应用"></a>编译并运行 React Native 应用</h2><p>确保你先运行了模拟器或者连接了真机，然后在你的项目目录中运行<code>yarn android</code>或者<code>yarn react-native run-android</code>：</p>
<p>cd AwesomeProject<br>yarn android</p>
<h1 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h1><p>yarn react-native run-android</p>
<p>如果配置没有问题，你应该可以看到应用自动安装到设备上并开始运行。注意第一次运行时需要下载大量编译依赖，耗时可能数十分钟。此过程<code>严重依赖稳定的翻墙工具</code>，否则将频繁遭遇链接超时和断开，导致无法运行。</p>
<h2 id="三、修改项目"><a href="#三、修改项目" class="headerlink" title="三、修改项目"></a>三、修改项目</h2><p>现在你已经成功运行了项目，我们可以开始尝试动手改一改了：</p>
<ul>
<li>  使用你喜欢的文本编辑器打开<code>App.js</code>并随便改上几行</li>
<li>  按两下 R 键，或是在开发者菜单中选择 _Reload JS_，就可以看到你的最新修改。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>React-Navigation使用简介（一）</title>
    <url>/2020/06/11/react-navigation%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>React-Navigation是react的路由插件</p>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add @react-navigation&#x2F;native</span><br><span class="line">yarn add react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community&#x2F;masked-view</span><br><span class="line">yarn add @react-navigation&#x2F;stack</span><br></pre></td></tr></table></figure>
<h2 id="二、使用示例"><a href="#二、使用示例" class="headerlink" title="二、使用示例"></a>二、使用示例</h2><h3 id="1-创建路由页面"><a href="#1-创建路由页面" class="headerlink" title="1  创建路由页面"></a>1  创建路由页面</h3><p>（1）引入所需依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;react-native-gesture-handler&#39;;</span><br><span class="line">import &#123; NavigationContainer &#125; from &#39;@react-navigation&#x2F;native&#39;;</span><br><span class="line">import &#123; createStackNavigator &#125; from &#39;@react-navigation&#x2F;stack&#39;;</span><br><span class="line"></span><br><span class="line">**注：react-native-gesture-handler要在入口文件（index.js&#x2F;App.js）最顶部引入**</span><br></pre></td></tr></table></figure>
<p>（2）创建路由页面并在App.js中引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; View, Text, Button &#125; from &#39;react-native&#39;;</span><br><span class="line">export default class Home extends Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return &lt;View&gt;&lt;View &#x2F;&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(3) 配置路由</p>
<p>initialRouteName 可指定加载的路由页面</p>
<p><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200611134943.png"> 配置完成页面如下：</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200611092002.png"></h3><h3 id="2-路由跳转及参数传递"><a href="#2-路由跳转及参数传递" class="headerlink" title="2  路由跳转及参数传递"></a>2  路由跳转及参数传递</h3><p>路由子页面组件会被传递route和navigator两个参数，用于获取路由的参数及路由的事件 路由跳转及参数传递可使用</p>
<p>this.props.navigation.navigate(routeName, params); // routeName是目的路由名称，params为参数<br>this.props.navigation.push(routeName, params)<br>this.props.navigation.goBack() // 回到上一级</p>
<p><strong>初始化参数可使用initialParams</strong></p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200611141136.png"></h3><p><strong>完整示例如下：</strong> Home页面</p>
<h3 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200611141305.png"></h3><p>Login页面 <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200611141315.png"> 运行结果如下图所示 <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200611141419.png"> <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200611141436.png"> 3 自定义Header栏 页面默认为白底黑字，可通过option属性自定义样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Stack.Screen</span><br><span class="line"> name\&#x3D;&quot;Home&quot;</span><br><span class="line"> component\&#x3D;&#123;HomeScreen&#125;</span><br><span class="line"> options\&#x3D;&#123;&#123;</span><br><span class="line"> title: &#39;My home&#39;,</span><br><span class="line"> headerStyle: &#123;</span><br><span class="line"> backgroundColor: &#39;#f4511e&#39;,</span><br><span class="line">&#125;,</span><br><span class="line"> headerTintColor: &#39;#fff&#39;,</span><br><span class="line"> headerTitleStyle: &#123;</span><br><span class="line"> fontWeight: &#39;bold&#39;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;&#125;</span><br><span class="line">&#x2F;\&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下图：</p>
<p><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200611141803.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>React-Navigation使用简介（二）TabNavigator</title>
    <url>/2020/06/12/react-navigation%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B%EF%BC%88%E4%BA%8C%EF%BC%89tabnavigator/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>上一篇文章创建了Login和Home两个路由页面，用的是<strong>StackNavigator</strong>即一次只渲染一个页面，并提供页面之间跳转的方法。</p>
<p>通常程序会有底部或者顶部的导航栏，可以让用户在几个页面之间切换。可以用 <strong>TabNavigator</strong> 实现效果。</p>
<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">yarn add @react-navigation&#x2F;bottom-tabs</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>将上篇文章创建的Home和Login页面项目做一个调整，新建一个Index页面，Index中包含底部导航栏，可以跳转到Home和User页面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; App.js</span><br><span class="line">import &#39;react-native-gesture-handler&#39;;</span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; Text &#125; from &#39;react-native&#39;;</span><br><span class="line">import &#123; NavigationContainer &#125; from &#39;@react-navigation&#x2F;native&#39;;</span><br><span class="line">import &#123; createStackNavigator &#125; from &#39;@react-navigation&#x2F;stack&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 两个路由页面</span><br><span class="line">import Index from &#39;.&#x2F;components&#x2F;Index&#39;;</span><br><span class="line">import Login from &#39;.&#x2F;components&#x2F;Login&#39;;</span><br><span class="line"></span><br><span class="line">const Stack &#x3D; createStackNavigator();</span><br><span class="line"></span><br><span class="line">export default function App () &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Stack.Navigator initialRouteName&#x3D;&quot;login&quot;&gt;</span><br><span class="line">        &lt;Stack.Screen</span><br><span class="line">          name&#x3D;&quot;index&quot;</span><br><span class="line">          options&#x3D;&#123;&#123; title: &#39;首页&#39; &#125;&#125;</span><br><span class="line">          component&#x3D;&#123;Index&#125;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">        &lt;Stack.Screen options&#x3D;&#123;&#123; title: &#39;登录&#39; &#125;&#125; name&#x3D;&quot;login&quot; component&#x3D;&#123;Login&#125; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;Stack.Navigator&gt;</span><br><span class="line">    &lt;&#x2F;NavigationContainer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建一个Index.js页面，用作Home和User页面的容器。引入TabNavigator, 实现可在两个页面切换路由。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; createBottomTabNavigator &#125; from &#39;@react-navigation&#x2F;bottom-tabs&#39;; &#x2F;&#x2F; 引入依赖</span><br><span class="line"></span><br><span class="line">import Home from &#39;.&#x2F;Home&#39;;</span><br><span class="line">import User from &#39;.&#x2F;User&#39;;</span><br><span class="line"></span><br><span class="line">const Tab &#x3D; createBottomTabNavigator();</span><br><span class="line"></span><br><span class="line">export default function Index () &#123;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;Tab.Navigator initialRouteName&#x3D;&quot;home&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;Tab.Screen name&#x3D;&quot;home&quot; options&#x3D;&#123;&#123; title: &#39;首页&#39; &#125;&#125; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Tab.Screen&gt;</span><br><span class="line">      &lt;Tab.Screen name&#x3D;&quot;user&quot; options&#x3D;&#123;&#123; title: &#39;用户&#39; &#125;&#125; component&#x3D;&#123;User&#125;&gt;&lt;&#x2F;Tab.Screen&gt;</span><br><span class="line">    &lt;&#x2F;Tab.Navigator&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;   User.js</span><br><span class="line">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; View, Text &#125; from &#39;react-native&#39;;</span><br><span class="line"></span><br><span class="line">import styles from &#39;..&#x2F;styles&#x2F;index&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default class User extends Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View style&#x3D;&#123;styles.textContainer&#125;&gt;</span><br><span class="line">        &lt;Text&gt;这是用户页~&lt;&#x2F;Text&gt;</span><br><span class="line">      &lt;&#x2F;View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  Home.js</span><br><span class="line">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; View, Text &#125; from &#39;react-native&#39;;</span><br><span class="line"></span><br><span class="line">import styles from &#39;..&#x2F;styles&#x2F;index&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default class Home extends Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View style&#x3D;&#123;styles.textContainer&#125;&gt;</span><br><span class="line">        &lt;Text&gt;这是首页~&lt;&#x2F;Text&gt;</span><br><span class="line">      &lt;&#x2F;View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到如下效果</p>
<p><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612143217.png"></p>
<p>还可以自定义导航的效果，修改激活的样式以及增加图标等。完整见官网 <a href="https://reactnavigation.org/docs/bottom-tab-navigator">https://reactnavigation.org/docs/bottom-tab-navigator</a></p>
<p>通过tabBarOptions， screenOptions修改了导航的激活颜色以及增加了图标，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Tab.Navigator initialRouteName&#x3D;&quot;home&quot;</span><br><span class="line">      tabBarOptions&#x3D;&#123;&#123;</span><br><span class="line">        activeTintColor: &#39;#4630EB&#39;,</span><br><span class="line">        inactiveTintColor: &#39;gray&#39;,</span><br><span class="line">      &#125;&#125;</span><br><span class="line">      screenOptions&#x3D;&#123;(&#123; route &#125;) &#x3D;&gt; (&#123;</span><br><span class="line">        tabBarIcon: (&#123; color, size &#125;) &#x3D;&gt; &#123;</span><br><span class="line">          let iconName;</span><br><span class="line">          console.log(route)</span><br><span class="line">          if (route.name &#x3D;&#x3D; &#39;home&#39;) &#123;</span><br><span class="line">            iconName &#x3D; &#39;home&#39;;</span><br><span class="line">          &#125; else if (route.name &#x3D;&#x3D; &#39;user&#39;) &#123;</span><br><span class="line">            iconName &#x3D; &#39;account&#39;;</span><br><span class="line">          &#125;</span><br><span class="line">          return &lt;MaterialCommunityIcons name&#x3D;&#123;iconName&#125; size&#x3D;&#123;size&#125; color&#x3D;&#123;color&#125; &#x2F;&gt;;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)&#125;&gt;</span><br><span class="line">      &lt;Tab.Screen name&#x3D;&quot;home&quot; options&#x3D;&#123;&#123; title: &#39;首页&#39; &#125;&#125; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Tab.Screen&gt;</span><br><span class="line">      &lt;Tab.Screen name&#x3D;&quot;user&quot; options&#x3D;&#123;&#123; title: &#39;用户&#39; &#125;&#125; component&#x3D;&#123;User&#125;&gt;&lt;&#x2F;Tab.Screen&gt;</span><br><span class="line">    &lt;&#x2F;Tab.Navigator&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到效果：</p>
<p><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200612144141.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>ssl测试https</title>
    <url>/2020/01/10/ssl%E6%B5%8B%E8%AF%95https/</url>
    <content><![CDATA[<p>https的配置</p>
<a id="more"></a>
<h2 id="自制ssl证书"><a href="#自制ssl证书" class="headerlink" title="自制ssl证书"></a>自制ssl证书</h2><p>从这篇文章抄的<br><a href="https://blog.csdn.net/u012865381/article/details/72956116">https://blog.csdn.net/u012865381/article/details/72956116</a></p>
<p>然后便开始一堆命令</p>
<p>openssl genrsa -des3 -out ssl.key 2048</p>
<p>这一步需要输入一个密码，随便输一个就行了，后面貌似只需要用一次。。</p>
<p>mv ssl.key xxx.key</p>
<p>openssl rsa -in xxx.key -out ssl.key</p>
<p>rm xxx.key</p>
<p>上面第二步的时候需要输入前面那个密码</p>
<p>openssl req -new -key ssl.key -out ssl.csr</p>
<p>这一步需要填写很多信息，重点是Common Name，就是你需要使用这个证书的域名，貌似可以使用通配符。最后的challenge password不填</p>
<p>openssl x509 -req -days 3650 -in ssl.csr -signkey ssl.key -out ssl.crt</p>
<p>然后</p>
<p>cat ssl.key ssl.crt &gt; ssl.pem</p>
<p>到此为止我们得到了四个文件</p>
<p>ssl.csr ssl.crt ssl.key ssl.pem</p>
<p>下面开始纠结服务器配置吧！</p>
<p>nginx:</p>
<p>在server里面写一段：</p>
<p>ssl on;</p>
<p>ssl_certificate ssl.pem;</p>
<p>ssl_certificate_key ssl.key;</p>
<p>lighttpd:</p>
<p>ssl.engine = “enable”</p>
<p>ssl.pemfile= “ssl.pem”</p>
<p>ssl.ca-file=”ssl.pem”</p>
<p>apache:</p>
<p>SSLEngine on</p>
<p>SSLCertificateFile “ssl.crt”</p>
<p>SSLCertificateKeyFile “ssl.key”</p>
<p>这样服务器端就配置好了，但是假证书毕竟是假证书，客户端还需要安装才能不被警告。客户端安装方法很简单，用IE或chrome打开，并无视警告，然后查看服务器证书信息，把证书导出到文件，再双击证书文件安装到受信任的根证书颁发机构，然后就一劳永逸了。</p>
<h2 id="ngnix-配置"><a href="#ngnix-配置" class="headerlink" title="ngnix 配置"></a>ngnix 配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;</span><br><span class="line">#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class="line">pid &#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line"># Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.</span><br><span class="line">include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type        application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.</span><br><span class="line">    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 &#x2F;404.html;</span><br><span class="line">            location &#x3D; &#x2F;40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">            location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># Settings for a TLS enabled server.</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl http2 default_server;</span><br><span class="line">        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">       server_name  _;</span><br><span class="line">       root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line"></span><br><span class="line">        ssl_certificate &quot;&#x2F;home&#x2F;ssl&#x2F;ssl.crt&quot;;</span><br><span class="line">        ssl_certificate_key &quot;&#x2F;home&#x2F;ssl&#x2F;ssl.key&quot;;</span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line">        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">       include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 &#x2F;404.html;</span><br><span class="line">           location &#x3D; &#x2F;40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">            location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>证书链：证书分为本身证书、中级证书、根证书。顺序由上到下<br>配置的时候，需要证书和key两个文件。且需要配对。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl x509 -noout -modulus -in test.cer |openssl md5</span><br><span class="line">openssl rsa noout -modulus -in test.key |openssl md5</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>tapable</title>
    <url>/2019/06/02/tapable/</url>
    <content><![CDATA[<p>本文主要讲webpack核心工作流  tapable的一些用法</p>
<a id="more"></a>
<h2 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply 方法"></a>apply 方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tapable.prototype.apply &#x3D; function apply() &#123;</span><br><span class="line">    for(var i &#x3D; 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line">        arguments[i].apply(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>毫无悬念，就是 挨个顺序 执行传入到该函数方法中对象的 apply 方法；通常传入该函数的对象也是 Tapable 插件 对象，因此必然也存在 apply 方法；（Webpack 的插件就是Tapable对象，因此必须要提供 apply 方法 ）</p>
<p>只是更改上下文为当前 this</p>
<p>因此当前这里最大的作用就是传入当前 Tapable 的上下文</p>
<h3 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h3><p>注册函数</p>
<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>触发同步方法</p>
<h3 id="SyncHock"><a href="#SyncHock" class="headerlink" title="SyncHock"></a>SyncHock</h3><p>依次执行所有的注册函数</p>
<h3 id="syncBailHock"><a href="#syncBailHock" class="headerlink" title="syncBailHock"></a>syncBailHock</h3><p>依次执行所有的注册函数，但是可以判断当返回undefined 停止执行</p>
<h3 id="syncWaterfallHock"><a href="#syncWaterfallHock" class="headerlink" title="syncWaterfallHock"></a>syncWaterfallHock</h3><p>依次执行所有的注册函数，前一个函数的返回值为后一个的参数</p>
<h3 id="syncLoopHock"><a href="#syncLoopHock" class="headerlink" title="syncLoopHock"></a>syncLoopHock</h3><p>循环执行注册函数 只有返回undefined 才会继续向下执行</p>
<h3 id="tapAsync"><a href="#tapAsync" class="headerlink" title="tapAsync"></a>tapAsync</h3><p>注册异步方法 多一个参数回调函数</p>
<h3 id="callAsync"><a href="#callAsync" class="headerlink" title="callAsync"></a>callAsync</h3><p>触发异步方法</p>
<h3 id="tapPromise"><a href="#tapPromise" class="headerlink" title="tapPromise"></a>tapPromise</h3><p>注册一个promise函数，返回一个promise对象</p>
<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>最后执行注册函数 promise.then()来进行所有完成后的回调</p>
<h3 id="AsyncParallelHook"><a href="#AsyncParallelHook" class="headerlink" title="AsyncParallelHook"></a>AsyncParallelHook</h3><p>并发执行<br>当所有的注册函数执行完毕 执行最后的方法 比同步多一个回调函数</p>
<h3 id="AsyncParallelBailHook"><a href="#AsyncParallelBailHook" class="headerlink" title="AsyncParallelBailHook"></a>AsyncParallelBailHook</h3><p>并发执行<br>当所有的注册函数执行完毕 执行最后的方法 比同步多一个回调函数 如果出错了 将不再执行</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>tree命令</title>
    <url>/2019/06/16/tree%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>主要讲解利用tree查看和生成目录结构</p>
<a id="more"></a>
<h2 id="mac使用tree"><a href="#mac使用tree" class="headerlink" title="mac使用tree"></a>mac使用tree</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install tree</span><br><span class="line">tree -I node_modules &#x2F;&#x2F;常用</span><br></pre></td></tr></table></figure>

<h2 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h2><ul>
<li>-a 显示所有文件和目录。</li>
<li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li>
<li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li>
<li>-d 显示目录名称而非内容。</li>
<li>-D 列出文件或目录的更改时间。</li>
<li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li>
<li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。</li>
<li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li>
<li>-i 不以阶梯状列出文件或目录名称。</li>
<li>-I 不显示符合范本样式的文件或目录名称。</li>
<li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li>
<li>-n 不在文件和目录清单加上色彩。</li>
<li>-N 直接列出文件和目录名称，包括控制字符。</li>
<li>-p 列出权限标示。</li>
<li>-P 只显示符合范本样式的文件或目录名称。</li>
<li>-q 用”?”号取代控制字符，列出文件和目录名称。</li>
<li>-s 列出文件或目录大小。</li>
<li>-t 用文件和目录的更改时间排序。</li>
<li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li>
<li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>├── README.md<br>├── babel.config.js<br>├── package.json<br>├── public<br>│   ├── favicon.ico<br>│   └── index.html<br>├── src<br>│   ├── App.vue<br>│   ├── assets<br>│   │   └── logo.png<br>│   ├── components<br>│   │   └── HelloWorld.vue<br>│   ├── main.js<br>│   └── test.js<br>└── yarn.lock</p>
]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript对象</title>
    <url>/2019/07/30/typescript%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>记下TS对象的属性及方法</p>
<a id="more"></a>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p><code>var num = new Number(value)</code><br>对象属性<br>MAX_VALUE 可表示的最大的数，MAX_VALUE 属性值接近于 1.79E+308。大于 MAX_VALUE 的值代表 “Infinity”。<br>MIN_VALUE 可表示的最小的数，即最接近 0 的正数 (实际上不会变成 0)。最大的负数是 -MIN_VALUE，MIN_VALUE 的值约为 5e-324。小于 MIN_VALUE (“underflow values”) 的值将会转换为 0。<br>NaN 非数字<br>NEGATIVE_INFINITY 负无穷大，溢出时返回该值。该值小于 MIN_VALUE。<br>POSITIVE_INFINITY 正无穷大，溢出时返回该值。该值大于 MAX_VALUE。<br>prototype Number 对象的静态属性。使您有能力向对象添加属性和方法。<br>constructor  返回对创建此对象的 Number 函数的引用<br>对象方法<br>toExponential()  把对象的值转换为指数计数法。<br>toFixed()  把数字转换为字符串，并对小数点指定位数。<br>toLocaleString() 把数字转换为字符串，使用本地数字格式顺序。<br>toPrecision()  把数字格式化为指定的长度。<br>toString()  把数字转换为字符串，使用指定的基数。数字的基数是 2 ~ 36 之间的整数。若省略该参数，则使用基数 10。<br>valueOf() 返回一个 Number 对象的原始数字值。</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p><code>var txt = new String(&quot;string&quot;);</code><br>对象属性<br>constructor 对创建该对象的函数的引用。<br>length 长度<br>prototype 同上<br>对象方法<br>charAt() 指定位置的字符 从0开始<br>charCodeAt() 指定位置字符的编码  从0 开始<br>concat() 拼接字符串<br>indexOf() 查找字符的位置。没找到返回-1<br>lastIndexOf() 一个一个向下找<br>localeCompare()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str1 &#x3D; new String( &quot;This is beautiful string&quot; );</span><br><span class="line">var index &#x3D; str1.localeCompare( &quot;This is beautiful string&quot;);  </span><br><span class="line">console.log(&quot;localeCompare first :&quot; + index );  &#x2F;&#x2F; 0</span><br></pre></td></tr></table></figure>
<p>match()  查找找到一个或多个正则表达式的匹配。<br>replace() 替换与正则表达式匹配的子串<br>search() 检索与正则表达式相匹配的值<br>slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。<br>split() 分割成数组<br>substr() 从起始索引号提取字符串中指定数目的字符。<br>substring() 提取字符串中两个指定的索引号之间的字符。<br>toLocaleLowerCase() 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射。<br>toLocaleUpperCase() 据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射。<br>toLowerCase() 小写<br>toString() 字符<br>toUpperCase() 大写<br>valueOf()  指定位置的值  从0开始</p>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p><code>var array_name[:datatype];  </code><br><code>var arr_names:number[] = new Array(4) </code><br>数组解构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr:number[] &#x3D; [12,13] </span><br><span class="line">var[x,y] &#x3D; arr &#x2F;&#x2F; 将数组的两个元素赋值给变量 x 和 y</span><br><span class="line">console.log(x) </span><br><span class="line">console.log(y)</span><br><span class="line">&#x2F;&#x2F; 12</span><br><span class="line">&#x2F;&#x2F; 13</span><br></pre></td></tr></table></figure>
<p>数组迭代</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var j:any; </span><br><span class="line">var nums:number[] &#x3D; [1001,1002,1003,1004] </span><br><span class="line"> </span><br><span class="line">for(j in nums) &#123; </span><br><span class="line">    console.log(nums[j]) </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 1001</span><br><span class="line">&#x2F;&#x2F; 1002</span><br><span class="line">&#x2F;&#x2F; 1003</span><br><span class="line">&#x2F;&#x2F; 1004</span><br></pre></td></tr></table></figure>
<p>多维数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var multi:number[][] &#x3D; [[1,2,3],[23,24,25]]  </span><br><span class="line">console.log(multi[0][0]) </span><br><span class="line">console.log(multi[0][1]) </span><br><span class="line">console.log(multi[0][2]) </span><br><span class="line">console.log(multi[1][0]) </span><br><span class="line">console.log(multi[1][1]) </span><br><span class="line">console.log(multi[1][2])</span><br></pre></td></tr></table></figure>
<p>数组方法</p>
<ul>
<li>concat() 连接两个或更多的数组，并返回结果。 </li>
<li>every(element, index, array) 检测数值元素的每个元素是否都符合条件。</li>
<li>filter(element, index, array) 检测数值元素，并返回符合条件所有元素的数组。</li>
<li>forEach(value) 数组每个元素都执行一次回调函数。</li>
<li>indexOf() 搜索数组中的元素，并返回它所在的位置。没找到返回-1</li>
<li>join() 把数组的所有元素放入一个字符串。</li>
<li>lastIndexOf() 返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。</li>
<li>map() 通过指定函数处理数组的每个元素，并返回处理后的数组。</li>
<li>pop() 删除数组的最后一个元素并返回删除的元素。</li>
<li>push() 向数组的末尾添加一个或更多元素，并返回新的长度。</li>
<li>reduce() 将数组元素计算为一个值（从左到右）。</li>
<li>reduceRight() 将数组元素计算为一个值（从右到左）。</li>
<li>reverse() 反转数组的元素顺序。</li>
<li>shift() 删除并返回数组的第一个元素。</li>
<li>slice() 选取数组的的一部分，并返回一个新数组。</li>
<li>some() 检测数组元素中是否有元素符合指定条件。</li>
<li>sort() 对数组的元素进行排序。</li>
<li>splice() 从数组中添加或删除元素。</li>
<li>toString() 把数组转换为字符串，并返回结果。</li>
<li>unshift() 向数组的开头添加一个或更多元素，并返回新的长度。<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><code>var mytuple = [10,&quot;Runoob&quot;]</code><br>访问元组  元组中元素使用索引来访问，第一个元素的索引值为 0，第二个为 1，以此类推第 n 个为 n-1<br>push() 向元组添加元素，添加在最后面。<br>pop() 从元组中移除元素（最后一个），并返回移除的元素。<br>更新元组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var mytuple &#x3D; [10, &quot;Runoob&quot;, &quot;Taobao&quot;, &quot;Google&quot;]; &#x2F;&#x2F; 创建一个元组</span><br><span class="line">console.log(&quot;元组的第一个元素为：&quot; + mytuple[0]) </span><br><span class="line">&#x2F;&#x2F; 更新元组元素</span><br><span class="line">mytuple[0] &#x3D; 121     </span><br><span class="line">console.log(&quot;元组中的第一个元素更新为：&quot;+ mytuple[0])</span><br></pre></td></tr></table></figure>
解构元组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D;[10,&quot;Runoob&quot;] </span><br><span class="line">var [b,c] &#x3D; a </span><br><span class="line">console.log( b )    </span><br><span class="line">console.log( c )</span><br><span class="line">&#x2F;&#x2F; 10</span><br><span class="line">&#x2F;&#x2F; Runoob</span><br></pre></td></tr></table></figure>
<h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><code>Type1|Type2|Type3 </code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var val:string|number </span><br><span class="line">val &#x3D; 12 </span><br><span class="line">console.log(&quot;数字为 &quot;+ val) </span><br><span class="line">val &#x3D; &quot;Runoob&quot; </span><br><span class="line">console.log(&quot;字符串为 &quot; + val)</span><br></pre></td></tr></table></figure>
数组声明为联合类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr:number[]|string[]; </span><br><span class="line">var i:number; </span><br><span class="line">arr &#x3D; [1,2,4] </span><br><span class="line">console.log(&quot;**数字数组**&quot;)  </span><br><span class="line"> </span><br><span class="line">for(i &#x3D; 0;i&lt;arr.length;i++) &#123; </span><br><span class="line">   console.log(arr[i]) </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line">arr &#x3D; [&quot;Runoob&quot;,&quot;Google&quot;,&quot;Taobao&quot;] </span><br><span class="line">console.log(&quot;**字符串数字**&quot;)  </span><br><span class="line"> </span><br><span class="line">for(i &#x3D; 0;i&lt;arr.length;i++) &#123; </span><br><span class="line">   console.log(arr[i]) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><code>interface interface_name &#123; &#125;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface IPerson &#123; </span><br><span class="line">    firstName:string, </span><br><span class="line">    lastName:string, </span><br><span class="line">    sayHi: ()&#x3D;&gt;string </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">var customer:IPerson &#x3D; &#123; </span><br><span class="line">    firstName:&quot;Tom&quot;,</span><br><span class="line">    lastName:&quot;Hanks&quot;, </span><br><span class="line">    sayHi: ():string &#x3D;&gt;&#123;return &quot;Hi there&quot;&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">console.log(&quot;Customer 对象 &quot;) </span><br><span class="line">console.log(customer.firstName) </span><br><span class="line">console.log(customer.lastName) </span><br><span class="line">console.log(customer.sayHi())  </span><br><span class="line"> </span><br><span class="line">var employee:IPerson &#x3D; &#123; </span><br><span class="line">    firstName:&quot;Jim&quot;,</span><br><span class="line">    lastName:&quot;Blakes&quot;, </span><br><span class="line">    sayHi: ():string &#x3D;&gt;&#123;return &quot;Hello!!!&quot;&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">console.log(&quot;Employee  对象 &quot;) </span><br><span class="line">console.log(employee.firstName) </span><br><span class="line">console.log(employee.lastName)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Customer 对象</span><br><span class="line">&#x2F;&#x2F; Tom</span><br><span class="line">&#x2F;&#x2F; Hanks</span><br><span class="line">&#x2F;&#x2F; Hi there</span><br><span class="line">&#x2F;&#x2F; Employee  对象</span><br><span class="line">&#x2F;&#x2F; Jim</span><br><span class="line">&#x2F;&#x2F; Blakes</span><br></pre></td></tr></table></figure>
接口和数组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface namelist &#123; </span><br><span class="line">   [index:number]:string </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">var list2:namelist &#x3D; [&quot;John&quot;,1,&quot;Bran&quot;] &#x2F; 错误元素 1 不是 string 类型</span><br><span class="line">interface ages &#123; </span><br><span class="line">   [index:string]:number </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">var agelist:ages; </span><br><span class="line">agelist[&quot;John&quot;] &#x3D; 15   &#x2F;&#x2F; 正确 </span><br><span class="line">agelist[2] &#x3D; &quot;nine&quot;   &#x2F;&#x2F; 错误</span><br></pre></td></tr></table></figure>
接口继承<br><code>Child_interface_name extends super_interface_name // 单个</code><br><code>Child_interface_name extends super_interface1_name, super_interface2_name,…,super_interfaceN_name // 多个</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface IParent1 &#123; </span><br><span class="line">    v1:number </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">interface IParent2 &#123; </span><br><span class="line">    v2:number </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">interface Child extends IParent1, IParent2 &#123; &#125; </span><br><span class="line">var Iobj:Child &#x3D; &#123; v1:12, v2:23&#125; </span><br><span class="line">console.log(&quot;value 1: &quot;+Iobj.v1+&quot; value 2: &quot;+Iobj.v2)</span><br></pre></td></tr></table></figure>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><code>class class_name &#123; // 类作用域&#125;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Car &#123; </span><br><span class="line">    &#x2F;&#x2F; 字段 </span><br><span class="line">    engine:string; </span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 构造函数 </span><br><span class="line">    constructor(engine:string) &#123; </span><br><span class="line">        this.engine &#x3D; engine </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 方法 </span><br><span class="line">    disp():void &#123; </span><br><span class="line">        console.log(&quot;发动机为 :   &quot;+this.engine) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
创建实例化对象<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var object_name &#x3D; new class_name([ arguments ])</span><br><span class="line">var obj &#x3D; new Car(&quot;Engine 1&quot;)</span><br><span class="line">&#x2F;&#x2F; 访问属性</span><br><span class="line">obj.field_name </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 访问方法</span><br><span class="line">obj.function_name()</span><br></pre></td></tr></table></figure>
类的继承<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Shape &#123; </span><br><span class="line">   Area:number </span><br><span class="line">   </span><br><span class="line">   constructor(a:number) &#123; </span><br><span class="line">      this.Area &#x3D; a </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">class Circle extends Shape &#123; </span><br><span class="line">   disp():void &#123; </span><br><span class="line">      console.log(&quot;圆的面积:  &quot;+this.Area) </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">var obj &#x3D; new Circle(223); </span><br><span class="line">obj.disp()</span><br></pre></td></tr></table></figure>
需要注意的是子类只能继承一个父类，TypeScript 不支持继承多个类，但支持多重继承，如下实例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Root &#123; </span><br><span class="line">   str:string; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">class Child extends Root &#123;&#125; </span><br><span class="line">class Leaf extends Child &#123;&#125; &#x2F;&#x2F; 多重继承，继承了 Child 和 Root 类</span><br><span class="line"> </span><br><span class="line">var obj &#x3D; new Leaf(); </span><br><span class="line">obj.str &#x3D;&quot;hello&quot; </span><br><span class="line">console.log(obj.str)</span><br></pre></td></tr></table></figure>
继承类的方法重写<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class PrinterClass &#123; </span><br><span class="line">   doPrint():void &#123;</span><br><span class="line">      console.log(&quot;父类的 doPrint() 方法。&quot;) </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">class StringPrinter extends PrinterClass &#123; </span><br><span class="line">   doPrint():void &#123; </span><br><span class="line">      super.doPrint() &#x2F;&#x2F; 调用父类的函数</span><br><span class="line">      console.log(&quot;子类的 doPrint()方法。&quot;)</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
static 关键字<br>static 关键字用于定义类的数据成员（属性和方法）为静态的，静态成员可以直接通过类名调用。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class StaticMem &#123;  </span><br><span class="line">   static num:number; </span><br><span class="line">   </span><br><span class="line">   static disp():void &#123; </span><br><span class="line">      console.log(&quot;num 值为 &quot;+ StaticMem.num) </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">StaticMem.num &#x3D; 12     &#x2F;&#x2F; 初始化静态变量</span><br><span class="line">StaticMem.disp()       &#x2F;&#x2F; 调用静态方法</span><br></pre></td></tr></table></figure>
instanceof 运算符<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person&#123; &#125; </span><br><span class="line">var obj &#x3D; new Person() </span><br><span class="line">var isPerson &#x3D; obj instanceof Person; </span><br><span class="line">console.log(&quot;obj 对象是 Person 类实例化来的吗？ &quot; + isPerson);</span><br></pre></td></tr></table></figure>
访问控制修饰符</li>
<li>public（默认） : 公有，可以在任何地方被访问。</li>
<li>protected : 受保护，可以被其自身以及其子类和父类访问。</li>
<li>private : 私有，只能被其定义所在的类访问。<br>类和接口:类可以实现接口，使用关键字 implements，并将 interest 字段作为类的属性使用。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface ILoan &#123; </span><br><span class="line">   interest:number </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">class AgriLoan implements ILoan &#123; </span><br><span class="line">   interest:number </span><br><span class="line">   rebate:number </span><br><span class="line">   </span><br><span class="line">   constructor(interest:number,rebate:number) &#123; </span><br><span class="line">      this.interest &#x3D; interest </span><br><span class="line">      this.rebate &#x3D; rebate </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">var obj &#x3D; new AgriLoan(10,1) </span><br><span class="line">console.log(&quot;利润为 : &quot;+obj.interest+&quot;，抽成为 : &quot;+obj.rebate )</span><br></pre></td></tr></table></figure>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var object_name &#x3D; &#123; </span><br><span class="line">    key1: &quot;value1&quot;, &#x2F;&#x2F; 标量</span><br><span class="line">    key2: &quot;value&quot;,  </span><br><span class="line">    key3: function() &#123;</span><br><span class="line">        &#x2F;&#x2F; 函数</span><br><span class="line">    &#125;, </span><br><span class="line">    key4:[&quot;content1&quot;, &quot;content2&quot;] &#x2F;&#x2F;集合</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace SomeNameSpaceName &#123; </span><br><span class="line">   export interface ISomeInterfaceName &#123;      &#125;  </span><br><span class="line">   export class SomeClassName &#123;      &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
以上定义了一个命名空间 SomeNameSpaceName，如果我们需要在外部可以调用 SomeNameSpaceName 中的类类和接口，则需要在类和接口添加 export 关键字。<br>要在另外一个命名空间调用语法格式为：SomeNameSpaceName.SomeClassName;<br>如果一个命名空间在一个单独的 TypeScript 文件中，则应使用三斜杠 /// 引用它，语法格式如下：<br><code>/// &lt;reference path = &quot;SomeFileName.ts&quot; /&gt;</code><br>嵌套命名空间<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace namespace_name1 &#123; </span><br><span class="line">    export namespace namespace_name2 &#123;</span><br><span class="line">        export class class_name &#123;    &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 嵌套使用</span><br><span class="line">namespace_name1.namespace_name2.class_name</span><br></pre></td></tr></table></figure>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2>和JS一致<br>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。类似地，我们必须通过 import 导入其他模块导出的变量、函数、类等。<br>两个模块之间的关系是通过在文件级别上使用 import 和 export 建立的。<br>模块使用模块加载器去导入其它的模块。 在运行时，模块加载器的作用是在执行此模块代码前去查找并执行这个模块的所有依赖。 大家最熟知的JavaScript模块加载器是服务于 Node.js 的 CommonJS 和服务于 Web 应用的 Require.js。<h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2>引入第三方js文件时，declare 关键字来定义它的类型，帮助 TypeScript 判断我们传入的参数类型对不对<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare var jQuery: (selector: string) &#x3D;&gt; any;</span><br><span class="line">jQuery(&#39;#foo&#39;);</span><br></pre></td></tr></table></figure>
声明文件以 .d.ts 为后缀<br>TypeScript 引入声明文件语法格式：<code>/// &lt;reference path = &quot; runoob.d.ts&quot; /&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>TS</tag>
      </tags>
  </entry>
  <entry>
    <title>verdaccio</title>
    <url>/2019/10/28/verdaccio/</url>
    <content><![CDATA[<p>一种新的搭建私有仓库的方法。（nodeAPP）</p>
<a id="more"></a>
<h2 id="介绍一下verdaccio"><a href="#介绍一下verdaccio" class="headerlink" title="介绍一下verdaccio"></a>介绍一下verdaccio</h2><p>他是从<a href="mailto:&#x73;&#105;&#110;&#111;&#x70;&#x69;&#97;&#x40;&#49;&#x2e;&#x34;&#x2e;&#x30;">&#x73;&#105;&#110;&#111;&#x70;&#x69;&#97;&#x40;&#49;&#x2e;&#x34;&#x2e;&#x30;</a> 复制过来的，因为原来的库已经不再维护更新了，是一个基于nodejs的私有npm仓库。支持Chrome, Firefox, Edge, and IE11这些浏览器</p>
<h2 id="安装及运行"><a href="#安装及运行" class="headerlink" title="安装及运行"></a>安装及运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装</span><br><span class="line">npm install -g verdaccio</span><br><span class="line">yarn global add verdaccio</span><br><span class="line">&#x2F;&#x2F; 运行</span><br><span class="line">$&gt; verdaccio</span><br><span class="line">warn --- config file  - &#x2F;home&#x2F;.config&#x2F;verdaccio&#x2F;config.yaml</span><br><span class="line">warn --- http address - http:&#x2F;&#x2F;localhost:4873&#x2F; - verdaccio&#x2F;3.0.0</span><br><span class="line">&#x2F;&#x2F; 使用</span><br><span class="line">npm set registry http:&#x2F;&#x2F;localhost:4873&#x2F;</span><br><span class="line">npm install --registry http:&#x2F;&#x2F;localhost:4873</span><br><span class="line">&#x2F;&#x2F; 更改端口号或者配置文件</span><br><span class="line">verdaccio --listen 4000 --config ~.&#x2F;config.yaml</span><br><span class="line">&#x2F;&#x2F; 全局安装pm2，用来守护node进程</span><br><span class="line">npm i pm2 -g</span><br><span class="line">&#x2F;&#x2F; 安装nginx，仍然在 &#x2F;usr&#x2F;local&#x2F;lib下</span><br><span class="line">pm2 start verdaccio</span><br></pre></td></tr></table></figure>
<h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">storage: .&#x2F;storage  &#x2F;&#x2F;npm包存放的路径</span><br><span class="line"></span><br><span class="line">auth:</span><br><span class="line">  htpasswd:</span><br><span class="line">    file: .&#x2F;htpasswd   &#x2F;&#x2F;保存用户的账号密码等信息</span><br><span class="line">    # Maximum amount of users allowed to register, defaults to &quot;+inf&quot;.</span><br><span class="line">    # You can set this to -1 to disable registration.</span><br><span class="line">    max_users: -1  &#x2F;&#x2F;默认为1000，改为-1，禁止注册</span><br><span class="line"></span><br><span class="line"># a list of other known repositories we can talk to</span><br><span class="line">uplinks:</span><br><span class="line">  npmjs:</span><br><span class="line">    url: http:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;  &#x2F;&#x2F;默认为npm的官网，由于国情，改为淘宝源</span><br><span class="line"># 网页显示</span><br><span class="line">web:</span><br><span class="line">  enable: true</span><br><span class="line">  title: Verdaccio</span><br><span class="line">  logo: logo.png</span><br><span class="line">  primary_color: &quot;#4b5e40&quot;</span><br><span class="line">  gravatar: true | false</span><br><span class="line">  scope: &quot;@scope&quot;</span><br><span class="line">  sort_packages: asc | desc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">packages:  &#x2F;&#x2F;配置权限管理</span><br><span class="line">  &#39;@*&#x2F;*&#39;:</span><br><span class="line">    # scoped packages</span><br><span class="line">    access: $all</span><br><span class="line">    publish: $authenticated</span><br><span class="line"></span><br><span class="line">  &#39;*&#39;:</span><br><span class="line">    # allow all users (including non-authenticated users) to read and</span><br><span class="line">    # publish all packages</span><br><span class="line">    #</span><br><span class="line">    # you can specify usernames&#x2F;groupnames (depending on your auth plugin)</span><br><span class="line">    # and three keywords: &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot;</span><br><span class="line">    access: $all  &#x2F;&#x2F; 所有人都能下载</span><br><span class="line"></span><br><span class="line">    # allow all known users to publish packages</span><br><span class="line">    # (anyone can register by default, remember?)</span><br><span class="line">    publish: $authenticated &#x2F;&#x2F; 所有人都有发布包的权限，若想指定默认发布改成对应人的名字</span><br><span class="line"></span><br><span class="line">    # if package is not available locally, proxy requests to &#39;npmjs&#39; registry</span><br><span class="line">    proxy: npmjs  &#x2F;&#x2F; 若安装的报在simopia没有，会去配置的npmjs地址去下载</span><br><span class="line"></span><br><span class="line"># log settings</span><br><span class="line">logs:</span><br><span class="line">  - &#123;type: stdout, format: pretty, level: http&#125;</span><br><span class="line">  #- &#123;type: file, path: verdaccio.log, level: info&#125;</span><br><span class="line"></span><br><span class="line"># you can specify listen address (or simply a port) </span><br><span class="line">listen: 0.0.0.0:4873  &#x2F;&#x2F; 默认没有，只能在本机访问，添加后可以通过外网访问。</span><br></pre></td></tr></table></figure>
<h2 id="权限解释"><a href="#权限解释" class="headerlink" title="权限解释"></a>权限解释</h2><ul>
<li>access: 表示哪一类用户可以对匹配的项目进行安装(install)</li>
<li>publish: 表示哪一类用户可以对匹配的项目进行发布(publish)</li>
<li>proxy: 这里的值是对应于 uplinks 的名称，如果本地不存在，允许去对应的uplinks去取。</li>
</ul>
<hr>
<ul>
<li>$all 表示所有人(已注册、未注册)都可以执行对应的操作</li>
<li>$authenticated 表示只有通过验证的人(已注册)可以执行对应操作，注意，任何人都可以去注册账户。</li>
<li>$anonymous 表示只有匿名者可以进行对应操作（通常无用）</li>
<li>如果要指定某个用户才有权限，可以直接写上用户名，多个用户用空格隔开<h2 id="ng配置"><a href="#ng配置" class="headerlink" title="ng配置"></a>ng配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  registry.npm.your.server;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    proxy_pass    http:&#x2F;&#x2F;127.0.0.1:4873&#x2F;;</span><br><span class="line">    proxy_set_header        Host $host;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="避免缓存"><a href="#避免缓存" class="headerlink" title="避免缓存"></a>避免缓存</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 避免缓存压缩包</span><br><span class="line">uplinks:</span><br><span class="line">  npmjs:</span><br><span class="line">    url: https:&#x2F;&#x2F;registry.npmjs.org&#x2F;  &#x2F;&#x2F; 上层同源的库</span><br><span class="line">    cache: false  &#x2F;&#x2F; 缓存</span><br><span class="line">    maxage: 30m   &#x2F;&#x2F; 最大缓存时间</span><br><span class="line">&#x2F;&#x2F; 使用memory缓存</span><br><span class="line">npm install -g verdaccio-auth-memory</span><br><span class="line">npm install -g verdaccio-memory</span><br><span class="line">auth:</span><br><span class="line">  auth-memory:</span><br><span class="line">    users:</span><br><span class="line">      foo:</span><br><span class="line">        name: test</span><br><span class="line">        password: test</span><br><span class="line">store:</span><br><span class="line">  memory:</span><br><span class="line">    limit: 1000</span><br></pre></td></tr></table></figure>
但是 当重启服务器的时候 数据会丢失<h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><a href="https://www.jianshu.com/p/d32ce7e9d4d8">npm私服搭建—verdaccio方案及其最佳实践</a><br><a href="https://verdaccio.org/docs/en/caching#avoid-caching-tarballs">verdaccio</a><br><a href="https://github.com/verdaccio/verdaccio">verdaccio  github</a></li>
</ul>
]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode</title>
    <url>/2019/06/24/vscode/</url>
    <content><![CDATA[<p>记一些vscode的快捷键，方便自己看</p>
<a id="more"></a>
<blockquote>
<p>F1 或 Cmd+Shift+P: 打开命令面板。在打开的输入框内，可以输入任何命令<br>在Cmd+P下输入 &gt; 可以进入 Cmd+Shift+P 模式<br>在 Cmd+P 窗口下还可以:</p>
<blockquote>
<dl><dt>直接输入文件名，跳转到文件<br>? 列出当前可执行的动作</dt><dd>跳转到行数，也可以 Cmd+G 直接进入<br>打开一个新窗口： Cmd+Shift+N<br>关闭窗口： Cmd+Shift+W<br>关闭标签页：Cmd+W<br>新建文件 Cmd+N<br>文件之间切换 Cmd+~<br>切出一个新的编辑器（最多 3 个） Cmd+<br>左中右 3 个编辑器的快捷键 Cmd+1 Cmd+2 Cmd+3<br>关闭打开资源管理器 Cmd+B<br>切换同一编辑器不同的标签页：control+tab<br>格式化代码：shift+Option+F<br>上下移动一行： Option+Up 或 option+Down<br>向上向下复制一行： Shift+Option+Up 或 Shift+Option+Down<br>在当前行下边插入一行： Cmd+Enter<br>在当前行上方插入一行： Cmd+Shift+Enter<br>删除当前行：Cmd+Shift+K<br>跳到当前行的头部，尾部：Fn+←，Fn+→<br>插入多光标：Option+click或Cmd+Option+up/Cmd+Option+down<br>查找：Cmd+F<br>将选择添加到下一个查找匹配: Cmd+D<br>显示搜索：Shift+Cmd+F<br>全局替换：Shift+Cmd+H<br>放到/缩小：Cmd+=/Cmd+-<br>修改语言：组合键Cmd+K M<br>设置：Cmd+</dd></dl></blockquote>
</blockquote>
]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE-G</title>
    <url>/2019/06/02/vueg/</url>
    <content><![CDATA[<p>本章会介绍 vue-g的用法</p>
<a id="more"></a>
<p><a href="https://segmentfault.com/a/1190000009806574" title="111">参考网址</a><br>为vue-router添加转场效果，只需要Vue.use(vueg)，即可获得转场效果，并能够根据url级别(/)和历史记录判断是前进和后退。</p>
<h2 id="使用方法-Usage"><a href="#使用方法-Usage" class="headerlink" title="使用方法 / Usage"></a>使用方法 / Usage</h2><p>安装 / Installation<br><code> npm i vueg -G</code><br>引入插件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  ↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"><span class="keyword">import</span> vueg <span class="keyword">from</span> <span class="string">&#x27;vueg&#x27;</span>    </span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vueg/css/transition-min.css&#x27;</span></span><br><span class="line">Vue.use(vueg, router)     <span class="comment">//←注意这一句应该在router实例化(router = new VueRouter(&#123;&#125;)之后</span></span><br></pre></td></tr></table></figure>
<p>禁用动画</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;router-view&gt;上添加v-transition=&quot;false&quot;，可以禁用动画</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;router-view v-transition=<span class="string">&quot;false&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="配置项-Config"><a href="#配置项-Config" class="headerlink" title="配置项 / Config"></a>配置项 / Config</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> options=&#123;  </span><br><span class="line">    duration: <span class="string">&#x27;0.3&#x27;</span>,              <span class="comment">//转场动画时长，默认为0.3，单位秒</span></span><br><span class="line">    firstEntryDisable: <span class="literal">false</span>,     <span class="comment">//值为true时禁用首次进入应用时的渐现动画，默认为false  </span></span><br><span class="line">    firstEntryDuration: <span class="string">&#x27;.6&#x27;</span>,     <span class="comment">//首次进入应用时的渐现动画时长，默认为.6  </span></span><br><span class="line">    forwardAnim: <span class="string">&#x27;fadeInRight&#x27;</span>,   <span class="comment">//前进动画，默认为fadeInRight  </span></span><br><span class="line">    backAnim: <span class="string">&#x27;fadeInLeft&#x27;</span>,       <span class="comment">//后退动画，默认为fedeInLeft  </span></span><br><span class="line">    sameDepthDisable: <span class="literal">false</span>,      <span class="comment">//url深度相同时禁用动画，默认为false  </span></span><br><span class="line">    tabs: [&#123;</span><br><span class="line">            name:<span class="string">&#x27;home&#x27;</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            name:<span class="string">&#x27;my&#x27;</span></span><br><span class="line">        &#125;],                       <span class="comment">//默认为[]，name对应路由的name,以实现类似app中点击tab页面水平转场效果，如tab[1]到tab[0]，会使用backAnim动画，tab[1]到tab[2]，会使用forwardAnim动画  </span></span><br><span class="line">    tabsDisable: <span class="literal">false</span>,           <span class="comment">//值为true时，tabs间的转场没有动画，默认为false  </span></span><br><span class="line">    disable: <span class="literal">false</span>,               <span class="comment">//禁用转场动画，默认为false，嵌套路由默认为true    </span></span><br><span class="line">&#125;  </span><br><span class="line">Vue.use(vueg, router,options)</span><br></pre></td></tr></table></figure>
<p>全部的动画效果见<a href="https://daneden.github.io/animate.css/" title="这里">这里</a><br>组件中配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		vuegConfig:&#123;</span><br><span class="line">			forwardAnim:<span class="string">&#x27;bounceInUp&#x27;</span>,<span class="comment">//options所有配置可以写在这个对象里，会覆盖全局的配置</span></span><br><span class="line">			disable:<span class="literal">false</span> <span class="comment">//对于嵌套路由，默认为关闭动画，需要在组件的data.vuegConfig中配置disable为false启用</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol>
<li><strong>基于vue v2.3.4版本开发、调试</strong></li>
<li><strong>非新项目使用这个插件后，因为css问题，可能造成原本元素在转场动画时有些地方排版错乱，那就需要调整css；</strong></li>
<li><strong>每个路由匹配的组件模板高度最好大于等于屏幕高度，否则转场不好看，可以为<router-view> 添加class，设置min-height:100%;</strong></li>
<li><strong>插件60Kb左右大小，其中css 57Kb，如果想减小，可以编辑vueg/css/transition-min.css ，将不需要的动画样式删除；</strong></li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE懒加载</title>
    <url>/2019/06/02/vue%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<p>本章会介绍 vue如何进行懒加载</p>
<a id="more"></a>
<h3 id="什么是懒加载"><a href="#什么是懒加载" class="headerlink" title="什么是懒加载"></a>什么是懒加载</h3><p>懒加载也叫延迟加载，即在需要的时候进行加载，随用随载。</p>
<h3 id="如何与webpack配合实现组件懒加载"><a href="#如何与webpack配合实现组件懒加载" class="headerlink" title="如何与webpack配合实现组件懒加载"></a>如何与webpack配合实现组件懒加载</h3><ol>
<li>在webpack配置文件中的output路径配置chunkFilename属性<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">	path: resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">	filename: options.dev ? <span class="string">&#x27;[name].js&#x27;</span> : <span class="string">&#x27;[name].js?[chunkhash]&#x27;</span>,</span><br><span class="line">	chunkFilename: <span class="string">&#x27;chunk[id].js?[chunkhash]&#x27;</span>,</span><br><span class="line">	publicPath: options.dev ? <span class="string">&#x27;/assets/&#x27;</span> : publicPath</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
chunkFilename路径将会作为组件懒加载的路径</li>
<li>配合webpack支持的异步加载方法</li>
</ol>
<ul>
<li>resolve =&gt; require([URL], resolve), 支持性好</li>
<li>() =&gt; import(URL), webpack2官网推荐使用, 属于es7范畴, 需要配合babel的syntax-dynamic-import插件使用, 具体使用方法如下<br><code>npm install --save-dev babel-core babel-loader babel-plugin-syntax-dynamic-import babel-preset-es2015</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">use: [&#123;</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [[<span class="string">&#x27;es2015&#x27;</span>, &#123;<span class="attr">modules</span>: <span class="literal">false</span>&#125;]],</span><br><span class="line">          plugins: [<span class="string">&#x27;syntax-dynamic-import&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br></pre></td></tr></table></figure>
<h3 id="具体实例中实现懒加载"><a href="#具体实例中实现懒加载" class="headerlink" title="具体实例中实现懒加载"></a>具体实例中实现懒加载</h3></li>
</ul>
<ol>
<li>路由中配置异步组件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">            path: <span class="string">&#x27;/my&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;my&#x27;</span>,</span><br><span class="line">            component:  <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;../page/my/my.vue&#x27;</span>], resolve),<span class="comment">//懒加载</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>实例中配置异步组件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">        historyTab: <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;<span class="built_in">require</span>([<span class="string">&#x27;../../component/historyTab/historyTab.vue&#x27;</span>], resolve)&#125;,<span class="comment">//懒加载</span></span><br><span class="line">        <span class="comment">//historyTab: () =&gt; import(&#x27;../../component/historyTab/historyTab.vue&#x27;)</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li>
<li>全局注册异步组件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;mideaHeader&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    System.import(<span class="string">&#x27;./component/header/header.vue&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="避免问题"><a href="#避免问题" class="headerlink" title="避免问题"></a>避免问题</h3><h4 id="同时使用懒加载和正常引入"><a href="#同时使用懒加载和正常引入" class="headerlink" title="同时使用懒加载和正常引入"></a>同时使用懒加载和正常引入</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> historyTab <span class="keyword">from</span> <span class="string">&#x27;../../component/historyTab/historyTab.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        historyTab</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        historyTab: <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;<span class="built_in">require</span>([<span class="string">&#x27;../../component/historyTab/historyTab.vue&#x27;</span>], resolve)&#125;,<span class="comment">//懒加载</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="异步加载页面中载嵌入异步加载的组件"><a href="#异步加载页面中载嵌入异步加载的组件" class="headerlink" title="异步加载页面中载嵌入异步加载的组件"></a>异步加载页面中载嵌入异步加载的组件</h4>因为在首次加载组件的时候会有加载时间，出现页面滞后，所以需要合理的进行页面结构设计，避免首次出现跳闪现象；</li>
</ol>
<hr>
<h3 id="建议最终实现方案"><a href="#建议最终实现方案" class="headerlink" title="建议最终实现方案"></a>建议最终实现方案</h3><ol>
<li>路由页面全都使用懒加载</li>
<li>路由页面中的组件何磊安排 当一个页面中嵌套多个组件时将发送多次的http请求，可能会造成网页显示过慢且渲染参差不齐的问题，所以针对这种特殊情况需要合理安排</li>
<li>结合vuex 动态路由加载页面<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">	<span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line">	Vue.use(Vuex);</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">	state: &#123;</span><br><span class="line">		<span class="comment">//路由组件存储器</span></span><br><span class="line">		routers: &#123;&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	getters: &#123;</span><br><span class="line">		routers: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> state.data;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	mutations: &#123;</span><br><span class="line">		<span class="comment">//动态增加路由</span></span><br><span class="line">		addRouter: <span class="function">(<span class="params">state, data</span>) =&gt;</span> &#123;</span><br><span class="line">		state.routers = <span class="built_in">Object</span>.assign(&#123;&#125;, state.routers, &#123;[data.name]: data.component&#125;);&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	actions: &#123;</span><br><span class="line">		<span class="function"><span class="title">acMethods</span>(<span class="params">&#123;commit&#125;</span>)</span> &#123;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//根目录中注册路由组件</span></span><br><span class="line"><span class="built_in">window</span>.midea = &#123;</span><br><span class="line">	<span class="function"><span class="title">registerRouter</span>(<span class="params">name, component</span>)</span> &#123;</span><br><span class="line">		Store.commit(<span class="string">&#x27;addRouter&#x27;</span>, &#123;</span><br><span class="line">			name: name,</span><br><span class="line">			component: component</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//页面使用路由导航</span></span><br><span class="line"><span class="function"><span class="title">openAnyPage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	midea.registerRouter(<span class="string">&#x27;module&#x27;</span>, <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;<span class="built_in">require</span>([<span class="string">&#x27;../module/module.vue&#x27;</span>], resolve)&#125;);<span class="comment">//懒加载</span></span><br><span class="line">	<span class="built_in">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="string">&#x27;/home/module&#x27;</span>, <span class="attr">query</span>: &#123;<span class="attr">title</span>: <span class="built_in">this</span>.title&#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//页面中使用动态组件</span></span><br><span class="line">	&lt;template&gt;<span class="xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentRouter&quot;</span> <span class="attr">:moduleName</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span> &lt;<span class="regexp">/template&gt;&lt;br&gt;&lt;script src=&quot;./</span>any.js<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">	data () &#123;</span></span><br><span class="line"><span class="string">		return &#123;</span></span><br><span class="line"><span class="string">			routeName: &#x27;&#x27;,</span></span><br><span class="line"><span class="string">			currentRouter: &#x27;&#x27;,</span></span><br><span class="line"><span class="string">			title: &#x27;&#x27;,</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	created() &#123;</span></span><br><span class="line"><span class="string">		this.routeName = this.$route.params.name;</span></span><br><span class="line"><span class="string">		this.title = this.$route.query.title;</span></span><br><span class="line"><span class="string">		this.currentRouter = this.$store.state.routers[this.routeName];</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	methods: &#123;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>vue指令</title>
    <url>/2019/06/14/vue%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>本文主要讲vue指令的一些用法，并写一个倒计时的案例</p>
<a id="more"></a>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.directive(&#39;time&#39;, &#123;</span><br><span class="line">    &#x2F;&#x2F; 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span><br><span class="line">    bind:function(el,binding)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</span><br><span class="line">    inserted: function (el,binding) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。</span><br><span class="line">    update:function(el,binding)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 指令所在组件的 VNode 及其子 VNode 全部更新后调用 </span><br><span class="line">    componentUpdated:function(el,binding)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 只调用一次，指令与元素解绑时调用。</span><br><span class="line">    unbind:function(el,binding)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><p>指令钩子函数会被传入以下参数：</p>
<blockquote>
<p>el：指令所绑定的元素，可以用来直接操作 DOM 。<br>binding：一个对象，包含以下属性：</p>
<blockquote>
<p>name：指令名，不包括 v- 前缀。<br> value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。<br>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。<br>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。<br>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。<br>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</p>
</blockquote>
</blockquote>
<blockquote>
<p>vnode：Vue 编译生成的虚拟节点。<br>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</p>
</blockquote>
<p><strong>除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行。</strong></p>
<h3 id="函数简写"><a href="#函数简写" class="headerlink" title="函数简写"></a>函数简写</h3><p>在很多时候，你可能想在 bind 和 update 时触发相同行为，而不关心其它的钩子。比如这样写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.directive(&#39;color-swatch&#39;, function (el, binding) &#123;</span><br><span class="line">  el.style.backgroundColor &#x3D; binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="多个值传递"><a href="#多个值传递" class="headerlink" title="多个值传递"></a>多个值传递</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-demo&#x3D;&quot;&#123; color: &#39;white&#39;, text: &#39;hello!&#39; &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">Vue.directive(&#39;demo&#39;, function (el, binding) &#123;</span><br><span class="line">  console.log(binding.value.color) &#x2F;&#x2F; &#x3D;&gt; &quot;white&quot;</span><br><span class="line">  console.log(binding.value.text)  &#x2F;&#x2F; &#x3D;&gt; &quot;hello!&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="倒计时时间"><a href="#倒计时时间" class="headerlink" title="倒计时时间"></a>倒计时时间</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line">&#x2F;&#x2F; 注册一个全局自定义指令 &#96;v-time&#96;</span><br><span class="line">Vue.directive(&#39;time&#39;, &#123;</span><br><span class="line">    &#x2F;&#x2F; 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span><br><span class="line">    bind:function(el,binding)&#123;</span><br><span class="line">        console.log(el,binding)</span><br><span class="line">        let aa &#x3D; new Date()</span><br><span class="line">        el.innerHTML &#x3D; &#39;&lt;span&gt;&#39; + aa + &#39;&lt;&#x2F;span&gt;&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</span><br><span class="line">    inserted: function (el,binding) &#123;</span><br><span class="line">        el.__time__ &#x3D; setInterval(function()&#123;</span><br><span class="line">            let aa &#x3D; new Date()</span><br><span class="line">            el.innerHTML &#x3D; &#39;&lt;span style&#x3D;&quot;color:red&quot;&gt;&#39; + aa + &#39;&lt;&#x2F;span&gt;&#39;</span><br><span class="line">        &#125;.bind(this),1000)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。</span><br><span class="line">    update:function(el,binding)&#123;</span><br><span class="line">        console.log(el,binding)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 指令所在组件的 VNode 及其子 VNode 全部更新后调用 </span><br><span class="line">    componentUpdated:function(el,binding)&#123;</span><br><span class="line">        console.log(el,binding)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 只调用一次，指令与元素解绑时调用。</span><br><span class="line">    unbind:function(el,binding)&#123;</span><br><span class="line">        clearInterval(el.__time__)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 打印 binding</span><br><span class="line">def: &#123;bind: ƒ, inserted: ƒ, update: ƒ, componentUpdated: ƒ, unbind: ƒ&#125;</span><br><span class="line">expression: &quot;nowDate&quot;</span><br><span class="line">modifiers: &#123;&#125;</span><br><span class="line">name: &quot;time&quot;</span><br><span class="line">oldArg: undefined</span><br><span class="line">oldValue: Thu Jun 13 2019 20:42:29 GMT+0800 (中国标准时间) &#123;&#125;</span><br><span class="line">rawName: &quot;v-time&quot;</span><br><span class="line">value: Thu Jun 13 2019 20:42:32 GMT+0800 (中国标准时间) &#123;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件-npm</title>
    <url>/2019/05/27/vue%E7%BB%84%E4%BB%B6npm/</url>
    <content><![CDATA[<h3 id="使用vue-cli3-创建项目"><a href="#使用vue-cli3-创建项目" class="headerlink" title="使用vue-cli3 创建项目"></a>使用vue-cli3 创建项目</h3><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue create my-project</span><br><span class="line">目录 有 public src package.json readme.md 等文件</span><br></pre></td></tr></table></figure>
<p>首先需要创建一个 packages 目录，用来存放组件<br>然后将 src 目录改为 examples 用作示例</p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>启动项目的时候，默认入口文件是 src/main.js<br>将 src 目录改为 examples 之后，就需要重新配置入口文件<br>在根目录下创建一个 vue.config.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 将 examples 目录添加为新的页面</span></span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      <span class="comment">// page 的入口</span></span><br><span class="line">      entry: <span class="string">&#x27;examples/main.js&#x27;</span>,</span><br><span class="line">      <span class="comment">// 模板来源</span></span><br><span class="line">      template: <span class="string">&#x27;public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">// 输出文件名</span></span><br><span class="line">      filename: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开发组件"><a href="#开发组件" class="headerlink" title="开发组件"></a>开发组件</h3><p>之前已经创建了一个 packages 目录，用来存放组件<br>该目录下存放每个组件单独的开发目录，和一个 index.js 整合所有组件，并对外导出<br>每个组件都应该归类于单独的目录下，包含其组件源码目录 src，和 index.js 便于外部引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// packages/textarea/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入组件，组件必须声明 name</span></span><br><span class="line"><span class="keyword">import</span> Textarea <span class="keyword">from</span> <span class="string">&#x27;./main.vue&#x27;</span></span><br><span class="line"><span class="comment">// 为组件添加 install 方法，用于按需引入</span></span><br><span class="line">Textarea.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    Vue.component(Textarea.name, Textarea)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Textarea</span><br></pre></td></tr></table></figure>
<h3 id="打包组件"><a href="#打包组件" class="headerlink" title="打包组件"></a>打包组件</h3><p>vue-cli 3.x 提供了一个库文件打包命令<br>主要需要四个参数：</p>
<ol>
<li>target: 默认为构建应用，改为 lib 即可启用构建库模式</li>
<li>name: 输出文件名</li>
<li>dest: 输出目录，默认为 dist，这里我们改为 lib</li>
<li>entry: 入口文件路径，默认为 src/App.vue，这里改为 packages/index.js<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pageage.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: <span class="string">&quot;vue-cli-service build --target lib --name tag-textarea --dest lib packages/index.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后执行 npm run lib 命令，编译组件<h3 id="准备发布"><a href="#准备发布" class="headerlink" title="准备发布"></a>准备发布</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">首先需要在 package.json 添加组件信息</span><br><span class="line">name: 包名，该名不能和已有的名称冲突；</span><br><span class="line">version: 版本号，不能和历史版本号相同；</span><br><span class="line">description: 简介；</span><br><span class="line">main: 入口文件，应指向编译后的包文件；</span><br><span class="line">keyword：关键字，以空格分割；</span><br><span class="line">author：作者；</span><br><span class="line">private：是否私有，需要修改为 <span class="literal">false</span> 才能发布到 npm；</span><br><span class="line">license：开源协议。</span><br></pre></td></tr></table></figure>
然后创建 .npmignore 文件，设置忽略文件<br>该文件的语法和 .gitignore 的语法一样，设置发布到 npm 时忽略哪些目录或文件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules/</span><br><span class="line">examples/</span><br><span class="line">packages/</span><br><span class="line">public/</span><br><span class="line">vue.config.js</span><br><span class="line">babel.config.js</span><br><span class="line">*.map</span><br><span class="line">*.html</span><br><span class="line"># local env files</span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"># Log files</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw*</span><br></pre></td></tr></table></figure>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3>方法同普通的发布</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue装饰器</title>
    <url>/2019/07/31/vue%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<p>TS在vue中，装饰器(vue-property-decorator、vuex-class)的用法</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install --save vue-property-decorator</code><br><code>npm install --save vuex-class</code><br>这个库是基于 vue-class-component 封装的<br>vuex-class 是一个基于 Vue、Vuex、vue-class-component 的库</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>vue-property-decorator</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Vue, Component, Prop, Model, Watch, Inject, Provide, Emit, Ref &#125; from &#39;vue-property-decorator&#39;</span><br><span class="line">const symbol &#x3D; Symbol(&#39;baz&#39;)</span><br><span class="line"></span><br><span class="line">import AnotherComponent from &#39;@&#x2F;path&#x2F;to&#x2F;another-component.vue&#39;</span><br><span class="line">&#x2F;&#x2F;  标识VUE组件</span><br><span class="line">@Component</span><br><span class="line">export default class YourComponent extends Vue &#123;</span><br><span class="line">&#x2F;&#x2F; 父组件传递来的参数</span><br><span class="line">  @Prop(Number) readonly propA: number | undefined</span><br><span class="line">  @Prop(&#123; default: &#39;default value&#39; &#125;) readonly propB!: string</span><br><span class="line">  @Prop([String, Boolean]) readonly propC: string | boolean | undefined</span><br><span class="line">&#x2F;&#x2F; 可以设置计算属性</span><br><span class="line">  @PropSync(&#39;name&#39;, &#123; type: String &#125;) syncedName!: string</span><br><span class="line">&#x2F;&#x2F; 数据双向绑定</span><br><span class="line">  @Model(&#39;change&#39;, &#123; type: Boolean &#125;) readonly checked!: boolean</span><br><span class="line">&#x2F;&#x2F; 数据监控</span><br><span class="line">  @Watch(&#39;child&#39;)</span><br><span class="line">  onChildChanged(val: string, oldVal: string) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @Watch(&#39;person&#39;, &#123; immediate: true, deep: true &#125;)</span><br><span class="line">  onPersonChanged1(val: Person, oldVal: Person) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @Watch(&#39;person&#39;)</span><br><span class="line">  onPersonChanged2(val: Person, oldVal: Person) &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; 用于子组件去获得父组件的数据</span><br><span class="line">&#x2F;&#x2F; 需要注意的是这里不论子组件有多深，只要调用了inject那么就可以注入provider中的数据。而不是局限于只能从当前父组件的prop属性来获取数据</span><br><span class="line">  @Inject() readonly foo!: string</span><br><span class="line">  @Inject(&#39;bar&#39;) readonly bar!: string</span><br><span class="line">  @Inject(&#123; from: &#39;optional&#39;, default: &#39;default&#39; &#125;) readonly optional!: string</span><br><span class="line">  @Inject(symbol) readonly baz!: string</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 向子组件提供的数据</span><br><span class="line">  @Provide() foo &#x3D; &#39;foo&#39;</span><br><span class="line">  @Provide(&#39;bar&#39;) baz &#x3D; &#39;bar&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 想上层传输数据</span><br><span class="line">  count &#x3D; 0</span><br><span class="line"></span><br><span class="line">  @Emit()</span><br><span class="line">  addToCount(n: number) &#123;</span><br><span class="line">    this.count +&#x3D; n</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Emit(&#39;reset&#39;)</span><br><span class="line">  resetCount() &#123;</span><br><span class="line">    this.count &#x3D; 0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Emit()</span><br><span class="line">  returnValue() &#123;</span><br><span class="line">    return 10</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Emit()</span><br><span class="line">  onInputChange(e) &#123;</span><br><span class="line">    return e.target.value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Emit()</span><br><span class="line">  promise() &#123;</span><br><span class="line">    return new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        resolve(20)</span><br><span class="line">      &#125;, 0)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#x2F;&#x2F; 其他vue的引用</span><br><span class="line">  @Ref() readonly anotherComponent!: AnotherComponent</span><br><span class="line">  @Ref(&#39;aButton&#39;) readonly button!: HTMLButtonElement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const symbol &#x3D; Symbol(&#39;baz&#39;)</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    propA: &#123;</span><br><span class="line">      type: Number</span><br><span class="line">    &#125;,</span><br><span class="line">    propB: &#123;</span><br><span class="line">      default: &#39;default value&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: [String, Boolean]</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;,</span><br><span class="line">    checked: &#123;</span><br><span class="line">      type: Boolean</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    child: [</span><br><span class="line">      &#123;</span><br><span class="line">        handler: &#39;onChildChanged&#39;,</span><br><span class="line">        immediate: false,</span><br><span class="line">        deep: false</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    person: [</span><br><span class="line">      &#123;</span><br><span class="line">        handler: &#39;onPersonChanged1&#39;,</span><br><span class="line">        immediate: true,</span><br><span class="line">        deep: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        handler: &#39;onPersonChanged2&#39;,</span><br><span class="line">        immediate: false,</span><br><span class="line">        deep: false</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &#39;checked&#39;,</span><br><span class="line">    event: &#39;change&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    syncedName: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.name</span><br><span class="line">      &#125;,</span><br><span class="line">      set(value) &#123;</span><br><span class="line">        this.$emit(&#39;update:name&#39;, value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    anotherComponent: &#123;</span><br><span class="line">      cache: false,</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.$refs.anotherComponent as AnotherComponent</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    button: &#123;</span><br><span class="line">      cache: false,</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.$refs.aButton as HTMLButtonElement</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      foo: &#39;foo&#39;,</span><br><span class="line">      baz: &#39;bar&#39;,</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#39;foo&#39;,</span><br><span class="line">    bar: &#39;bar&#39;,</span><br><span class="line">    optional: &#123; from: &#39;optional&#39;, default: &#39;default&#39; &#125;,</span><br><span class="line">    [symbol]: symbol</span><br><span class="line">  &#125;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      foo: this.foo,</span><br><span class="line">      bar: this.baz</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onChildChanged(val, oldVal) &#123;&#125;,</span><br><span class="line">    onPersonChanged1(val, oldVal) &#123;&#125;,</span><br><span class="line">    onPersonChanged2(val, oldVal) &#123;&#125;,</span><br><span class="line">    addToCount(n) &#123;</span><br><span class="line">      this.count +&#x3D; n</span><br><span class="line">      this.$emit(&#39;add-to-count&#39;, n)</span><br><span class="line">    &#125;,</span><br><span class="line">    resetCount() &#123;</span><br><span class="line">      this.count &#x3D; 0</span><br><span class="line">      this.$emit(&#39;reset&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    returnValue() &#123;</span><br><span class="line">      this.$emit(&#39;return-value&#39;, 10)</span><br><span class="line">    &#125;,</span><br><span class="line">    onInputChange(e) &#123;</span><br><span class="line">      this.$emit(&#39;on-input-change&#39;, e.target.value, e)</span><br><span class="line">    &#125;,</span><br><span class="line">    promise() &#123;</span><br><span class="line">      const promise &#x3D; new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">          resolve(20)</span><br><span class="line">        &#125;, 0)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      promise.then(value &#x3D;&gt; &#123;</span><br><span class="line">        this.$emit(&#39;promise&#39;, value)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vue-class</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Component from &#39;vue-class-component&#39;</span><br><span class="line">import &#123;</span><br><span class="line">  State,</span><br><span class="line">  Getter,</span><br><span class="line">  Action,</span><br><span class="line">  Mutation,</span><br><span class="line">  namespace</span><br><span class="line">&#125; from &#39;vuex-class&#39;</span><br><span class="line"></span><br><span class="line">const someModule &#x3D; namespace(&#39;path&#x2F;to&#x2F;module&#39;)</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">export class MyComp extends Vue &#123;</span><br><span class="line">  @State(&#39;foo&#39;) stateFoo</span><br><span class="line">  @State(state &#x3D;&gt; state.bar) stateBar</span><br><span class="line">  @Getter(&#39;foo&#39;) getterFoo</span><br><span class="line">  @Action(&#39;foo&#39;) actionFoo</span><br><span class="line">  @Mutation(&#39;foo&#39;) mutationFoo</span><br><span class="line">  @someModule.Getter(&#39;foo&#39;) moduleGetterFoo</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; If the argument is omitted, use the property name</span><br><span class="line">  &#x2F;&#x2F; for each state&#x2F;getter&#x2F;action&#x2F;mutation type</span><br><span class="line">  @State foo</span><br><span class="line">  @Getter bar</span><br><span class="line">  @Action baz</span><br><span class="line">  @Mutation qux</span><br><span class="line"></span><br><span class="line">  created () &#123;</span><br><span class="line">    this.stateFoo &#x2F;&#x2F; -&gt; store.state.foo</span><br><span class="line">    this.stateBar &#x2F;&#x2F; -&gt; store.state.bar</span><br><span class="line">    this.getterFoo &#x2F;&#x2F; -&gt; store.getters.foo</span><br><span class="line">    this.actionFoo(&#123; value: true &#125;) &#x2F;&#x2F; -&gt; store.dispatch(&#39;foo&#39;, &#123; value: true &#125;)</span><br><span class="line">    this.mutationFoo(&#123; value: true &#125;) &#x2F;&#x2F; -&gt; store.commit(&#39;foo&#39;, &#123; value: true &#125;)</span><br><span class="line">    this.moduleGetterFoo &#x2F;&#x2F; -&gt; store.getters[&#39;path&#x2F;to&#x2F;module&#x2F;foo&#39;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>TS</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack打包规定</title>
    <url>/2019/05/30/webpack%E6%89%93%E5%8C%85%E8%A7%84%E5%AE%9A/</url>
    <content><![CDATA[<p>文中主要讲一些优化方案 使用vuecli3</p>
<a id="more"></a>
<h3 id="webpack兼容-IE"><a href="#webpack兼容-IE" class="headerlink" title="webpack兼容 IE"></a>webpack兼容 IE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一步,安装依赖</span><br><span class="line">npm install --save babel-polyfill安装安装依赖依赖</span><br><span class="line">&#x2F;&#x2F; 第二步 然后在main.js中的最前面引入babel-polyfill</span><br><span class="line">import &#39;babel-polyfill&#39;</span><br><span class="line">&#x2F;&#x2F; 在config中的webpack.base.conf.js中,修改编译配置</span><br><span class="line">entry:&#123;</span><br><span class="line">    app:[&#39;babel-polyfill&#39;,&#39;.&#x2F;src&#x2F;main.js&#39;]</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;  在规则中加入解析的内容</span><br><span class="line">module:&#123;</span><br><span class="line">　　rules: [</span><br><span class="line">　　　　&#123;</span><br><span class="line">　　　　　　test: &#x2F;\.js$&#x2F;,</span><br><span class="line">　　　　　　loader: &#39;babel-loader&#39;,</span><br><span class="line">　　　　　　include: [</span><br><span class="line">　　　　　　　　resolve(&#39;src&#39;),</span><br><span class="line">　　　　　　　　resolve(&#39;test&#39;),</span><br><span class="line">　　　　　　　　resolve(&#39;node_modules&#x2F;webpack-dev-server&#x2F;client&#39;),</span><br><span class="line">　　　　　　　　resolve(&#39;&#x2F;node_modules&#x2F;element-ui&#x2F;src&#39;),</span><br><span class="line">　　　　　　　　resolve(&#39;&#x2F;node_modules&#x2F;element-ui&#x2F;pachages&#39;),</span><br><span class="line">　　　　　　　　resolve(&#39;&#x2F;node_modules&#x2F;_element-ui@2.3.4@_element-ui&#x2F;src&#39;),</span><br><span class="line">　　　　　　　　resolve(&#39;&#x2F;node_modules&#x2F;_element-ui@2.3.4@_element-ui&#x2F;pachages&#39;),</span><br><span class="line">　　　　　　　　resolve(&#39;&#x2F;node_modules&#x2F;easyscroll&#x2F;src&#39;),</span><br><span class="line">　　　　　　　　resolve(&#39;&#x2F;node_modules&#x2F;_easyscroll@1.0.1@easyscroll&#x2F;src&#39;)</span><br><span class="line">　　　　　　]</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在vuecli3中</span><br><span class="line">chainWebpack:config&#x3D;&gt;&#123;</span><br><span class="line">    config.entry(&#39;main&#39;).add(&#39;babel-polyfill&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webpack-使用按需加载"><a href="#webpack-使用按需加载" class="headerlink" title="webpack 使用按需加载"></a>webpack 使用按需加载</h3><h4 id="elementUI"><a href="#elementUI" class="headerlink" title="elementUI"></a>elementUI</h4><p><a href="https://element.eleme.cn/#/zh-CN/component/quickstart" title="按需引入官方文档">按需引入官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-component -D</span><br><span class="line">&#x2F;&#x2F; 将 .babelrc 修改为</span><br><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [[&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;component&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;libraryName&quot;: &quot;element-ui&quot;,</span><br><span class="line">        &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="antdesignvue"><a href="#antdesignvue" class="headerlink" title="antdesignvue"></a>antdesignvue</h4><p><a href="https://vue.ant.design/docs/vue/use-with-vue-cli/" title="官方文档">官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add babel-plugin-import --dev</span><br><span class="line">&#x2F;&#x2F; Modify babel.config.js</span><br><span class="line"> module.exports &#x3D; &#123;</span><br><span class="line">  presets: [&quot;@vue&#x2F;app&quot;],</span><br><span class="line">+ plugins: [</span><br><span class="line">+    [</span><br><span class="line">+      &quot;import&quot;,</span><br><span class="line">+      &#123; libraryName: &quot;ant-design-vue&quot;, libraryDirectory: &quot;es&quot;, style: true &#125;</span><br><span class="line">+    ]</span><br><span class="line">+  ]</span><br><span class="line">&#125;;</span><br><span class="line">  &#x2F;&#x2F; src&#x2F;main.js</span><br><span class="line">  import Vue from &#39;vue&#39;</span><br><span class="line">- import Button from &#39;ant-design-vue&#x2F;lib&#x2F;button&#39;;</span><br><span class="line">+ import &#123; Button &#125; from &#39;ant-design-vue&#39;;</span><br><span class="line">- import &#39;ant-design-vue&#x2F;dist&#x2F;antd.css&#39;</span><br><span class="line">  import App from &#39;.&#x2F;App&#39;</span><br><span class="line"></span><br><span class="line">  Vue.component(Button.name, Button)</span><br><span class="line"></span><br><span class="line">  Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">  &#x2F;* eslint-disable no-new *&#x2F;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    components: &#123; App &#125;,</span><br><span class="line">    template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="CDN加载"><a href="#CDN加载" class="headerlink" title="CDN加载"></a>CDN加载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在vue.config.js文件:</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    chainWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; 压缩代码</span><br><span class="line">    config.optimization.minimize(true);</span><br><span class="line">    &#x2F;&#x2F; 分割代码</span><br><span class="line">    config.optimization.splitChunks(&#123;</span><br><span class="line">      chunks: &#39;all&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; 用cdn方式引入</span><br><span class="line">    config.externals(&#123;</span><br><span class="line">      &#39;vue&#39;: &#39;Vue&#39;,</span><br><span class="line">      &#39;vuex&#39;: &#39;Vuex&#39;,</span><br><span class="line">      &#39;vue-router&#39;: &#39;VueRouter&#39;,</span><br><span class="line">      &#39;axios&#39;: &#39;axios&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 在html中</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue&#x2F;2.6.10&#x2F;vue.runtime.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue-router&#x2F;3.0.2&#x2F;vue-router.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vuex&#x2F;3.1.0&#x2F;vuex.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;axios&#x2F;0.18.0&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#x2F;&#x2F; 提取CSS</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">      extract: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="gzip的压缩"><a href="#gzip的压缩" class="headerlink" title="gzip的压缩"></a>gzip的压缩</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev compression-webpack-plugin</span><br><span class="line">const CompressionWebpackPlugin &#x3D; require(&#39;compression-webpack-plugin&#39;)</span><br><span class="line"></span><br><span class="line">const compress &#x3D; new CompressionWebpackPlugin(</span><br><span class="line"> &#123;</span><br><span class="line">   filename: info &#x3D;&gt; &#123;</span><br><span class="line">     return &#96;$&#123;info.path&#125;.gz$&#123;info.query&#125;&#96;</span><br><span class="line">   &#125;,</span><br><span class="line">   algorithm: &#39;gzip&#39;, </span><br><span class="line">   threshold: 10240,</span><br><span class="line">   test: new RegExp(</span><br><span class="line">     &#39;\\.(&#39; +</span><br><span class="line">     [&#39;js&#39;].join(&#39;|&#39;) +</span><br><span class="line">     &#39;)$&#39;</span><br><span class="line">   ),</span><br><span class="line">   minRatio: 0.8,</span><br><span class="line">   deleteOriginalAssets: false</span><br><span class="line"> &#125;</span><br><span class="line">)</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line"></span><br><span class="line">   before(app, server) &#123; </span><br><span class="line">     app.get(&#x2F;.*.(js)$&#x2F;, (req, res, next) &#x3D;&gt; &#123; </span><br><span class="line">       req.url &#x3D; req.url + &#39;.gz&#39;;</span><br><span class="line">       res.set(&#39;Content-Encoding&#39;, &#39;gzip&#39;);</span><br><span class="line">       next();</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> configureWebpack: &#123;</span><br><span class="line">     plugins: [compress]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="去除console-log"><a href="#去除console-log" class="headerlink" title="去除console.log"></a>去除console.log</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 方法一</span><br><span class="line">const UglifyJsPlugin &#x3D; require(&#39;uglifyjs-webpack-plugin&#39;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    configureWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">        if (IS_PROD) &#123;</span><br><span class="line">            const plugins &#x3D; [];</span><br><span class="line">            plugins.push(</span><br><span class="line">                new UglifyJsPlugin(&#123;</span><br><span class="line">                    uglifyOptions: &#123;</span><br><span class="line">                        compress: &#123;</span><br><span class="line">                            warnings: false,</span><br><span class="line">                            drop_console: true,</span><br><span class="line">                            drop_debugger: false,</span><br><span class="line">                            pure_funcs: [&#39;console.log&#39;]&#x2F;&#x2F;移除console</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    sourceMap: false,</span><br><span class="line">                    parallel: true</span><br><span class="line">                &#125;)</span><br><span class="line">            );</span><br><span class="line">            config.plugins &#x3D; [</span><br><span class="line">                ...config.plugins,</span><br><span class="line">                ...plugins</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 方法二</span><br><span class="line">npm i --save-dev babel-plugin-transform-remove-console</span><br><span class="line">&#x2F;&#x2F; 在babel.config.js中配置</span><br><span class="line">const plugins &#x3D; [];</span><br><span class="line">if([&#39;production&#39;, &#39;prod&#39;].includes(process.env.NODE_ENV)) &#123;  </span><br><span class="line">  plugins.push(&quot;transform-remove-console&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  presets: [[&quot;@vue&#x2F;app&quot;,&#123;&quot;useBuiltIns&quot;: &quot;entry&quot;&#125;]],</span><br><span class="line">  plugins: plugins</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>在根目录新建2个文件，分别为.env.development，.env.production，.env.test<br>项目变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VUE_APP_BASE_API &#x3D; &#39;变量值&#39;</span><br><span class="line">&#x2F;&#x2F; 取值</span><br><span class="line">process.env.VUE_APP_BASE_API</span><br><span class="line">&#x2F;&#x2F; 更改package.json文件</span><br><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;vue-cli-service serve --mode test&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;vue-cli-service build&quot;,</span><br><span class="line">    &quot;build:test&quot;: &quot;vue-cli-service build --mode test&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;vue-cli-service lint&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><p>参考下方</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">const UglifyJsPlugin &#x3D; require(&#39;uglifyjs-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">const isProduction &#x3D; process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;;</span><br><span class="line">const cdn &#x3D; &#123;</span><br><span class="line">    css: [],</span><br><span class="line">    js: [</span><br><span class="line">        &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue&#x2F;2.5.17&#x2F;vue.runtime.min.js&#39;,</span><br><span class="line">        &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue-router&#x2F;3.0.1&#x2F;vue-router.min.js&#39;,</span><br><span class="line">        &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vuex&#x2F;3.0.1&#x2F;vuex.min.js&#39;,</span><br><span class="line">        &#39;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;axios&#x2F;0.18.0&#x2F;axios.min.js&#39;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resolve(dir) &#123;</span><br><span class="line">    return path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 基本路径</span><br><span class="line">    baseUrl: &#39;.&#x2F;&#39;,</span><br><span class="line">    &#x2F;&#x2F; 输出文件目录</span><br><span class="line">    outputDir: &#39;dist&#39;,</span><br><span class="line">    &#x2F;&#x2F; 放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录。</span><br><span class="line">    &#x2F;&#x2F; assetsDir: &quot;.&#x2F;&quot;,</span><br><span class="line">    &#x2F;&#x2F; 指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径</span><br><span class="line">    indexPath: &#39;.&#x2F;&#39;,</span><br><span class="line">    &#x2F;&#x2F; eslint-loader 是否在保存的时候检查</span><br><span class="line">    lintOnSave: true,</span><br><span class="line">    &#x2F;&#x2F; webpack配置</span><br><span class="line">    &#x2F;&#x2F; see https:&#x2F;&#x2F;github.com&#x2F;vuejs&#x2F;vue-cli&#x2F;blob&#x2F;dev&#x2F;docs&#x2F;webpack.md</span><br><span class="line">    chainWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">        config</span><br><span class="line">            .entry(&#39;index&#39;)</span><br><span class="line">            .add(&#39;babel-polyfill&#39;)</span><br><span class="line">            .end();</span><br><span class="line">        &#x2F;&#x2F; 配置别名</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(&quot;@&quot;, resolve(&quot;src&quot;))</span><br><span class="line">            .set(&quot;@img&quot;, resolve(&quot;src&#x2F;assets&#x2F;images&quot;))</span><br><span class="line">            .set(&quot;@css&quot;, resolve(&quot;src&#x2F;assets&#x2F;styles&#x2F;css&quot;))</span><br><span class="line">            .set(&quot;@scss&quot;, resolve(&quot;src&#x2F;assets&#x2F;styles&#x2F;scss&quot;));</span><br><span class="line">        &#x2F;&#x2F; 生产环境配置</span><br><span class="line">        if (isProduction) &#123;</span><br><span class="line">            &#x2F;&#x2F; 删除预加载</span><br><span class="line">            config.plugins.delete(&#39;preload&#39;);</span><br><span class="line">            config.plugins.delete(&#39;prefetch&#39;);</span><br><span class="line">            &#x2F;&#x2F; 压缩代码</span><br><span class="line">            config.optimization.minimize(true);</span><br><span class="line">            &#x2F;&#x2F; 分割代码</span><br><span class="line">            config.optimization.splitChunks(&#123;</span><br><span class="line">                chunks: &#39;all&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">            &#x2F;&#x2F; 生产环境注入cdn</span><br><span class="line">            config.plugin(&#39;html&#39;)</span><br><span class="line">                .tap(args &#x3D;&gt; &#123;</span><br><span class="line">                    args[0].cdn &#x3D; cdn;</span><br><span class="line">                    return args;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    configureWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">        if (isProduction) &#123;</span><br><span class="line">            &#x2F;&#x2F; 用cdn方式引入</span><br><span class="line">            config.externals &#x3D; &#123;</span><br><span class="line">                &#39;vue&#39;: &#39;Vue&#39;,</span><br><span class="line">                &#39;vuex&#39;: &#39;Vuex&#39;,</span><br><span class="line">                &#39;vue-router&#39;: &#39;VueRouter&#39;,</span><br><span class="line">                &#39;axios&#39;: &#39;axios&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 为生产环境修改配置...</span><br><span class="line">            config.plugins.push(</span><br><span class="line">                &#x2F;&#x2F;生产环境自动删除console</span><br><span class="line">                new UglifyJsPlugin(&#123;</span><br><span class="line">                    uglifyOptions: &#123;</span><br><span class="line">                        compress: &#123;</span><br><span class="line">                            warnings: false,</span><br><span class="line">                            drop_debugger: true,</span><br><span class="line">                            drop_console: true,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    sourceMap: false,</span><br><span class="line">                    parallel: true,</span><br><span class="line">                &#125;)</span><br><span class="line">            );</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 为开发环境修改配置...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 生产环境是否生成 sourceMap 文件</span><br><span class="line">    productionSourceMap: false,</span><br><span class="line">    &#x2F;&#x2F; css相关配置</span><br><span class="line">    css: &#123;</span><br><span class="line">        &#x2F;&#x2F; 是否使用css分离插件 ExtractTextPlugin</span><br><span class="line">        extract: true,</span><br><span class="line">        &#x2F;&#x2F; 开启 CSS source maps?</span><br><span class="line">        sourceMap: false,</span><br><span class="line">        &#x2F;&#x2F; css预设器配置项</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            &#x2F;&#x2F; pass options to sass-loader</span><br><span class="line">            sass: &#123;</span><br><span class="line">                &#x2F;&#x2F; 引入全局变量样式</span><br><span class="line">                data: &#96;</span><br><span class="line">                    @import &quot;@&#x2F;stylePath&#x2F;theme.scss;</span><br><span class="line">                &#96;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 启用 CSS modules for all css &#x2F; pre-processor files.</span><br><span class="line">        modules: false,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; use thread-loader for babel &amp; TS in production build</span><br><span class="line">    &#x2F;&#x2F; enabled by default if the machine has more than 1 cores</span><br><span class="line">    parallel: require(&#39;os&#39;).cpus().length &gt; 1,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: 8888,  &#x2F;&#x2F; 端口</span><br><span class="line">        open: true, &#x2F;&#x2F; 自动开启浏览器</span><br><span class="line">        compress: false, &#x2F;&#x2F; 开启压缩</span><br><span class="line">        overlay: &#123;</span><br><span class="line">            warnings: true,</span><br><span class="line">            errors: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全</title>
    <url>/2019/07/27/web%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<p>主要讲述如何预防非法获取资源（用户信息，数据库资料）等</p>
<a id="more"></a>
<h3 id="XSS攻击-（Cross-site-script）"><a href="#XSS攻击-（Cross-site-script）" class="headerlink" title="XSS攻击 （Cross site script）"></a>XSS攻击 （Cross site script）</h3><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><ul>
<li>DOM节点显示内容（script）。</li>
<li>利用DOM属性加载脚本。</li>
<li>js中会产生JS攻击</li>
<li>富文本保存产生标签</li>
</ul>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul>
<li>将显示到DOM中的数据进行转义；</li>
<li>将显示在属性中的字符串进行转义</li>
<li>将JS中需要的进行JSON.stringfy</li>
<li>使用白名单来保留部分标签和属性</li>
<li>CSP ()</li>
</ul>
<h4 id="一些库"><a href="#一些库" class="headerlink" title="一些库"></a>一些库</h4><ul>
<li>xss</li>
<li>cheerio</li>
</ul>
<h3 id="CSRF-跨站请求伪造-Cross-site-Request-Forggy"><a href="#CSRF-跨站请求伪造-Cross-site-Request-Forggy" class="headerlink" title="CSRF 跨站请求伪造(Cross site Request Forggy)"></a>CSRF 跨站请求伪造(Cross site Request Forggy)</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li>sameSize (strict Lax)  不允许第三方网站携带cookie</li>
<li>httpOnly  只允许http读取cookie。</li>
<li>验证码 （ccap）</li>
<li>token</li>
<li>referer 禁止第三方网站</li>
</ul>
<h4 id="加密库"><a href="#加密库" class="headerlink" title="加密库"></a>加密库</h4><p>crypto</p>
<h3 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>将目标网站通过iframe  设置透明度为0，覆盖在当前网站上。<br>用户看到的为外层的点击按钮。<br>点击以后 实际点击为iframe中的按钮。</p>
<h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><ul>
<li>禁止内嵌（JS办法以及X-FRAME_OPTIONS）</li>
<li>sandbox （iframe属性）</li>
<li>验证信息等</li>
</ul>
<h3 id="HTTP传输窃听"><a href="#HTTP传输窃听" class="headerlink" title="HTTP传输窃听"></a>HTTP传输窃听</h3><p>传输链路窃听篡改<br>traceroute  <a href="http://www.baidu.com/">www.baidu.com</a> (查看所有节点 )</p>
<h4 id="途径"><a href="#途径" class="headerlink" title="途径"></a>途径</h4><ul>
<li>插入广告</li>
<li>重定向网站</li>
<li>无法防御的XSS和CSRF攻击</li>
</ul>
<h4 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h4><ul>
<li>https防止</li>
<li>加密关键信息</li>
</ul>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>通过读取文件内容类型<br>设置文件读写权限<br>防止文件执行</p>
<h2 id="系统安全规范覆盖安全测试内容"><a href="#系统安全规范覆盖安全测试内容" class="headerlink" title="系统安全规范覆盖安全测试内容"></a>系统安全规范覆盖安全测试内容</h2><h3 id="代码安全"><a href="#代码安全" class="headerlink" title="代码安全"></a>代码安全</h3><p>代码及配置文件中不能存在明文用户名及口令秘钥；<br>代码及配置文件中不能存在个人敏感数据（如电话号码、身份证号等）；<br>加密至少采用强度AES256；<br>HASH算法: 至少采用强度HMAC-SHA512；<br>密钥信息不能存储在一个地方，应分别存储在三个部分：数据库、配置文件、代码中；<br>数据库连接 用户名、密码 需要使用加密数据（druid 自带，参考： 数据库链接加密）；<br>敏感信息不能以GET方式提交；</p>
<h3 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h3><p>源码和注释中不存在数据库版本信息；</p>
<p>源码和注释中不存在项目版本编号；</p>
<p>源码和注释中不存在文件或者项目的绝对路径；</p>
<p>错误请求返回不包含敏感信息（如：服务器版本）；</p>
<p>源码和注释中不存在服务器路径信息；</p>
<p>源码和注释中不存在打印程序的详细堆栈信息（e.printStackTrace()）；</p>
<p>源码和注释中不存在定义范围的敏感数据（如password:123456）；</p>
<h3 id="日志-抛异常"><a href="#日志-抛异常" class="headerlink" title="日志/抛异常"></a>日志/抛异常</h3><p> 日志不能打印明文的个人敏感信息（如：用户名密码、个人电话、个人邮箱、token等）；<br>不能打印堆栈信息；</p>
<h3 id="数据库存储加密"><a href="#数据库存储加密" class="headerlink" title="数据库存储加密"></a>数据库存储加密</h3><p>数据库存储的敏感字段必须加密；<br>敏感信息包括：<br>订单/运单类：电话，地址，月结卡号；<br>客户类：电话，地址，证件号；<br>员工类：证件号，银行卡，薪资福利，绩效；<br>海外数据：证件号，邮箱，电话，地址；<br>权限类：密码、密钥；</p>
<h3 id="密码复杂度"><a href="#密码复杂度" class="headerlink" title="密码复杂度"></a>密码复杂度</h3><p>必须由大小、小写、数字等组成；</p>
<p>不能与用户名相似（如，不能包含用户名正反写大小等）；</p>
<p>密码长度要求，最小8位；<br>登录业务系统必须要有验证码机制；</p>
<h3 id="敏感数据脱敏保护"><a href="#敏感数据脱敏保护" class="headerlink" title="敏感数据脱敏保护"></a>敏感数据脱敏保护</h3><h4 id="非客户"><a href="#非客户" class="headerlink" title="非客户"></a>非客户</h4><p>需要将敏感信息脱敏；可以采用点击小眼睛开关的方式显示脱敏信息；<br>点击脱敏开关查看敏感信息，需要记录日志；<br>小眼睛操作需记录相关日志（操作人，操作对象，操作时间）；</p>
<h4 id="客户"><a href="#客户" class="headerlink" title="客户"></a>客户</h4><p>看到自己的数据可以不脱敏，可以根据业务要求设定；<br>敏感信息包括：<br>订单/运单类：电话，地址，月结卡号；<br>客户类：电话，地址，证件号；<br>员工类：证件号，银行卡，薪资福利，绩效；<br>海外数据：证件号，邮箱，电话，地址；<br>权限类：密码、密钥；</p>
<h3 id="接口安全要求"><a href="#接口安全要求" class="headerlink" title="接口安全要求"></a>接口安全要求</h3><p>应用系统接口调用，需进行访问控制；</p>
<p>信息系统接口调用，必须在信息系统接口上进行认证；</p>
<p>对于部署在公司内网信息系统之间的接口调用，必须设置IP地址级别的访问控制；<br>对于部署在公司内网的信息系统和部署在外部的信息系统之间的接口调用，在我司信息系统接口上必须使用数字签名、Oauth认证等方式对调用的信息系统进行认证，确保对接口调用的鉴权，鉴权信息的保密，以及数据防篡改；<br>接口调用信息数据流必须经过过滤，过滤多余的字段，仅传递业务必须的字段；<br>接口调用必须做权限控制，仅允许操作和本业务相关的数据，不允许传递多余的字段；<br>对于部署在公司内网的信息系统和部署在外部的信息系统之间的接口调用传递的涉密数据，必须经过加密传递，对于涉及与金钱有关的涉密数据必须采用加密算法确保数据的完整性；<br>接口调用中使用密码进行认证的，必须使用强密码，且每半年修改一次密码；<br>接口调用需要设置最高频率，防止调用频率过高对信息系统的性能影响，降低拒绝服务攻击的风险；<br>公司内网信息系统和外网信息系统之间传递数据必须经过信息系统之间的接口调用，禁止通过后台数据库直接进行数据传递；</p>
<h3 id="系统部署"><a href="#系统部署" class="headerlink" title="系统部署"></a>系统部署</h3><p>使用SSL证书，使用https替换掉http请求；</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>《我们这一代人的困惑》   -于宙</title>
    <url>/2020/07/02/%E3%80%8A%E6%88%91%E4%BB%AC%E8%BF%99%E4%B8%80%E4%BB%A3%E4%BA%BA%E7%9A%84%E5%9B%B0%E6%83%91%E3%80%8B-%E4%BA%8E%E5%AE%99/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>

<p>引言 大学毕业之后第一次面对这么多人做演讲，坦率地说，非常的紧张。虽然年轻的时候我曾经畅想过很多次，功成名就之后能像我曾经的那些偶像一样和年轻的朋友们分享一下我是如何从一无所有走上人生巅峰的经验，然后语重心长的告诉大家，人活着不能像一根草而是要像一棵树，能走到金字塔顶端的只有雄鹰和蜗牛两种动物，我的成功你也可以复制等等。可是过了26岁之后我忽然意识到一个严肃的问题，就是自己的一生未必会取得很大的成就啊，所以当TEDxDUFE团队找到我说没关系即便你只是一个开小吃店的，我们也愿意为你提供这样一个和很多人交流思想的机会时，我的心情是多么地激动。因为公司还没上市，所以小草大树，雄鹰蜗牛，睡地板捡易拉罐这样的故事还不到说的时候。今天，只想和大家分享几个困扰了我和我身边的一些朋友十几年的问题，和在经历了一些变故和挫折后，我对这些问题的看法。 <strong>努力奋斗真的能实现梦想吗？</strong> 大家现在可以想象一下汪峰老师坐在转椅上，深情的望着你对你说，“你的梦想是什么？”周星驰老师的那句“做人如果没有梦想，和咸鱼有什么区别？”据说也激励了几代人。梦想这个东西是如此的重要，简直就是人生的一盏明灯。成功的人们成功的原因各不相同，但他们都不会忘记告诉你，无论到什么时候，都不曾忘记梦想，是他们成功的首要原因。以至于我们这一代人对于人生意义的最通常的理解，就在于坚持梦想并最终实现它。可很少有人愿意面对的一件事情是，大部分人的梦想永远，没错，永远都实现不了。 你没听错，大部分人的梦想永远都实现不了。 先和大家分享一个我之前的梦想。上大学的时候我热衷于各式各样的赌博游戏，是学校旁边赌场的常客。我赌徒生涯的起点源于赌场里最基本游戏轮盘赌，轮盘上1到36个数字和两个0，赔率是1赔36。1到36分为红黑两色，押注红黑的赔率是1赔1。作为一个合格的接受过九年义务教育的人都知道，每一次轮盘开始转动的那一刻，都是一次纯粹的独立随机事件。但是赌博这件事情的魅力就在于，当你真正身处赌场，看到已经连续4次开出红色的时候，几乎所有人都会想把筹码压在黑色的那一面。而我当时的梦想，就是破译这其中的奥秘。我最初的策略非常简单，当连续三次开出奇数，就押注偶数，连续三次红色，就押注黑色。难以置信的事情发生了，在我严格的执行这个策略的情况下，前几次去赌场不但全身而退，每次都还赚了不少，以至于我产生了一种幻觉，也许游戏是有规律可循的，我已经看到了人生巅峰就在不远处向我招手。当然最终的结尾你们一定想到了，在经历过连续18个偶数，连续开出21次黑色后，我把之前赚到的钱都乖乖地还给了赌场。 后来我知道，我那个愚蠢的梦想叫做赌徒谬论，就不具体展开讲了。但它对我意义深刻，我终于明白了在纯粹的随机事件面前，一切规律都是无谓的。 生活中的事情有极个别和轮盘赌一样，属于纯粹的随机事件，比如双色球。可是几乎每一个中了双色球的人都会告诉你啊，他们花了多少精力去钻研往期号码，研究历史规律，付出了多少辛勤的努力最终获得了成功。实际上，即使是纯粹由随机性主导的事情，只要参与的人的基数足够大，小概率事件总会发生。有趣的是，几乎所有在随机事件中的受益者，都会把这完全由运气决定的结果归功于自己的努力上。不仅仅是参与者本身，旁观者也会这么认为。再比如，中国好声音的冠军嘛。 我们生活中遇到的所有事情基本可以分为三类，第一类纯粹由随机性决定，比如布朗运动和轮盘赌博，第二类纯粹由能力决定，比如英语六级考试，110米栏之类。第三类，也是我们最常遇到的，由能力和随机性共同决定，比如创业，投资，恋爱或是梦想。 我对励志大师们总告诉年轻人要不惜一切代价追逐梦想感到深深厌倦的原因就在于，大多数人的梦想虽然不是纯粹的双色球，但也绝对是由随机性主导的。在强大的随机性面前，付出再多辛勤的汗水，就好比夜以继日蹲在轮盘赌旁边渴望参透其中规律。前面说到中国好声音的冠军，张碧晨的那一句youaremydestiny，听得我也是醉了。但毕竟那一刻，中国又有多少唱歌唱的和她一样好甚至更好的姑娘，如果真把成为好声音冠军作为一生的梦想，一生中都得在痛苦中度过。我个人很喜欢黄渤，但绝对不会用黄渤作为例子去激励一个我这种长相差的年轻人不惜一切代价去追逐演员梦，注意是不惜一切代价。因为无论是唱歌还是演戏，再多的努力也只能让你变得很优秀，它们并不存在可以量化的评判标准，想成为万众瞩目明星，随机性的重要程度都远远大于实力。 我想，一个人在年轻的时候，做的每一件事情，能清楚的区分其中随机性所占的比例并能心平气和的接受它，在我看来就是最宝贵的财富。 那么在你的梦想中，运气又扮演了多重要的角色呢？当你深深的感知到这件事情的随机性也许不会青睐与你，是否还愿意坚持下去呢？对我而言，梦想永远是值得执着追求的，但我可以无比心平气和的接受，它就是永远无法实现。 <strong>既然连梦都实现不了，还有什么事情值得努力呢？</strong> 去年这个时候，我发过一条微博。 这些年我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天只睡几小时，多久没放假了，如果这些东西也值得夸耀，那么富士康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。 这段话在网上的疯传，是我始料不及的。更出乎我意料之外的是，我在评论中看到了相当一部分的骂声，还有人认真的给我写下了相当深刻的话，“你在拥有自己的光亮时不要吹熄别人的蜡烛，你不能因为你自己的不喜欢就否定别人。”很莫名其妙是吧，即使你刚刚听完我上一段关于随机性的看法，你也会知道，我从来都不觉得努力是一件无所谓的事情。恰恰相反，我一直相信，在能力没达到一定程度之前，你连面对随机性的资格都没有啊。张碧晨能拿好声音冠军自然离不开运气，但换成杨幂，评委不但不会转身可能直接撒腿就跑了。 可现在问题来了，那究竟什么才算是有价值的努力？这可以从我那条微博说起。去年这个时候我和朋友在琢磨去大庆做点服装生意，决定去考察几个商场。我当时住在北京，因为之前晚上和朋友在外面玩的比较尽兴回到家里已经比较晚了，担心睡觉睡过头会错过航班，那晚上就直接在沙发上靠了一晚。那是我第一次去哈尔滨，十一月份已经很冷了，衣服拿的不足，下了飞机冻得头疼。又因为没有提前订票，到了哈尔滨之后才买的火车票，发现就只剩站票了。于是，当我一晚上没睡，冻得头晕眼花，又在绿皮火车上站了两个多小时之后，抵达大庆的那一瞬间我觉得自己实在是太不容易了，将来必须要写进回忆录里面。可是，回头仔细一想，这些所谓的“努力”对我最终把那个服装生意做好，没有半毛钱关系。更何况，如果我前一天晚上能早点上床睡觉，多准备点衣服，提前在网上把火车票订好，完全可以舒舒服服的达到同样的目的。我的那次经历像是自己二十多年生活中很多事情的缩影，沉溺在对结果没有直接帮助只是因为自己遭受了一些痛苦的行为中，误以为那就是努力。 当我终于意识到我并不是唯一曾经把无意义的消耗当作努力的时候，忽然发现，原来生活中我觉得很努力的人，也许没那么勤奋，如果在正确的方向上坚持行动，超过他们也并不困难。 因为我们这一代人对于勤奋和努力的理解，几乎清一色的来自于学校，更精确的说，在前二十多年的生活中，我们眼中最努力的人，就是那些最能拼命看书和做题的人。实际上，这种理解是极其片面而幼稚的，因为看书和做题本身，都是为了一个极其鲜明的目的而存在的，就是通过考试。这种勤奋的付出极其纯粹，更多的复习时间，更高的复习强度，一般而言，都可以直接的提高考试的分数，它们之间的联系鲜明而直接，每个人都看的懂。 但生活的美妙之处却在于，很多事情在我们没做到一定程度之前，是完全没法理解的。 这就好比学英语，十几年漫长的岁月里我都在幻想，要通过多么复杂的流程，多么精密的设计，多么全面的涉及和多么不可思议的努力，终于有那么一天，或许就我就能因为前期的那些无懈可击的学习，说一口比较流利的英语，像说中文一样，可以边说边想，而不是说每一句话之前设计它的句式时态词汇然后在心里复述几遍再看上去流利的背诵出来。谁不是这么设想的呢？可惜，它不仅从来没有实现，并且让我看不到有任何实现的趋势，对于每一个设立目标的人来说，没有比这更痛苦的感受。 但是在去了美国两年左右的时间之后，我忽然发现自己可以已经毫无障碍的说一口流利的英语了。这并非我采用了什么新的学习方法，而是因为去了印第安纳之后身边中国人很少，在没有选择的情况下，只能被迫用英语去交流和表达，在这个过程中我并没有认真想过自己每天进步了多少，也没有阶段性的检验学习效果，只是不停的去听和说，因为没有选择嘛。直到两年多后的忽然有一天我才意识到，咦，自己好像真的已经可以了。但是我确实无法总结出来是如何一步一步做到的，只是那两年的时间，我一直都在很不情愿地用英语去生活嘛。 一个人能获得的最可贵的能力，都和掌握一门语言一样，你所付出的努力不是能够获得即时回馈的，甚至在很长的一段时间内没有任何收获，直到积累到了一定的阶段后，忽然爆发出惊人的力量，连你自己都不清楚这一切是如何发生的。比如锻炼身体，读书写作，或者是做生意。当你经历了足够的量变终于引起质变时拥有的技能，大部分人是终身难以企及的，不是因为他们太笨，恰恰相反，因为他们都太聪明了。 触发人类行动的最基本原理被称为反射，我们是需要即时回馈的物种。所以绝大多数人对于世界的理解度是线性的，但更多情况下，事物却是以漫长的潜伏震荡后爆发突破的形式发展的。我现在时常觉得，人在少年时期更容易掌握语言，乐器，美术这些成年后很难学的技艺，并非那小时候就是天资聪颖，而是小孩子很少会一个星期质疑一次自己收获了多少，都是闷头一练就是好几年，直到学会了才知道哦自己已经会了。只有聪明的成年人，才相信1本书读懂易经，10句话揭秘马云的成功之道，30天成为吉他高手的故事。 简而言之，现实生活中，付出和结果之间往往没有那么立竿见影。在离开学校之后，当我们遇到的很多事情不再像做题和考试之间联系的那么紧密的时候，很多人的付出都是浅尝辄止的。而最可贵的努力，是选择一个正确的方向，那些无法立即获得回报的事情，依然能付出十年如一日的专注和热情，最终的结果也许不足以让你独孤求败，但足以出类拔萃. <strong>人这一生中是否有一个节点，过了之后一切都会好起来？</strong> 前面说了这么多，谈论的都与目标和实现目标有关。仔细想想，我们的一生好像都是在实现目标中挣扎着度过的。上初中的时候，老师告诉你，中考的淘汰率是最高的，只要闯过去，上了高中一切就好了。但上了高中的时候发现不是那么回事嘛，高中老师又说了啊，考上大学就进了天堂。于是你考上了大学，依然空虚迷茫各种草样年华，父母老师又告诉你，找到工作就好了。工作之后发现烦恼和忧虑依然都在，女朋友给你看马云的故事，告诉你等你事业有成就好了…… 你发现了吗，其实人这一辈子的每一个阶段都有新的痛苦和顾虑，周而复始，生生不息。绝对不会因为你考上大学，事业有成，迎娶了女神就从此happilyeverafter。但每一个阶段也有每一个阶段的快乐，无法替代。生活不是安徒生童话也不是好莱坞电影，从出生的那一刻起直到生命的尽头，都不存在什么节点，过去了之后一切幸福美满无忧无虑。 每一段岁月都有它存在的价值，没有高低贵贱之分，都不应该被辜负。而我能想到的人这一生能做的最愚蠢的事情，就是把全部人生的希望都孤注一掷到未来的某个节点上，而忽略了生活本身应有的乐趣。哪怕你以后真正实现了那个执念中的目标，才会发现它远远没你想的那么美好。年轻的时候和哥们在操场上打篮球喝可乐的快乐，是以后高尔夫会球所品里红酒替代不了的。尤其男生，千万不要总想着等将来老子有钱了如何如何，且不说你以后很可能不会太有钱，而且相信我，就是有钱了也真的不能怎么样。生命就在每天的生活里，一切执念都是虚妄，和身边的人愉快相处，认真安排好每一天的活动，用心去感受每一天的心境，就是生活的意义本身。这其实是我今天最想分享给你们的事情。 谢谢大家。</p>
]]></content>
      <categories>
        <category>生活分享</category>
      </categories>
  </entry>
  <entry>
    <title>不同行业小程序设计需要考虑的特点</title>
    <url>/2020/06/04/%E4%B8%8D%E5%90%8C%E8%A1%8C%E4%B8%9A%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E7%9A%84%E7%89%B9%E7%82%B9/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>现在各大公司对小程序的设计要求是什么样的？ 有很多专门服务小程序的公司比如有赞、比如微盟、比如获客宝等等，你可以看到未来小程序将会是大部分公司所必须要考虑的解决方案之一，那么不同行业的小程序在设计的时候思考点是不同的，我们来分析下 小程序的设计思考，需要结合小程序设计规范以及对不同行业公司小程序进行调研，进行分析 <strong>·出行类-滴滴</strong> 滴滴的APP与小程序设计时，考虑到了平台的特性，更简单快捷的操作目的地进行叫车服务， 在功能选择上更加提供核心功能在小程序露出，一些非必须的入口则没有体现出来，比如消息，扫一扫以及个人中心里的一些功能等，用户在使用小程序叫车时更加的专注 <img src="https://img.zcool.cn/community/01dda45ecfb3a1a801215aa0eeae6a.png"> <strong>·笔记类-印象笔记</strong> 印象笔记APP和印象笔记小程序的功能体现，也是有很大的不同，在印象笔记小程序中，只体现了最核心的几个入口“由我创建”“来自分享”“微信文件”印象笔记的小程序更多的是通过微信这一流量入口使得用户能够及时的收集来自朋友的分享笔记以及快速创建笔记； <img src="https://img.zcool.cn/community/01a03b5ecfb3e4a801206621c591bf.png"> 还有一个很“微信”的功能就是导入微信文件功能，此功能能够一键导入微信聊天记录中的一些文件到印象笔记APP中，及时保存防止用户的文件过期无法使用。 <strong>·新闻类-36氪</strong> 36Kr主程序和小程序对比更加明显，在36氪小程序精简版，则更加轻量化的体现了主要资讯信息，其他的入口则直接忽略体现出来，把最重要的核心点体现了出来，其他非主要的“干扰”小程序轻量化感受的因素都直接放弃体现 <img src="https://img.zcool.cn/community/01b7f65ecfb419a80120662132f3f0.png"> <strong>·知识付费类-得到</strong> 在主程序与小程序的设计中，更多的是偏向于核心商业化部分内容作为小程序突出主要信息，比如得到小程序，在底部导航栏中保留了2个主应用程序中核心的入口“商场”和“课程” <img src="https://img.zcool.cn/community/0181be5ecfb447a801215aa0b6f25a.png"> <strong>·视频类-哔哩哔哩</strong> 在哔哩哔哩小程序中，主要把其核心的两个主导航分类进行了提取，分别是“热门”和“追番”，分区页面对应APP提取了部分功能到小程序中，我的页面对应APP只提取了历史记录+意见反馈到小程序中；搜索结果页对应APP  排序方式和筛选部分进行了大量“简化”；在微信小程序中，不能对内容进行点赞和评价 <img src="https://img.zcool.cn/community/0123545ecfb48da8012066211e1ee2.png"> <strong><img src="https://img.zcool.cn/community/01a2e85ecfb496a801215aa0afa414.png"></strong> <strong><img src="https://img.zcool.cn/community/0114045ecfb4a7a801215aa0d2e57d.png"></strong> <img src="https://img.zcool.cn/community/0130fc5ecfb4b2a801215aa0a608a2.png"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>两种遍历方式</title>
    <url>/2019/08/15/%E4%B8%A4%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>对于两种便利方式的学习，深度优先和广度优先，以及在路有权限上应用的思考</p>
<a id="more"></a>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在使用VUE的时候我们采用了动态路由的方式，全部的页面路由就相当于一棵树。而因为权限的控制，用户有的权限也是一棵树，我们在渲染DOM的时候会遍历树形结构，从而对比得到最终的菜单树。</p>
<h2 id="返回为树状结构的时候"><a href="#返回为树状结构的时候" class="headerlink" title="返回为树状结构的时候"></a>返回为树状结构的时候</h2><p>我们在拿到后台的树形结构，在我们已经有的树中去查找。是否存在相同的节点。存在的话则保存，不存在则剔除掉。<br>所以我们采用深度优先的算法。因为路由是逐层嵌套的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 假设路由抽象成下方的树--router</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;sys&#39;,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;user&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;role&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;org&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;menu&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;server&#39;,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;order&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;product&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line">&#x2F;&#x2F; 后台返回的用户权限的树-- menuTree</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;server&#39;,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;order&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;product&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line">&#x2F;&#x2F; 则我们需要遍历用户权限树，同时在路由的树中去寻找相同的.则我们在查找的时候选择的是深度遍历的方案。</span><br><span class="line">checkArr(menuTree,router)</span><br><span class="line">function checkArr(arr1,arr2)&#123;</span><br><span class="line">    let len &#x3D; arr2.length</span><br><span class="line">    for(let i&#x3D;0;i&lt;arr1.length;i++)&#123;</span><br><span class="line">        let obj &#x3D; arr1[i],notHas &#x3D; true</span><br><span class="line">        for(let j&#x3D;0;j&lt;len;j++)&#123;</span><br><span class="line">            if(arr2[j].path &#x3D;&#x3D;&#x3D; obj.path)&#123;</span><br><span class="line">                if(obj.children &amp;&amp; obj.children.length &amp;&amp; arr2[j].children)&#123;</span><br><span class="line">                    checkArr(obj.children,arr2[j].children)</span><br><span class="line">                &#125;else if(obj.children &amp;&amp; !arr2[j].children)&#123;</span><br><span class="line">                    arr1[i].children &#x3D; []</span><br><span class="line">                &#125;   </span><br><span class="line">                notHas &#x3D; false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(notHas)&#123;</span><br><span class="line">           arr1.splice(i,1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 经过遍历以后我们得到最后的路由，可以动态添加</span><br></pre></td></tr></table></figure>

<h2 id="返回为list的时候"><a href="#返回为list的时候" class="headerlink" title="返回为list的时候"></a>返回为list的时候</h2><p>当我们拿到列表结构的时候，这样则就可以利用广度优先的模式，可以更快更方便的找到路由对比，从而提高页面的运行速度。因为后台的存储在表中的是一条一条的数据，如果返回列表的话，减少树的组装时间，从而提高运行速度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 假设路由抽象成下方的树--router</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;sys&#39;,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;user&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;role&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;org&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;menu&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;server&#39;,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;order&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&#39;&#x2F;product&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line">&#x2F;&#x2F; 我们从后台获取为如下的内容 menuList</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;server&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;sys&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;user&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;org&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;&#x2F;order&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line">&#x2F;&#x2F; 我们选择遍历 得到最终的router，包含的则其has为true</span><br><span class="line">&#x2F;&#x2F; 当然这样子有一个缺点，在不同菜单下的菜单名称必须不能相同，如果不限制相同名称可以考虑增加lelev字段，进行判断当前所在的路由层级</span><br><span class="line">checkArr(menuList,router)</span><br><span class="line">function checkArr(arr1,arr2)&#123;</span><br><span class="line">    let len1 &#x3D; arr1.length,len2 &#x3D; arr2.length</span><br><span class="line">    for(let i &#x3D; 0;i&lt;len1,i++)&#123;</span><br><span class="line">        let obj &#x3D; arr1[i], stack &#x3D; JSON.parse(JSON.stringfy(arr2))</span><br><span class="line">        while (stack.length) &#123;</span><br><span class="line">            let item &#x3D; stack.shift()</span><br><span class="line">            let children &#x3D; item.children</span><br><span class="line">            for (let i &#x3D; 0; i &lt; children.length; i++) &#123;</span><br><span class="line">                stack.push(children[i])</span><br><span class="line">            &#125;</span><br><span class="line">            if(item.path &#x3D;&#x3D;&#x3D;  obj.path)&#123;</span><br><span class="line">                arr1[i][&#39;has&#39;] &#x3D; true</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 最后我们在遍历router，将不需要的删除掉。</span><br><span class="line">deleteArr(router)</span><br><span class="line">function deleteArr (arr)&#123;</span><br><span class="line">    for(let i &#x3D; 0;i&lt;arr.length,i++)&#123;</span><br><span class="line">        if(!arr[i].has)&#123;</span><br><span class="line">            arr[i].splice(i,1)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            deleteArr(arr[i].children)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实一直对广度优先和深度优先的算法有一点点的了解，但是在前端中应用的更多的还是深度优先，所以我们要多思考、多想。这样才能学以致用。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么说 Apple 的设计是魔鬼</title>
    <url>/2020/08/03/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4-apple-%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%98%AF%E9%AD%94%E9%AC%BC/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>Apple 致力于让每件产品都赏心悦目，与其说官网是产品展示平台，倒不如说它是苹果产品分支的延续。 我相信，从 <a href="https://www.uisdc.com/tag/app">App</a>le.com 找设计灵感是每一位<a href="https://www.uisdc.com/tag/%e8%ae%be%e8%ae%a1%e5%b8%88">设计师</a>都做过的事。那它到底有何魅力？跟我来一探究竟吧。</p>
<h4 id="沉浸与交互式体验"><a href="#沉浸与交互式体验" class="headerlink" title="沉浸与交互式体验"></a>沉浸与交互式体验</h4><p>每当有新产品发布时，我们都会被它的 Landing page 所吸引。不管是 AirPods Pro 也好，和前段时间发布的 iPad Pro 也一样。 这背后是 Apple 基于 webGL 技术，创造的一种沉浸与交互式产品体验。 <strong>1. 连续性</strong> 我们在产品介绍页可以看到，苹果使用了大量的滚动 scroll 来体现连续性。 一方面，滚动作为大多数 Web 用户最自然的操作，学习成本极低。 另一方面，在冗长的页面下，滚动能让产品特性保持更自然的转场衔接。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-10.gif" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ iPad Pro 的连续性 <strong>2. 趣味性</strong> 另外，采用了大量的动画式转换（animated transition），即操作时展示的动态效果，以此来增加趣味性。 伴随着丰富的、若隐若显的章节文案，就像电影的旁白一样，娓娓道来。 通过滚动的方式增加交互性，这是明智之举。试想一下，如果只放置已渲染的演示视频，那么用户的操作会受到限制，只能在视频中前进或后退，毫无乐趣可言。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-1.gif" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ AirPods 的趣味性</p>
<h4 id="言之有序"><a href="#言之有序" class="headerlink" title="言之有序"></a>言之有序</h4><p><strong>1. 秩序感</strong> 说到言之有序，我们看 iPad 的页面介绍。四款产品，分别是：iPad Pro、iPad Air、iPad、iPad mini。 拍摄角度的秩序感，可谓妙不可言。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-12.jpg" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ iPad 的秩序感</p>
<ul>
<li>  iPad Pro 的拍摄角度接近于正侧面。</li>
<li>  iPad Air 是四分之三侧面。</li>
<li>  iPad 是正面。</li>
<li>  iPad mini 是俯视。</li>
</ul>
<p>如此一来，既显得有序，也不会导致视觉疲劳。 <strong>2. 设计语言</strong> 其次，官网与 iOS 保持协同的设计语言，给用户呈现了一致的感官体验。 从 iOS 11 开始，苹果就采用了 Large Title 大标题的字体风格。字重也从 Regular + Light 的组合，转向的 Medium + Bold ，以此增强信息传播中的识别力。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-4.jpg" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ HomePod 另外，高斯模糊的标题栏背景、产品的投影等设计语言也保持系统一贯的风格。我们可以很清晰地看到 Web 设计的同步转变。</p>
<h4 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h4><p><strong>1. 视差</strong> 第三是视差带来的层次感。 苹果奉行包豪斯的无装饰和极简的理念。当然，它不是那种附庸的美观及外表的光鲜，而是将复杂难懂的技术以简洁的形式传达给用户。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-7.gif" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ Mac Pro 视差滚动 在信息层次方面，Apple 的编排设计由浅入深，犹如抽丝剥茧。很好地利用了视差滚动，传达图片与文字之间「层」的概念。这种深度感可以增加用户的理解和乐趣。 <strong>2. 视觉张力</strong> 不仅如此，样式上富有视觉张力。或扩张、或收缩、或吸引、或排斥之感觉，呈现刺激与震撼。举两个例子： <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-5.gif" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ A13芯片的扩张力 扩张力：整个画面以 A13 芯片为视觉中心点，元素和布局围绕这个视觉中心点向外扩张。采用发散式的视觉引导，视觉张力就出现了，让人感觉巍峨壮观。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-122.gif" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ Pro级摄像头的排斥力 排斥力：通过元素的大小对比，可以形成一定强度的视觉排斥力。Pro 级摄像头辅以大特写，传达空间意识。视觉上被其构图、美感触动。</p>
<h4 id="高级感"><a href="#高级感" class="headerlink" title="高级感"></a>高级感</h4><p>再聊聊苹果的高级感是怎么来的？ <strong>1. 视觉降噪</strong> 我们都知道，高饱和度的色彩，会影响人的情绪波动。相反，低饱和度的<a href="https://www.uisdc.com/tag/%e9%85%8d%e8%89%b2">配色</a>，对人眼的刺激较弱，会有一种冷静且克制的高级感。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-6.jpg" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ iMac Pro 高级感 回过头来看苹果官网的大部分页面，除了产品界面色彩和按钮栏之外，其他的文字、背景、控件一律采用黑白灰色系，以此营造高级感。 甚至是 iPhone 11 Pro 新出的暗夜绿，也是高级灰中加了一点点绿而已。 换言之，减少使用颜色的数量，降低色彩的饱和度都能削减色彩对人的情绪，起到提升产品高级感的效果。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-2.jpg" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ iPad 留白 除此之外，恰当的留白可以更加突出产品内容，让重要的信息更准确地传达。并且能营造出广阔的空间感，让画面得到延伸，呈现一种意境美。 所以我们做设计时应当多做减法，避免无意义的视觉元素堆砌，反而能让你的设计更有高级的气质。 这又印证了现代主义建筑大师密斯·凡德罗的那句话：Less Is More。 <strong>2. 配图</strong> 当然，只有留白是不够的。既然是做宣传，那么一份高分辨率、精致的配图就显得尤为重要。 苹果官网大部分的产品都是采用实拍+后期修图，而非渲染图。目的就是为了反映真实产品的质感、以及材质光影效果，这一点能看到苹果对于品质的极致追求。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-11.jpeg" alt="为什么说 Apple 的设计是魔鬼：网页篇"> <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-3.jpeg" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ Designed by Apple in California 不仅如此，苹果产品圣经《Designed by Apple in California》，以及壁纸同样是由摄影师拍摄完成。有兴趣的同学可以看下面这个幕后制作视频，相当硬核。 △ 苹果壁纸制作幕后 <strong>3. 苹果式文案</strong> 做过英文 Web 的设计师都知道，英文往往比中文更好设计，相同的布局英文出来的效果也更好看。 这不是崇洋媚外，心理学有个词叫做「母语羞涩」。简单来说就是，中文对于我们来说，太常见了会让人产生一种廉价感（实际上是羞涩感）的心理感受。 老外也一样，你可以看到美国企业：苹果、麦当劳、星巴克都是使用图形 Logo，而日本企业不用母语，而是用英文，比如 SONY、TOYOTA、Canon。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-8.jpg" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ 你的下一台电脑，何必是电脑。 回到苹果官网，我们看到一部分文案是英文产品名称，这个不会感觉羞涩。 那中文部分怎么办呢？比较有意思的是，Apple 的本土化团队用了完全不对仗但押韵、奇怪的排比、双关、重复等修辞手法。虽然语感很差，但基本上能明白字面意思。 其实这样做的目的就是为了创造一种陌生感、一种独特的语言风格，来凸品牌气质。举几个例子：</p>
<ul>
<li>  重复：比如说 iPad Pro「你的下一台电脑，何必是电脑。」</li>
<li>  双关：比如说 Apple Watch 的「它会时时关心你的心。」</li>
<li>  排比：比如说 iMac 的「从极速，到神速，任你提速。」</li>
<li>  押韵：比如说配件的「可重复充电，又可圈可点。」</li>
<li>  对比：比如说 iPad mini 的「身量小，能量大。」</li>
</ul>
<p><strong>4. 仪式感</strong> 最后一点。生活要有仪式感，苹果官网也有仪式感。 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-zx-20200531-9.jpg" alt="为什么说 Apple 的设计是魔鬼：网页篇"> △ 国际妇女节专题 在一些特殊的日子里，例如三八节当天，友商选择打广告促销。而苹果推出了国际妇女节专题，致敬女性的伟大，这一做法颇具人文情怀。 不过话又说回来，感动归感动，还是参与友商的打折活动香。</p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>今天影院复工，带你看2020电影海报大合集！</title>
    <url>/2020/07/21/%E4%BB%8A%E5%A4%A9%E5%BD%B1%E9%99%A2%E5%A4%8D%E5%B7%A5%EF%BC%8C%E5%B8%A6%E4%BD%A0%E7%9C%8B2020%E7%94%B5%E5%BD%B1%E6%B5%B7%E6%8A%A5%E5%A4%A7%E5%90%88%E9%9B%86%EF%BC%81/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h4 id="7月上映电影"><a href="#7月上映电影" class="headerlink" title="7月上映电影"></a>7月上映电影</h4><p><strong>1. 误杀</strong> 重映时间—7月20日 近年来难得一见的国产剧情好电影，单从海报上就可见一斑。 「看1000部电影」不能助你飞黄腾达，却能让你将世人的眼睛玩弄于股掌，既然生活是一部电影，那就没有什么是不能人为去<a href="https://www.uisdc.com/topic/%e5%89%aa%e8%be%91">剪辑</a>的。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-3.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 表面上束手就擒的一家人，实则齐心协力，暗度陈仓。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-4.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 如果你认为孩子画的案发现场，将成为如山铁证，那么恭喜你，人都还没进影院，就已经陷入了导演的叙事诡计。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-5.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>2. 第一次的离别</strong> 上映时间—7月20日 发生在新疆男孩与母亲间的温情故事，母亲患病无法言语，更时常离家出走，两小无猜的男孩女孩，毅然穿越漫漫黄沙，踏上寻母的道路。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-6.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 沙漠中，只要三个人影在孤独地行走路的尽头，究竟是与人别离，还是要跟童年别离，或许，二者都是。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-7.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>3. 璀璨薪火</strong> 上映时间—7月20日 作为非物质文化遗产纪录片的海报一只饱经风霜的粗糙的手，谈不上精妙创意，甚至颇有些质朴。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-8.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 但别忘了，正是这一双双沉稳的手，日复一日，年复一年守护着国人傲立世界的文化的骄傲。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-9.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>4. 妙先生</strong> 上映时间—7月31日 年度话题大作《大护法》的姊妹篇有关「善良」的深刻讨论，如果每次拯救恶人，都要牺牲好人，那这种所谓的拯救，究竟还值不值。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-10.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 温馨提示，内有大汉「聚众赏菊」是成年人画给成年人看的动画片。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-11.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>5. 呆瓜兄弟</strong> 上映时间—7月31日 从1976年开播的第一集就让观众捧腹大笑的木偶短片。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-12.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 40年后重聚的不光是这两只呆瓜更是荧幕前的观众与自己的童年。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-13.jpg" alt="今天影院复工，带你看2020电影海报大合集！"></p>
<h4 id="8月至12月上映电影"><a href="#8月至12月上映电影" class="headerlink" title="8月至12月上映电影"></a>8月至12月上映电影</h4><p><strong>1. 我想静静</strong> 上映时间—8月07日 号称「国内首部动物喜剧电影」海报却疑似「宠物店」素材打底。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-14.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 以上动物皆不会出现在电影中怕不光是「首部宠物喜剧」更是「首部魔幻现实主义作品」 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-15.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>2. 荞麦疯长</strong> 上映时间—8月25日 神似一年一度感动中国的构图展现着上世纪90年代，三个相互交织串联的青年人生。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-16.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 在人们热衷讨论00后、05后的当下导演将镜头对准70、80，在建的东方明珠，既是时代的挽歌也是对一代青年人美好未来的赞美。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-17.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>3. 我在时间尽头等你</strong> 上映时间—8月25日 偶然间获得的超能力让男主能够回到过去，挽救爱情却被命运捉弄，始终都不得圆满 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-18.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 与《时空恋旅人》同样的科幻题材海报当中，也有十分相似的一场雨，希望如同《流浪地球》，国人能再次拍出不输经典的高水准。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-19.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>4. 小妇人</strong> 上映时间—8月待定 女性可以柔弱，也可以拥有高傲的头颅南北战争中的四姐妹，在清苦生活中活出了不一样的坚强人生。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-20.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>5. 急先锋</strong> 上映时间—8月待定 角落里熊熊燃烧的美国核动力航母身后高耸入云的迪拜塔，没有一处不在透露着这是部大制作。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-21.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 从沙漠到瀑布，剧情搭不搭且不说至少光是海报就搭了不少真金白银。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-22.jpg" alt="今天影院复工，带你看2020电影海报大合集！"></p>
<h4 id="邻里美好的一天"><a href="#邻里美好的一天" class="headerlink" title="邻里美好的一天"></a>邻里美好的一天</h4><p>上映时间—8月待定 一心想揭露社会阴暗丑恶的新闻记者处处与人为善的老好人，矛盾的二者相遇，会是场何样的闹剧。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-23.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 上一秒促膝长谈，下一秒皮鞋横飞「邻里间的美好」或许本身就是伪命题。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-24.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>6. 许愿神龙</strong> 上映时间—8月待定 上海少年误打误撞唤醒沉睡神龙却发自己与龙有着上千年的代沟，西式画风，中式温情，一人一龙的冒险故事，值得一看。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-25.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <strong>7. 无名狂</strong> 上映时间—9月25日 一部诞生于摩点众筹的众筹电影片名叫《无名狂》，海报却写满了赞助的网友的名字。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-26.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 围绕万历年间两大刺客门派所展开的一场场腥风血雨，平静海报之下，山呼海啸，风雨欲来。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-27.jpg" alt="今天影院复工，带你看2020电影海报大合集！"></p>
<h4 id="尚未定档的电影"><a href="#尚未定档的电影" class="headerlink" title="尚未定档的电影"></a>尚未定档的电影</h4><p>除此之外，还有不少电影尚未排期，全年随时可能上映。其中自然也不缺乏优秀的海报创意，比如从路人视角，见证抗战历史的《八佰》。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-28.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 克味十足，容易联想到哈利波特系列的《刺杀小说家》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-29.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 单靠海报<a href="https://www.uisdc.com/tag/%e9%85%8d%e8%89%b2">配色</a>就能让人陷入迷惑的《抵达之谜》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-30.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 颇有08年阿迪达斯海报味道的《夺冠》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-32.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-31.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 用风卷云涌展现中式诸神之战的《封神三部曲》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-33.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 居然还能拍出第二部的《爵迹2》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-34.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 正看是海浪，倒看是山峦的《一直游到海水变蓝》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-35.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 近看是悬崖，远看是枪口的《悬崖之上》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-36.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 六小龄童老师参与动捕制作今年下半年…可能会上映的《真假美猴王》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-37.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 希望别播完片头就播staff名单的《一秒钟》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-38.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 能把牛顿从棺材里吓活过来的《神秘访客》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-39.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 进退两男、男上加男、满身大汉的《唐人街探案3》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-40.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 生死一线间淡定到面带微笑的《紧急救援》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-41.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 以及万众期待的封神宇宙大片《姜子牙》 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-my-20200719-42.jpg" alt="今天影院复工，带你看2020电影海报大合集！"> 好了，以上就是2020年将要上映以及可能上映的电影的海报大合集。看完了这些精彩的海报焦急的等待之情是否缓解了一些？ 倒也正应了那句老话，只要熬过低谷，后面都是更好的一天。</p>
]]></content>
      <categories>
        <category>新闻咨询</category>
      </categories>
  </entry>
  <entry>
    <title>你的灯亮着么读后感</title>
    <url>/2020/01/04/%E4%BD%A0%E7%9A%84%E7%81%AF%E4%BA%AE%E7%9D%80%E4%B9%88%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<p>读你的灯还亮着么一些感悟</p>
<a id="more"></a>
<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><pre><code>1、问题是什么？
2、这次的问题是什么？
3、问题到底是什么？
4、问题应该由谁来解决？
5、问题来自哪里
6、你真的想解决问题么？</code></pre>
<h2 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h2><pre><code>产品是什么？归根结底，产品是一个方便人们生活的一个工具，而作为一个工具，首要的就是要解决用户深受其害的一些问题。而怎么知道这些问题，是否这些问题是用户的真正问题，同时，解决了当前面临的这些问题，是否从根源上解决了用户的问题，而不是带来更多的问题，所以阅读这本你的灯还亮着么，让我们知道如何去认识问题，如何去了解问题的背后，如何去解决问题。
我做过需求对接，遇到过很多情况，有根本不清楚自己想做什么的，有只对最终产品有个模糊印象的，有强烈详细需求的，也有想解决当前问题的。
当我们面对形形色色的用户需求的时候，我觉得应该将用户分成不同的角色，只有站在不同的角色里，我们发现每个人遇到的问题可能是不一样的，也有很多方面的诉求是有冲突的。
同时我们也会发现站在不同的角色下，我们发现的问题是不一样的，有些问题只有在特定的角色下才会发现，而有可能特定角色下发现的问题往往是我们没有留意的，但是却会带给产品很大的弊端。
我们往往在面对问题的时候，总是想怎么去解决这个问题，但是我们需要先进行思考，这个问题的来源，这个问题是什么层面的问题，这样将有助于我们去真正的解决问题。
我们要明确解决问题的人是谁？很多问题有很多种解决办法，将问题交给那个角色去解决，才能完美的解决问题。
当我们在遇到问题的时候，我们应该第一时间从自己出发，将有利于我们去解决问题。</code></pre>
<h2 id="你的灯亮着么？"><a href="#你的灯亮着么？" class="headerlink" title="你的灯亮着么？"></a>你的灯亮着么？</h2><pre><code>在隧道的出口，交警想了很多标语牌，但是最终选择挂上“你的灯还亮着么？”这个警示牌，一句话，让司机去思考问题，去解决问题。一句话，让问题成为解决问题的关键，如果我们在做产品的时候，启发用户，让用户去想解决的办法，那么他更能知道自己的痛点所在，而我们将会更好的明白用户真正想要的是什么。</code></pre>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><pre><code>这是一本认识问题，查找问题，分析问题，解决问题的书，读的时间有点长了。暂时记下这一点点。以后有空再看看。</code></pre>
]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>全局性设计思维</title>
    <url>/2020/06/12/%E5%85%A8%E5%B1%80%E6%80%A7%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>从整个市场的协同发展，到产品形态的融合趋同。那么，我们的设计思维需要如何进行相应的变化？是同样进行“融合趋同”，还是另辟蹊径，寻求新的视角？ <strong>1.关键词提取</strong> 首先，不管设计思维如何变化，它一定需要同时满足两种产品设计思维的特性。通过前文的分析，我们可以在产品设计特性的维度，提取各自的关键词进行分析： <img src="https://img.zcool.cn/community/0172fb5ee06331a801206621b430b7.jpg"> <strong>产品体验：</strong>诞生于消费互联网时代的用户体验思维，在产业互联网时代依然是产品设计中最重要的部分。无论是C端还是B端产品，用户体验必然是产品的核心竞争力，只有足够好用、好看，产品才能获得更多用户，最终获得商业上的成功。 <strong>灵活性：</strong>在消费互联网时代，在激烈的竞争中，C端产品的灵活性的打法对于产品的突围至关重要。而未来的B端产品竞争将会加剧，这就需要B端产品也逐渐需要较强的灵活性。 <strong>成长性：</strong>产品的发展必将伴随着不断的变化，特别是具有一定体量之后，产品设计的成长性将至关重要。因此，产品的设计是否能够预见未来发展，满足不断变化的产品形态，伴随着产品不断地成长，也将成为产品是否能够持续获得成功的关键因素。 <strong>产品效率：</strong>因为产品服务对象的关系，B端产品一直是产品效率的代名词。而在人口红利消失与经济下行的压力下，产品效率将成为所有企业关注的重要因素之一。产品的效率不仅影响着企业的成本，也是产品竞争力的重要体现。 这四个关键词，将会是我们在未来所需要关注的四个重点关键词。越是往左，则“C”属性越强，因为它更多地从用户的角度出发，更关注用户体验。而越是往右，则“B”属性越强，因为它更多地从企业的角度出发，更关注企业的长期发展。 <strong>2.跳出单一层面，寻求新视角</strong> <strong>在四个关键词中，我们会发现，特性越是靠右，其所需要的整体性就越强。</strong>要满足灵活性，就需要用户体验与产品策略相关联。要满足成长性，则要进一步结合底层的开发能力。而产品效率的提升，则需要产品的设计与不同层面都有着紧密的耦合。 在互联网设计发展的过程中，我们从单点只关注视觉表层的“美工时代”，逐渐发展为关注线性的“用户体验思维”。在对于产品用户体验层面，确实有着长足的发展。 但是，单一层面的用户体验思维，在逐渐成熟的互联网时代中，逐渐显示出了一定的局限性。<strong>我们的价值局限于单一的体验层面，我们似乎无法对产品形成更大的影响力，也难以为产品带来体验之外的更多价值。</strong> <img src="https://img.zcool.cn/community/019b745ee06340a801215aa029df5e.jpg"> 因此，设计思维想要满足新时代的需求，就需要同时满足前文提到的四个关键词。这就要求我们需要跳出单一层面，以全局的维度去思考产品的设计。 <strong>因此，全局性将成为未来的关键，我暂且将这种思维方式称为——全局性设计思维。</strong></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>初学docker</title>
    <url>/2019/11/05/%E5%88%9D%E5%AD%A6docker/</url>
    <content><![CDATA[<p>自己搭建了gitlab和confluence，学习docker</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Docker系统有两个程序：docker服务端和docker客户端。其中docker服务端是一个服务进程，管理着所有的容器。docker客户端则扮演着docker服务端的远程控制器，可以用来控制docker的服务端进程。大部分情况下，docker服务端和客户端运行在一台机器上。<br>查看docker版本<code>$ docker version</code><br>搜索镜像 <code>docker search 镜像名字</code><br>下载镜像 <code>docker pull learn/tutorial</code><br>运行docker docker run命令有两个参数，一个是镜像名，一个是要在镜像中运行的命令。<br>查找运行的镜像 <code>docker ps -l</code> -a查找全部</p>
<h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># run用于指定镜像创建容器</span><br><span class="line">$ docker run [选项] &lt;镜像名称, id&gt; [命令] [参数]</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-d, --detach&#x3D;false 指定容器运行于前台还是后台，默认为false。</span><br><span class="line">-i, --interactive&#x3D;false 打开标准输入用于控制台交互</span><br><span class="line">-t, --tty&#x3D;false 分配tty设备用来支持终端登录，默认为false。</span><br><span class="line">-u, --user&#x3D;&quot;&quot; 指定容器的用户</span><br><span class="line">-a, --attach&#x3D;[] 登录容器，必须是以docker run -d启动的容器。</span><br><span class="line">-w, --workdir&#x3D;&quot;&quot; 设置容器的工作目录</span><br><span class="line">-c, --cpu-shares&#x3D;0 设置容器CPU权重，在CPU共享场景下使用。</span><br><span class="line">-e, --env&#x3D;[] 设置环境变量，容器中可使用该环境变量。</span><br><span class="line">-m, --memory&#x3D;&quot;&quot; 设置容器的内存上限</span><br><span class="line">-p, --public&#x3D;[] 设置容器暴露的端口</span><br><span class="line">-h, --hostname&#x3D;&quot;&quot; 设置容器的主机名</span><br><span class="line">-v, --volume&#x3D;[] 设置容器挂载的存储卷，也就是挂载到容器的某个目录。</span><br><span class="line">--volumn-from&#x3D;[] 给容器挂载其他容器上的卷，也就是挂载到容器的某个目录。</span><br><span class="line">--cap-add&#x3D;[] 添加权限</span><br><span class="line">--cap-drop&#x3D;[] 删除权限</span><br><span class="line">--cidfile&#x3D;&quot;&quot; 运行容器后在指定文件中写入容器PID值，这是典型的监控系统的用法。</span><br><span class="line">--cpuset&#x3D;&quot;&quot; 设置容器可以使用那些CPU，此参数用来设置容器独占CPU。</span><br><span class="line">--device&#x3D;[] 添加主机设备给容器，相当于设备直通。</span><br><span class="line">--dns&#x3D;[] 设置容器的DNS服务器</span><br><span class="line">--dns-search&#x3D;[] 设置容器的DNS搜索域名，写入到容器的&#x2F;etc&#x2F;resolv.conf文件。</span><br><span class="line">--env-file&#x3D;[] 设置环境变量文件，文件格式为每行一个环境变量。</span><br><span class="line">--expose&#x3D;[] 设置容器暴露的端口，即修改镜像的暴露端口。</span><br><span class="line">--link&#x3D;[] 设置容器之间的关联关系，使用其他容器的IP、env等信息。</span><br><span class="line">--lxc-conf&#x3D;[] 设置容器的配置文件，只有在指定--exe-driver&#x3D;lxc时使用。</span><br><span class="line">--name&#x3D;&quot;&quot; 设置容器的名称，可通过名字进行容器管理，links特性需要使用名字。</span><br><span class="line">--net&#x3D;&quot;bridge&quot; 容器网络设置</span><br><span class="line">--privileged&#x3D;false 设置容器是否为特权容器，特权容器拥有所有的capabilities。</span><br><span class="line">--restart&#x3D;&quot;no&quot; 设置让其停止后的重启策略</span><br><span class="line">--rm&#x3D;false 设置容器停止后自动删除容器，不支持以docker run -d启动的容器。</span><br><span class="line">--sig-proxy&#x3D;true 设置由代理接收并处理信号，但SIGCHLD、SIGSTOP、SIGKILL不能被代理。</span><br><span class="line"></span><br><span class="line"># 命令</span><br><span class="line">-d, --detach Detach模式，默认为守护进程模式，即容器以后台方式运行。</span><br><span class="line">--rm&#x3D;false 若容器内的进程终止则自动删除容器，禁止和-d选项一起使用。</span><br><span class="line">--sig-proxy&#x3D;true 将所有信号传递给进程，非TTY模式也一样，但不能传递SIGCHLD、SIGKILL、SIGSTOP信号。</span><br><span class="line"></span><br><span class="line"># 运行一个在后台执行的容器，同时使用控制台管理。</span><br><span class="line">$ docker run -i -t -d ubuntu:latest</span><br><span class="line"></span><br><span class="line"># 运行一个带命令且在后台不断执行的容器，不直接展示容器内部信息。</span><br><span class="line">$ docker run -d ubuntu:latest ping www.docker.com</span><br><span class="line"></span><br><span class="line"># 运行一个在后台不断执行的容器，同时带有命令，程序被终止后还能重启继续跑，可用控制台管理。</span><br><span class="line">$ docker run -d --restart&#x3D;always ubuntu:latest ping www.docker.com</span><br><span class="line"></span><br><span class="line"># 为容器指定一个名字</span><br><span class="line">$ docker run -d --name&#x3D;ubuntu_server ubuntu:latest</span><br><span class="line"></span><br><span class="line"># 容器暴露80端口并指定宿主机81端口与其通信（宿主机端口:容器端口）</span><br><span class="line">$ docker run -d --name&#x3D;ubuntu -p 81:80 ubuntu:latest</span><br><span class="line"></span><br><span class="line"># 指定容器内目录与宿主机目录共享（宿主机目录:容器目录）</span><br><span class="line">$ docker run -d --name&#x3D;ubuntu_server -v &#x2F;home&#x2F;www:&#x2F;var&#x2F;www ubuntu:latest</span><br><span class="line"></span><br><span class="line"># 设置宿主机与docker的共享目录</span><br><span class="line">$  docker run -d -i -t  -p 80:80 -v &#x2F;share&#x2F;swoft:&#x2F;var&#x2F;www&#x2F;swoft --name swoft swoft&#x2F;swoft &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>检查本地是否存在指定的镜像，若不存在则从公有仓库下载。<br>使用镜像创建并启动容器<br>分配一个文件系统，并在只读的镜像层外面挂载一层可读可写层。<br>从宿主机配置的网桥接口中桥接一个虚拟机接口到容器中去<br>从地址池分配一个IP地址给容器<br>执行用户指定的应用程序<br>执行完毕后容器被终止</p>
<h2 id="docker-start"><a href="#docker-start" class="headerlink" title="docker start"></a>docker start</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># start用于启动容器</span><br><span class="line">$ docker start &lt;选项&gt;&lt;容器名称, id&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-a, --attach&#x3D;false 将标准输入、标准输出、标准错误连接到容器，传递所有信号。</span><br><span class="line">-i, --interactive&#x3D;false 激活标准输入</span><br></pre></td></tr></table></figure>
<h2 id="docker-stop"><a href="#docker-stop" class="headerlink" title="docker stop"></a>docker stop</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># stop用于终止容器</span><br><span class="line">$ docker stop &lt;选项&gt;&lt;容器名称, id&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-t, --timeout&#x3D;10 设置终止容器前的等待时间，单位为秒。</span><br></pre></td></tr></table></figure>
<h2 id="docker-restart"><a href="#docker-restart" class="headerlink" title="docker restart"></a>docker restart</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># restart 用于重启容器</span><br><span class="line">$ docker restart [选项] &lt;容器名称, id&gt;</span><br></pre></td></tr></table></figure>
<h2 id="docker-pause"><a href="#docker-pause" class="headerlink" title="docker pause"></a>docker pause</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pause 用于暂停容器中所有的进程</span><br><span class="line">$ docker pause [选项] &lt;容器名称, id&gt;</span><br></pre></td></tr></table></figure>
<h2 id="docker-unpause"><a href="#docker-unpause" class="headerlink" title="docker unpause"></a>docker unpause</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># unpause用于重启使用pause命令暂停的容器</span><br><span class="line">$ docker unpause &lt;容器名称, id&gt;</span><br></pre></td></tr></table></figure>
<h2 id="docker-kill"><a href="#docker-kill" class="headerlink" title="docker kill"></a>docker kill</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kill用于杀掉一个运行中的容器，发送SIGKILL信号来停止的主进程。</span><br><span class="line">$ docker kill [选项] &lt;容器名称, id&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-s 向容器发送一个信号</span><br><span class="line"></span><br><span class="line"># 杀死运行中的容器nginx</span><br><span class="line">$ docker kill -s KILL nginx</span><br></pre></td></tr></table></figure>
<h2 id="docker-restart-1"><a href="#docker-restart-1" class="headerlink" title="docker restart"></a>docker restart</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># restart 用于重启容器</span><br><span class="line">$ docker restart [选项] &lt;容器名称, id&gt;</span><br></pre></td></tr></table></figure>
<h2 id="docker-rm"><a href="#docker-rm" class="headerlink" title="docker rm"></a>docker rm</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rm用于删除一个或多个容器</span><br><span class="line">$ docker rm [选项] &lt;容器名称,id&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-f 通过SIGKILL信号强制删除一个运行中的容器</span><br><span class="line">-l 移除容器间的网路连接而非容器本身</span><br><span class="line">-v 删除与容器关联的卷</span><br><span class="line"></span><br><span class="line"># 强制删除容器test</span><br><span class="line">$ docker rm -f test</span><br><span class="line"></span><br><span class="line"># 删除容器test并删除挂载的数据卷</span><br><span class="line">$ docke rm -v test </span><br></pre></td></tr></table></figure>
<h2 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># exec 用于在运行中的容器中执行命令</span><br><span class="line">$ docker exec [选项] &lt;容器名称, id&gt; &lt;命令&gt; [参数]</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-d 分离模式即在后台运行</span><br><span class="line">-i 即使没有附加也保持STDIN标准输入打开</span><br><span class="line">-t 分配一个伪终端</span><br><span class="line"></span><br><span class="line"># 在容器test中以交互模式执行容器内&#x2F;root&#x2F;test.sh脚本</span><br><span class="line">$ docker exec -it test &#x2F;bin&#x2F;sh &#x2F;root&#x2F;test.sh</span><br></pre></td></tr></table></figure>
<h2 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ps用于输出容器列表</span><br><span class="line">$ docker ps &lt;选项&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-a, --all&#x3D;false 列出所有容器，不带-a则输出当前正在运行的容器。</span><br><span class="line">--before&#x3D;&quot;&quot; 列出特定容器创建前的容器，包含停止的容器。</span><br><span class="line">-f, --filter&#x3D;[] 设置输出过滤</span><br><span class="line">-l, --latest&#x3D;false 列出最后创建的容器包含停止的容器</span><br><span class="line">-q, --quiet&#x3D;false 只输出容器的ID</span><br><span class="line"></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS   </span><br></pre></td></tr></table></figure>
<h2 id="docker-top"><a href="#docker-top" class="headerlink" title="docker top"></a>docker top</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># top用户显示容器中正在 运行的进程信息</span><br><span class="line">$ docker top &lt;容器名称, id&gt;&lt;ps选项&gt;</span><br><span class="line"></span><br><span class="line">$ docker top</span><br></pre></td></tr></table></figure>
<h2 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># attach 用于将标准输入与标准输出连接到正在运行的容器</span><br><span class="line">$ docker attach &lt;选项&gt;&lt;容器名称, id&gt;</span><br></pre></td></tr></table></figure>
<h2 id="docker-logs"><a href="#docker-logs" class="headerlink" title="docker logs"></a>docker logs</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># logs用于获取容器的日志</span><br><span class="line">$ docker logs [选项] &lt;容器名称,id&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-f 跟踪日志输出</span><br><span class="line">--since 显示某个开始时间的所有日志</span><br><span class="line">-t 显示时间戳</span><br><span class="line">--tail 仅仅列出最新n条容器日志</span><br><span class="line"></span><br><span class="line"># 跟踪查看test容器的日志</span><br><span class="line">$ docker logs -f test</span><br><span class="line"></span><br><span class="line"># 查看test容器从2019年4月1日以后的最新10条日志</span><br><span class="line">$ docker logs --since&#x3D;&quot;2019-04-01&quot; --tail&#x3D;10 test</span><br></pre></td></tr></table></figure>
<h2 id="docker-port"><a href="#docker-port" class="headerlink" title="docker port"></a>docker port</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># port用于列出指定容器的端口映射，或者用于查找将PRIVATE_PORT NAT到面向公众的端口。</span><br><span class="line">$ docker port [选项] &lt;容器名称,id&gt; [PRIVATE_PORT[&#x2F;PROTO]]</span><br><span class="line"></span><br><span class="line"># 查看test容器的端口映射情况</span><br><span class="line">$ docker port test</span><br></pre></td></tr></table></figure>

<h2 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># images用于输出镜像列表</span><br><span class="line">$ docker images &lt;选项&gt;&lt;镜像名称, id&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-a, --all&#x3D;false 列出所有镜像包含父镜像。</span><br><span class="line">-f, --filter&#x3D;[] 设置输出结果过滤，若设置为dangling&#x3D;true则仅输出无名镜像。</span><br><span class="line">--no-trunc&#x3D;false 显示所有因内容过长而省略的部分</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br></pre></td></tr></table></figure>

<h2 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rmi 用于删除镜像，若没有指定标签则会删除latest标签。</span><br><span class="line">$ docker rmi &lt;注册名称&gt;&#x2F;&lt;镜像名称, id&gt;:&lt;标签&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-f, --force&#x3D;false 强制删除镜像</span><br><span class="line">--no-prune&#x3D;false 不删除不带标签的父级镜像</span><br><span class="line"></span><br><span class="line"># 删除所有镜像</span><br><span class="line">$ docker rmi &#96;docker images -aq&#96;</span><br></pre></td></tr></table></figure>

<h2 id="docker-tag"><a href="#docker-tag" class="headerlink" title="docker tag"></a>docker tag</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tag用于设置镜像标签</span><br><span class="line">$ docker tag &lt;选项&gt;&lt;镜像名称&gt;:&lt;标签&gt;&lt;注册地址, 用户名&gt;&#x2F;&lt;镜像名称&gt;:&lt;标签&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">- f, --force&#x3D;false 强制设置，即使已拥有标签，如远程仓库设置标签。</span><br></pre></td></tr></table></figure>

<h2 id="docker-save"><a href="#docker-save" class="headerlink" title="docker save"></a>docker save</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># save用于将镜像保存为tag包文件</span><br><span class="line">$ docker save &lt;选项&gt;&lt;镜像名称&gt;:&lt;标签&gt;</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-o, --output&#x3D;&quot;&quot; 设置保存时的文件名称</span><br></pre></td></tr></table></figure>
<h2 id="docker-info"><a href="#docker-info" class="headerlink" title="docker info"></a>docker info</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># info用于显示当前系统信息、docker容器和镜像数量、设置等信息。</span><br><span class="line">$ docker info</span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 18.09.5</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: true</span><br><span class="line"> Native Overlay Diff: true</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: local</span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: bb71b10fd8f58240ca47fbb579b9d1028eea7c84</span><br><span class="line">runc version: 2b18fe1d885ee5083ef9f0838fee39b62d653e30</span><br><span class="line">init version: fec3683</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 4.14.111-boot2docker</span><br><span class="line">Operating System: Boot2Docker 18.09.5 (TCL 8.2.1)</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 1</span><br><span class="line">Total Memory: 989.4MiB</span><br><span class="line">Name: default</span><br><span class="line">ID: 7ST2:CIQM:GLVF:AUF2:QFKR:N2LB:FSO7:V6UJ:5IFN:MQVZ:WK7L:TGSS</span><br><span class="line">Docker Root Dir: &#x2F;mnt&#x2F;sda1&#x2F;var&#x2F;lib&#x2F;docker</span><br><span class="line">Debug Mode (client): false</span><br><span class="line">Debug Mode (server): false</span><br><span class="line">Registry: https:&#x2F;&#x2F;index.docker.io&#x2F;v1&#x2F;</span><br><span class="line">Labels:</span><br><span class="line"> provider&#x3D;virtualbox</span><br><span class="line">Experimental: false</span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0&#x2F;8</span><br><span class="line">Live Restore Enabled: false</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在docker  使用exec  进入容器  不要使用attach  因为他会退出后会导致stop<br>在docker中改配置文件，先将文件拷贝出来，修改后再copy回去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从主机复制到容器sudo docker cp host_path containerID:container_path</span><br><span class="line">从容器复制到主机sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>
<p>另一种方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名称   bash</span><br><span class="line">执行apt-get update，</span><br><span class="line">然后再次执行apt-get install vim即可成功安装vim。</span><br><span class="line">然后我们就可以使用vim编辑</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/afb20541d781">docker命令</a></p>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>在使用docker容器时，有时候里边没有安装vim，敲vim命令时提示说：vim: command not found，这个时候就需要安装vim，可是当你敲apt-get install vim命令时，提示：<br>Reading package lists… Done<br>Building dependency tree<br>Reading state information… Done<br>E: Unable to locate package vim<br>这时候需要敲：<code>apt-get update</code><br>，这个命令的作用是：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。<br>等更新完毕以后再敲命令：<code>apt-get install vim</code></p>
]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>初学react</title>
    <url>/2019/05/31/%E5%88%9D%E5%AD%A6react/</url>
    <content><![CDATA[<h2 id="react初步学习"><a href="#react初步学习" class="headerlink" title="react初步学习"></a>react初步学习</h2><p>react+react-router+redux+fetch+babel+webpack</p>
<a id="more"></a>
<p><a href="https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html">这篇文章写得很好</a></p>
<h3 id="react脚手架"><a href="#react脚手架" class="headerlink" title="react脚手架"></a>react脚手架</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装脚手架</span><br><span class="line">npm  install -g create-react-app</span><br><span class="line">&#x2F;&#x2F; 创建自己的项目</span><br><span class="line">create-react-app my-app</span><br><span class="line">&#x2F;&#x2F; 进入项目</span><br><span class="line">cd my-app</span><br><span class="line">&#x2F;&#x2F; 启动项目</span><br><span class="line">npm start</span><br><span class="line">&#x2F;&#x2F; 展开webpack配置文件，进行相关的打包优化及配置</span><br><span class="line">yarn eject</span><br><span class="line">&#x2F;&#x2F; script文件夹中进行打包的配置</span><br><span class="line">&#x2F;&#x2F; 在config中是关于webpack的配置</span><br></pre></td></tr></table></figure>
<h3 id="yarn-包工具"><a href="#yarn-包工具" class="headerlink" title="yarn 包工具"></a>yarn 包工具</h3><p>yarn config set registry 你的npm仓库</p>
<h3 id="react-生命周期"><a href="#react-生命周期" class="headerlink" title="react 生命周期"></a>react 生命周期</h3><h4 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h4><p>设置默认的props，也可以用dufaultProps设置组件的默认属性.</p>
<h4 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState"></a>getInitialState</h4><p>在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props</p>
<h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h4><p>组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</p>
<h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><p>react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</p>
<h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h4><p>组件渲染之后调用，只调用一次。</p>
<h4 id="componentWillReceiveProps-nextProps"><a href="#componentWillReceiveProps-nextProps" class="headerlink" title="componentWillReceiveProps(nextProps)"></a>componentWillReceiveProps(nextProps)</h4><p>组件初始化时不调用，组件接受新的props时调用。</p>
<h4 id="shouldComponentUpdate-nextProps-nextState"><a href="#shouldComponentUpdate-nextProps-nextState" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)"></a>shouldComponentUpdate(nextProps, nextState)</h4><p>react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候</p>
<h4 id="componentWillUpdate-nextProps-nextState"><a href="#componentWillUpdate-nextProps-nextState" class="headerlink" title="componentWillUpdate(nextProps, nextState)"></a>componentWillUpdate(nextProps, nextState)</h4><p>组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state，只能通过 nextState.name = ‘你想要更改的值’  的办法来改变</p>
<h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h4><p>组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p>
<h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h4><p>组件将要卸载时调用，一些事件监听和定时器需要在此时清除。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>// 配置proxy   package.json
&quot;proxy&quot;: &#123;
    &quot;^apis&quot;:&#123;
        &quot;target&quot;:&quot;http://xxx.xxx&quot;,
        &quot;changeOrigin&quot;:true
    &#125;
&#125;
// 配置css预处理less/sass
yarn add less-loader less --dev
yarn add sass-loader node-sass --dev
//  webpack.config.dev.js
  module: &#123;
    strictExportPresence: true,
    //...
    rules: [
        // ...
         &#123;
            test: /\.(css|less)$/, // 修改
            use: [
              require.resolve(&#39;style-loader&#39;),
              &#123;
                loader: require.resolve(&#39;css-loader&#39;),
                options: &#123;
                  importLoaders: 1,
                &#125;,
              &#125;,
              &#123;
                loader: require.resolve(&#39;postcss-loader&#39;),
                options: &#123;&#125;,
              &#125;,
              // 增加
              &#123;
                loader: require.resolve(&#39;less-loader&#39;) // compiles Less to CSS
              &#125;
            ],
          &#125;,
    ]

// webpack.config.prod.js
&#123;
    test: /\.(css|less)$/, // 修改
                loader: ExtractTextPlugin.extract(
              Object.assign(
                &#123;
                  fallback: &#123;
                    loader: require.resolve(&#39;style-loader&#39;),
                    options: &#123;
                      hmr: false,
                    &#125;,
                  &#125;,
                  use: [
                  // ...code
                    &#123;
                      loader: require.resolve(&#39;less-loader&#39;) // 增加
                    &#125;
                  ],
                &#125;,
                extractTextPluginOptions
              )
            ),


&#125;

// 别名 webpack.config.prod.js webpack.config.dev.js
alias: &#123;
      &#39;react-native&#39;: &#39;react-native-web&#39;,
        // +++ 加入配置
      &#39;@&#39;: resolve(&#39;src&#39;)
&#125;
// webpack.config.prod.js  去掉map文件
- devtool: shouldUseSourceMap ? &#39;source-map&#39; : false
// 改为
devtool: false,
// 修改端口号 node_modules/react-scripts/scripts/start.js中：把3000端口修改成自己想要的端口
// 模块热替换 
npm i react-hot-loader -D
webpack.config.dev.js中entry第一行增加`&#39;react-hot-loader/patch&#39;，
.babelrc
&#123;
  &quot;presets&quot;: [
    [&quot;es2015&quot;, &#123;&quot;loose&quot;: true&#125;],
    &quot;react&quot;
  ],
  &quot;plugins&quot;: [&quot;react-hot-loader/babel&quot;]
&#125;
// webpack.config.dev.js
&#123;
    test: /\.(js|jsx|mjs)$/,
    include: paths.appSrc,
    loader: require.resolve(&#39;babel-loader&#39;),
    options: &#123;

        // This is a feature of `babel-loader` for webpack (not Babel itself).
        // It enables caching results in ./node_modules/.cache/babel-loader/
        // directory for faster rebuilds.
        cacheDirectory: true,
        plugins: [
        &#39;react-hot-loader/babel&#39;
        ]
    &#125;,
&#125;,
// index.js
if (module.hot) &#123;
    module.hot.accept(&#39;./App&#39;, () =&gt; &#123; // 当我们热更新的代码出现的时候，把App重新加载
        const NextApp = require(&#39;./App&#39;).default //因为在App里使用的是export default语法，这里使用的是require,默认不会加载default的，所以需要手动加上
        render(NextApp) // 重新渲染到 document 里面
    &#125;)
&#125;</code></pre>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>初学typeScript</title>
    <url>/2019/07/30/%E5%88%9D%E5%AD%A6typeScript/</url>
    <content><![CDATA[<p>初学typeScript</p>
<a id="more"></a>
<h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><ul>
<li>any 声明为 any 的变量可以赋予任意类型的值</li>
<li>number  双精度 64 位浮点值。它可以用来表示整数和分数。</li>
<li>boolean</li>
<li>数组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在元素类型后面加上[]</span><br><span class="line">let arr: number[] &#x3D; [1, 2];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 或者使用数组泛型</span><br><span class="line">let arr: Array&lt;number&gt; &#x3D; [1, 2];</span><br></pre></td></tr></table></figure></li>
<li>元组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x: [string, number];</span><br><span class="line">x &#x3D; [&#39;Runoob&#39;, 1];    &#x2F;&#x2F; 运行正常</span><br><span class="line">x &#x3D; [1, &#39;Runoob&#39;];    &#x2F;&#x2F; 报错</span><br><span class="line">console.log(x[0]);    &#x2F;&#x2F; 输出 Runoob</span><br></pre></td></tr></table></figure></li>
<li>枚举<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum Color &#123;Red, Green, Blue&#125;;</span><br><span class="line">let c: Color &#x3D; Color.Blue;</span><br><span class="line">console.log(c);    &#x2F;&#x2F; 输出 2</span><br></pre></td></tr></table></figure></li>
<li>void<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function hello(): void &#123;</span><br><span class="line">    alert(&quot;Hello Runoob&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>null</li>
<li>undefined</li>
<li>never   never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。意味着声明为 never 类型的变量只能被 never 类型所赋值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x: never;</span><br><span class="line">let y: number;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 运行错误，数字类型不能转为 never 类型</span><br><span class="line">x &#x3D; 123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 运行正确，never 类型可以赋值给 never类型</span><br><span class="line">x &#x3D; (()&#x3D;&gt;&#123; throw new Error(&#39;exception&#39;)&#125;)();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 运行正确，never 类型可以赋值给 数字类型</span><br><span class="line">y &#x3D; (()&#x3D;&gt;&#123; throw new Error(&#39;exception&#39;)&#125;)();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 返回值为 never 的函数可以是抛出异常的情况</span><br><span class="line">function error(message: string): never &#123;</span><br><span class="line">    throw new Error(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 返回值为 never 的函数可以是无法被执行到的终止点的情况</span><br><span class="line">function loop(): never &#123;</span><br><span class="line">    while (true) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h2><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3>变量名称可以包含数字和字母。<br>除了下划线 _ 和美元 $ 符号外，不能包含其他特殊字符，包括空格。<br>变量名不能以数字开头。<br>四种方式来声明变量<br>var [变量名] : [类型] = 值;  声明变量的类型及初始值：<br>var [变量名] : [类型];    声明变量的类型及但没有初始值，变量值会设置为 undefined：<br>var [变量名] = 值;    声明变量并初始值，但不设置类型类型，该变量可以是任意类型：<br>var [变量名];    声明变量没有设置类型和初始值，类型可以是任意类型，默认初始值为 undefined：<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3>类型断言可以用来手动指定一个值的类型，即允许变量从一种类型更改为另一种类型。<br>&lt;类型&gt;值<br>值 as 类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str &#x3D; &#39;1&#39; </span><br><span class="line">var str2:number &#x3D; &lt;number&gt; &lt;any&gt; str</span><br></pre></td></tr></table></figure>
<h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3>当类型没有给出时，TypeScript 编译器利用类型推断来推断类型。<br>如果由于缺乏声明而不能推断出类型，那么它的类型被视作默认的动态 any 类型。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var num &#x3D; 2;    &#x2F;&#x2F; 类型推断为 number</span><br><span class="line">console.log(&quot;num 变量的值为 &quot;+num); </span><br><span class="line">num &#x3D; &quot;12&quot;;    &#x2F;&#x2F; 编译错误</span><br><span class="line">console.log(num);</span><br></pre></td></tr></table></figure>
<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3></li>
<li>全局作用域 − 全局变量定义在程序结构的外部，它可以在你代码的任何位置使用。</li>
<li>类作用域 − 这个变量也可以称为 字段。类变量声明在一个类里头，但在类的方法外面。 该变量可以通过类的对象来访问。类变量也可以是静态的，静态的变量可以通过类名直接访问。</li>
<li>局部作用域 − 局部变量，局部变量只能在声明它的一个代码块（如：方法）中使用。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var global_num &#x3D; 12          &#x2F;&#x2F; 全局变量</span><br><span class="line">class Numbers &#123; </span><br><span class="line">   num_val &#x3D; 13;             &#x2F;&#x2F; 类变量</span><br><span class="line">   static sval &#x3D; 10;         &#x2F;&#x2F; 静态变量</span><br><span class="line">   </span><br><span class="line">   storeNum():void &#123; </span><br><span class="line">      var local_num &#x3D; 14;    &#x2F;&#x2F; 局部变量</span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line">console.log(&quot;全局变量为: &quot;+global_num)  </span><br><span class="line">console.log(Numbers.sval)   &#x2F;&#x2F; 静态变量</span><br><span class="line">var obj &#x3D; new Numbers(); </span><br><span class="line">console.log(&quot;类变量: &quot;+obj.num_val)</span><br><span class="line">&#x2F;&#x2F; 全局变量为: 12</span><br><span class="line">&#x2F;&#x2F; 10</span><br><span class="line">&#x2F;&#x2F; 类变量: 13</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="类型运算符"><a href="#类型运算符" class="headerlink" title="类型运算符"></a>类型运算符</h2><p>typeof 运算符</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>在 TypeScript 函数里，如果我们定义了参数，则我们必须传入这些参数，除非将这些参数设置为可选，可选参数使用问号标识 ？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function buildName(firstName: string, lastName: string) &#123;</span><br><span class="line">    return firstName + &quot; &quot; + lastName;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">let result1 &#x3D; buildName(&quot;Bob&quot;);                  &#x2F;&#x2F; 错误，缺少参数</span><br><span class="line">let result2 &#x3D; buildName(&quot;Bob&quot;, &quot;Adams&quot;, &quot;Sr.&quot;);  &#x2F;&#x2F; 错误，参数太多了</span><br><span class="line">let result3 &#x3D; buildName(&quot;Bob&quot;, &quot;Adams&quot;);         &#x2F;&#x2F; 正确</span><br><span class="line"></span><br><span class="line">function buildName(firstName: string, lastName?: string) &#123;</span><br><span class="line">    if (lastName)</span><br><span class="line">        return firstName + &quot; &quot; + lastName;</span><br><span class="line">    else</span><br><span class="line">        return firstName;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">let result1 &#x3D; buildName(&quot;Bob&quot;);  &#x2F;&#x2F; 正确</span><br><span class="line">let result2 &#x3D; buildName(&quot;Bob&quot;, &quot;Adams&quot;, &quot;Sr.&quot;);  &#x2F;&#x2F; 错误，参数太多了</span><br><span class="line">let result3 &#x3D; buildName(&quot;Bob&quot;, &quot;Adams&quot;);  &#x2F;&#x2F; 正确</span><br></pre></td></tr></table></figure>
<p>我们也可以设置参数的默认值，这样在调用函数的时候，如果不传入该参数的值，则使用默认参数，语法格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function function_name(param1[:type],param2[:type] &#x3D; default_value) &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：参数不能同时设置为可选和默认。<br>有一种情况，我们不知道要向函数传入多少个参数，这时候我们就可以使用剩余参数来定义。剩余参数语法允许我们将一个不确定数量的参数作为一个数组传入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function buildName(firstName: string, ...restOfName: string[]) &#123;</span><br><span class="line">    return firstName + &quot; &quot; + restOfName.join(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">let employeeName &#x3D; buildName(&quot;Joseph&quot;, &quot;Samuel&quot;, &quot;Lucas&quot;, &quot;MacKinzie&quot;);</span><br></pre></td></tr></table></figure>
<p>TypeScript 也支持使用 JavaScript 内置的构造函数 Function() 来定义函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myFunction &#x3D; new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a * b&quot;); </span><br><span class="line">var x &#x3D; myFunction(4, 3); </span><br><span class="line">console.log(x);</span><br></pre></td></tr></table></figure>
<p>重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 参数类型不同：</span><br><span class="line">function disp(string):void; </span><br><span class="line">function disp(number):void;</span><br><span class="line">&#x2F;&#x2F; 参数数量不同：</span><br><span class="line">function disp(n1:number):void; </span><br><span class="line">function disp(x:number,y:number):void;</span><br><span class="line">&#x2F;&#x2F; 参数类型顺序不同：</span><br><span class="line">function disp(n1:number,s1:string):void; </span><br><span class="line">function disp(s:string,n:number):void;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>TS</tag>
      </tags>
  </entry>
  <entry>
    <title>制作字体图标</title>
    <url>/2019/05/30/%E5%88%B6%E4%BD%9C%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<h3 id="制作字体图标"><a href="#制作字体图标" class="headerlink" title="制作字体图标"></a>制作字体图标</h3><p>主要讲了怎么利用svg制作属于自己的字体图标，适合结合公司UI制作一套自己公司的图标</p>
<a id="more"></a>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><a href="https://icomoon.io/app/#/select">https://icomoon.io/app/#/select</a><br>1、打开上述网站，然后选择导入图标，导入自己的SVG文件<br>2、选择你上传的图标<br>3、点击generatate font<br>4、勾选选项，起名字以及一些支持IE等选项<br>5、下载，文件中包含案列及使用方法，以及各种字体的文件<br>6、根据Dome使用字体图标</p>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>在icon-font 阿里字体图标库中建立团队  直接下载</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>方法一（推荐）：<br>1、打开<a href="https://www.iconfont.cn/collections/detail?cid=17151%EF%BC%8C%E6%B7%BB%E5%8A%A0%E6%83%B3%E8%A6%81%E7%9A%84%E5%9B%BE%E6%A0%87%E5%88%B0%E8%B4%AD%E7%89%A9%E8%BD%A6%EF%BC%8C%E7%82%B9%E5%87%BB%E8%B4%AD%E7%89%A9%E8%BD%A6%E7%84%B6%E5%90%8E%E6%B7%BB%E8%87%B3%E9%A1%B9%E7%9B%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E7%A1%AE%E5%AE%9A">https://www.iconfont.cn/collections/detail?cid=17151，添加想要的图标到购物车，点击购物车然后添至项目，点击确定</a></p>
<p>研发 &gt; iconfont在vue项目中的使用 &gt; icon1.png</p>
<p>2、点击图标管理/我的项目，找到对应的文件，点击Unicode，然后生成在线链接</p>
<p>研发 &gt; iconfont在vue项目中的使用 &gt; icon3.png</p>
<p>3、新建iconfont.css文件，把在线生成的代码粘贴复制进去即可</p>
<p>4、定义使用iconfont样式，把下面的代码复制到iconfont.css里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.iconfont &#123;</span><br><span class="line">  font-family: &quot;iconfont&quot; !important;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  font-style: normal;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、在main.js中import css，</p>
<p>在index.html中写作这样<link rel="stylesheet" href="//at.alicdn.com/t/font_xxxx_xxxx.css"></p>
<p>在mian.js中import则会提示我npm install这个地址，否则图标则完全不显示</p>
<p>6、在页面中使用图标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;iconfonticon-pro-success&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure>

<p>方法二：<br>1、打开<a href="https://www.iconfont.cn/collections/detail?cid=17151%EF%BC%8C%E6%B7%BB%E5%8A%A0%E6%83%B3%E8%A6%81%E7%9A%84%E5%9B%BE%E6%A0%87%E5%88%B0%E8%B4%AD%E7%89%A9%E8%BD%A6%EF%BC%8C%E7%82%B9%E5%87%BB%E8%B4%AD%E7%89%A9%E8%BD%A6%E7%84%B6%E5%90%8E%E6%B7%BB%E8%87%B3%E9%A1%B9%E7%9B%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E7%A1%AE%E5%AE%9A">https://www.iconfont.cn/collections/detail?cid=17151，添加想要的图标到购物车，点击购物车然后添至项目，点击确定</a></p>
<p>研发 &gt; iconfont在vue项目中的使用 &gt; icon1.png</p>
<p>2、到我的项目里点击下载到本地</p>
<p>研发 &gt; iconfont在vue项目中的使用 &gt; icon4.png</p>
<p>3、在vue项目assets文件夹下新建一个iconfont文件夹，将刚刚下载下来的代码包中的iconfont.css、iconfont.eto、iconfont.svg、iconfont.ttf、iconfont.woff复制到iconfont文件夹下。</p>
<p>研发 &gt; iconfont在vue项目中的使用 &gt; icon5.png</p>
<p>4、在main.js全局变量中引入iconfont.css</p>
<p>研发 &gt; iconfont在vue项目中的使用 &gt; icon6.png</p>
<p>5、在页面中使用刚下载的图标</p>
<p>研发 &gt; iconfont在vue项目中的使用 &gt; icon7.png</p>
]]></content>
      <categories>
        <category>工具方法</category>
      </categories>
      <tags>
        <tag>ICON</tag>
      </tags>
  </entry>
  <entry>
    <title>动效趋势</title>
    <url>/2020/07/16/%E5%8A%A8%E6%95%88%E8%B6%8B%E5%8A%BF/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>在技术和商业的驱动下，「动态化设计」开始蔓延到各个设计领域，从 LOGO 、 UI到大型运营活动，动画一直以别具一格的方式活跃在设计舞台。富有创造力的<a href="https://www.uisdc.com/tag/%e5%8a%a8%e6%95%88%e8%ae%be%e8%ae%a1">动效设计</a>可以使信息更快更准确地传达给受众、强化用户的视觉感受。</p>
<h5 id="1-循环动效"><a href="#1-循环动效" class="headerlink" title="1. 循环动效"></a>1. 循环动效</h5><p>魔性的循环动效，非常符合当下的传播特性。对于运营、品牌广告而言，循环动效能赋予其趣味性，让用户更加沉浸地去了解相关信息。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-tx-20200714-4.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：运营篇"> <strong>「案例解析 」</strong> 以下是设计师和OMEGA合作的一个案例，无限循环的3D动画结合OMEGA精准的计时功能，让整个画面严谨却不失趣味，给观者带来无限的想象空间，也让受众更加关注画面中所推荐的产品。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-tx-20200714-1.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：运营篇"></p>
<h5 id="2-微动效"><a href="#2-微动效" class="headerlink" title="2. 微动效"></a>2. 微动效</h5><p>微动效不只增强了插图的氛围，同时让产品信息更易于理解和记忆。微动效时长短，用户在精力有限的情况下，去接受作品所花费的时间成本也会较少。相对于静态设计作品，微动效设计传播速度会更快更具有优势。 <strong>「案例解析 」</strong> 在《\\WAVES – (in motion) season one》活动中，把看到的内容动态音乐化，所有内容音乐化后的形态构成了主题播放列表中心和视觉庆典，每一件艺术品都是献给一首歌曲、一张专辑或一个播放列表的，通过微动效营造趣味和记忆点。以下是2020年3月至5月期间发布的精选动态音乐化内容。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-tx-20200714-2.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：运营篇"></p>
<h5 id="3-一镜到底"><a href="#3-一镜到底" class="headerlink" title="3. 一镜到底"></a>3. 一镜到底</h5><p>一镜到底的形式是当下热门的一种营销玩法之一，通常在h5页面中通过模仿镜头的拉伸，使得不同的画面元素陆续呈现在观众眼前，使体验充满故事感。 <strong>「案例解析 」</strong> 《德芙DoveⅩ故宫》H5中，设计师将现代与古代相结合，用长卷创意盘点了从清朝到现代的过年年俗场景，结合德芙品牌，利用仿镜头拉伸的样式将长卷呈现在观众面前，意指德芙把「宫里的福气传到千家万户」，这种表现手法让人眼前一亮，大大的冲击了观看者的视觉细胞。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-tx-20200714-23.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：运营篇"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>十种日期排版方式</title>
    <url>/2020/08/13/%E5%8D%81%E7%A7%8D%E6%97%A5%E6%9C%9F%E6%8E%92%E7%89%88%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>日期排版01</strong> 例如下面对于日期的排版，TIME这个文案有时候我们也可以去掉，因为用户看到时间就会明白这是什么，在一定的情况下也是可以去掉的，当然有时候为了整体页面的展示效果，我们也可以加上，便于排版，左边只是将年、月、日并排，时间节点作为一个点排列，下面的文案我们可以根据实际情况选择一些特殊的提示文案做装饰 而通过对左边简单的日期排版进行改版后，我们会发现右边的日期排版会显得更美观，排版更精妙，也有更多的细节之处，例如2020后紧接着年（YEAR)的提示，08后面标识是周六(SAT.），年月日和时间节点也同时做了层次区分，这样更有利于阅读。 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-1.jpg" alt="日期排版没灵感？我总结了10套排版案例"> <strong>日期排版02</strong> 对于上面同样的日期文案，我们还可以排出右边不同的样式，整体采用横排的方式，将年、月、日同排，时间段缩小处理，使时间之间也能有层次感 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-2.jpg" alt="日期排版没灵感？我总结了10套排版案例"> <strong>日期排版03</strong> 下面的日期是年、日期段、时间段的组合，左边的排版显然是比较常规的分层排版，却主要突出了2020，而一般时间我们在这一年将要发生的事，我们更关心的是哪一天那个时间点，而右边的排版主要突出时间段/点，更能让用户看到自己关心的事件。 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-3.jpg" alt="日期排版没灵感？我总结了10套排版案例"> <strong>日期排版04</strong> 下面这一组日期是有不同年份的，所以我们在排版的时候可以突出显示年份，这样在排版的时候就可以注意层级关系，排除层次感 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-4.jpg" alt="日期排版没灵感？我总结了10套排版案例"> <strong>日期排版05</strong> 这一组日期是比较简单的，只有一个时间点，没有时间段，如果直接按照左边这样的日期排版方式，显然整体看着就很单薄，把这样的日期排版方式融入到版式整体画面中，也一定会显得毫无设计感，而我们只需要将简单的日期经过简单的排版，从年、月、日、时，从上至下依次排列，这样就可以显得信息有层次感，并且阅读也不会有困惑，加上精致的<a href="https://www.uisdc.com/tag/icon">icon</a>做装饰，这样的日期排版就显得更耐看。 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-5.jpg" alt="日期排版没灵感？我总结了10套排版案例"> <strong>日期排版06</strong> 这一组日期也很简单，只有月、日、时，都是属于时间段的信息，通过分析这个时间，月都是10月，是相同的，所以我们可以将月份单独拿出来，作为共用信息，这样就可以精简画面重复的信息，依然采用月、日、时这样从上至下的顺序排列，时间小化，但是利用色块突出，也不会柔化时间点的阅读，再通过一条线的连接，将斜线和时间icon相连，形成一个有趣味性的时间装饰，这样的排版更容易吸引用户的眼球 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-6.jpg" alt="日期排版没灵感？我总结了10套排版案例"> <strong>日期排版07</strong> 下面的日期也是年、日期段、时间段的组合，和第三个日期排版的案例类似，所以存在同样的问题，左边的排版显然是比较常规的分层排版，却主要突出了2020，右边改版后，我们同样弱化年份（2020），提取相同的月份（8月），突出显示日期 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-7.jpg" alt="日期排版没灵感？我总结了10套排版案例"> <strong>日期排版08</strong> 这一个和第五个也是一样的，左边都是年、月、日、时的时间点，没有时间段，第五个我们是采用竖排的方式，而这里我们改版后采用的是横排的方式，突出显示月、日，让整体的层次更加清晰 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-8.jpg" alt="日期排版没灵感？我总结了10套排版案例"> <strong>日期排版09</strong> 下面这一组时间改版，我们主要采用错位竖排的方式，像这样的排版方式，我们可以多用于一些比较有设计感或者比较唯美的画面中，显得每一个小的点，都有用心设计，并且也符合这样的气质 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-9.jpg" alt="日期排版没灵感？我总结了10套排版案例"> <strong>日期排版10</strong> 这一组日期只有年、月、日。左右两边的排版看起来很相似，但是通过对细节的调整，例如2020的弱化，间距的把控，星期几的友好提示，这样就会使整个日期排版看起来更精细、耐看。 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-rq-20200811-10.jpg" alt="日期排版没灵感？我总结了10套排版案例"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>升级提示</title>
    <url>/2020/05/27/%E5%8D%87%E7%BA%A7%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install akbigdata-system-update</span><br></pre></td></tr></table></figure>
<p>vue中使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import SystemUpdate from &#39;akbigdata-system-update&#39;</span><br><span class="line"></span><br><span class="line">new SystemUpdate(&#123;show:false&#125;)</span><br></pre></td></tr></table></figure>
<p>普通使用引入js：引入包里的index.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var sys &#x3D; new SystemUpdate(&#123;show:false&#125;)</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line"></span><br><span class="line">show：是否显示</span><br><span class="line"></span><br><span class="line">sys .showEl()  显示升级页面</span><br><span class="line"></span><br><span class="line">sys .hideEl() 隐藏升级页面</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>变了！Adobe品牌标识迎来全面更新</title>
    <url>/2020/08/04/%E5%8F%98%E4%BA%86%EF%BC%81adobe%E5%93%81%E7%89%8C%E6%A0%87%E8%AF%86%E8%BF%8E%E6%9D%A5%E5%85%A8%E9%9D%A2%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>Adobe 官方宣布，Adobe 公司及其旗下产品的品牌标识即将全面更新。   <strong>Adobe公司Logo</strong> 自1993年以来，这个“A”字Logo就一直代表着Adobe。这次做了细微改动，主要是为了确保这个Logo可以适应更多的尺寸和所有平面。向单一颜色的全红Logo转变，标志性的红色获得更新，看起来更温暖、更有时代感。 <img src="https://img.sj33.cn/uploads/202005/0931442545-0.jpg" alt="变了！Adobe品牌标识迎来全面更新">   <strong>Adobe Creative Cloud</strong> 新的Creative Cloud标志将产品品牌的颜色和新的企业红色结合在一起，形成一个美丽的渐变色，代表了创意的重要性。还增加了Creative Cloud标志本身的比重，增加了辨识度和可看性。 <img src="https://img.sj33.cn/uploads/202005/09314415U-1.jpg" alt="变了！Adobe品牌标识迎来全面更新"> 还将使用颜色来归类区分产品，以确保用户可以轻松找到他们需要的产品，同时也对产品标志的颜色进行了优化。 <img src="https://img.sj33.cn/uploads/202005/09314414O-2.gif" alt="变了！Adobe品牌标识迎来全面更新"> Adobe Creative Cloud和所有的产品标志都将有圆角，并且取消了边框，这样系统可以灵活地适应产品可用于的操作系统和设备的范围。   <strong>Adobe Document Cloud</strong> 三叶形状标志是传达Document Cloud及相关产品的核心组成部分。IT之家获悉，今后，Adobe在所有产品中统一使用三叶形状标志，而背景板的颜色将用来区分具体产品。例如，Adobe Acrobat Reader 将在红色背景板上使用白色三叶形状标志，而 Adobe Scan 则在蓝色背景板上使用白色三叶形状标志。这种转变既传达了这些产品之间的联系，又使产品之间得以区分。 <img src="https://img.sj33.cn/uploads/202005/0931445516-3.jpg" alt="变了！Adobe品牌标识迎来全面更新"> 同时，还增加了三叶形状的比重，并取消了所有产品标识的边框并将其变为圆角。   <strong>Adobe Experience Cloud</strong> Experience Cloud的关注点是精简，于是直接从企业Logo中开发出了新的Logo。更新后的版本将Adobe Logo颜色翻转，并以全新的Adobe红色作为基调。 <img src="https://img.sj33.cn/uploads/202005/0931441054-4.jpg" alt="变了！Adobe品牌标识迎来全面更新"> Experience Cloud内的应用程序和服务也采用了类似的形式，在白色的底色上使用红色的 “A”。Experience Platform也沿用了这种方式，在深色底上做了一个红色的 “A”。一样的，所有的图标也都采用了圆角，没有边框。 <img src="https://img.sj33.cn/uploads/202005/0931442143-5.jpg" alt="变了！Adobe品牌标识迎来全面更新"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>启示录的笔记</title>
    <url>/2020/01/06/%E5%90%AF%E7%A4%BA%E5%BD%95%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>打造用户喜爱的产品，启示录这么说，我记下一些笔记，了解关于产品的方方面面</p>
<a id="more"></a>
<h2 id="产品经理"><a href="#产品经理" class="headerlink" title="产品经理"></a>产品经理</h2><p>评估产品机会、定义开发产品、探索解决方案<br>产品的特征和功能、产品的用户体验、产品的发布标准<br>5-10位开发配备一位产品经理<br>1位交互设计大师配备2位产品经理<br>1位视觉设计师支持4位交互设计师工作<br>超过10位开发参与的项目需要项目经理</p>
<p>工作紧迫感<br>善于扑捉问题<br>思路清晰<br>用数据说话<br>果断<br>判断力<br>态度</p>
<p>用户研究》》》交互设计》》》视觉设计》》》原型制作</p>
<h2 id="产品和开发"><a href="#产品和开发" class="headerlink" title="产品和开发"></a>产品和开发</h2><p>开发帮助产品<br>参与产品原型测试<br>开展头脑风暴，有新技术点可以运用在产品上<br>评估产品设计，协助策划方案</p>
<p>产品帮助开发<br>定义满足基本要求的产品<br>尽可能避免需求变更<br>尽快解决未考虑到的用例情况</p>
<p>如果产生需求变更（做法）<br>制定切实可行的计划和时间表<br>分块递增进行代码修改或重构<br>选择用户可见功能，确保产品定义的正确性</p>
<h2 id="品质"><a href="#品质" class="headerlink" title="品质"></a>品质</h2><p>对待产品热情<br>用户立场<br>智力（解决问题的能力）<br>职业操守<br>正直（要会处理产品、销售、高管、研发间的矛盾）<br>信心（要有说服力）<br>态度（克服种种困难）<br>技能<br>运用技术的能力（理解技术能力）<br>注意力（过滤多余的功能，缩短研发时间，降低生产成本）<br>时间管理（去完成真正重要的事情）<br>沟通管理（学会演讲及编写恰当的文档）<br>商业技能（成本结构、边际效应、市场份额、产品定位和品牌）</p>
<h2 id="产品总监"><a href="#产品总监" class="headerlink" title="产品总监"></a>产品总监</h2><p>组件优秀的产品经理团队<br>规划公司的全局产品战略，对产品组负责</p>
<ul>
<li>建设产品管理团队</li>
<li>规划公司的产品战略</li>
</ul>
<p>产品最重要的是提高用户满意度（NPS）这样才能有助于产品的快速推广。</p>
<h2 id="发现优秀的产品经理"><a href="#发现优秀的产品经理" class="headerlink" title="发现优秀的产品经理"></a>发现优秀的产品经理</h2><p>多和同事聊聊<br>走动式管理模式<br>认证倾听与会者的对话和发言<br>敞开大门，让大家知道你欢迎大家提出产品建议<br>坦率把你的烦恼告诉同事<br>一起娱乐</p>
<h2 id="管理上司"><a href="#管理上司" class="headerlink" title="管理上司"></a>管理上司</h2><p>为项目波动做好准备<br>注意沟通的方式和频率<br>会前沟通<br>多提建议少谈问题<br>向上司借力<br>充分准备<br>缩短邮件篇幅<br>多用数据和事实说话<br>内部宣传<br>做让领导省心的员工</p>
<h2 id="思考产品"><a href="#思考产品" class="headerlink" title="思考产品"></a>思考产品</h2><p>产品要解决什么问题？<br>为谁解决这些问题？<br>成功的机会有多大？<br>怎样判断产品成功与否？<br>有哪些同类产品？<br>为什么我们最适合做这个产品？<br>时机合适么？<br>如何把产品推广到市场？<br>成功的必要条件是什么？<br>根据以上问题得出的结论是什么？</p>
<h2 id="定义产品的原则"><a href="#定义产品的原则" class="headerlink" title="定义产品的原则"></a>定义产品的原则</h2><p>定义正确的产品<br>  定义==》开发==》 测试==》 发布<br>确定产品理念、制定团队最看重的价值理念<br>  要解决什么问题<br>  要为哪类人物角色解决这些问题<br>  产品要达到的目标<br>  每一项目标的优先级是什么</p>
<h2 id="用户重要性"><a href="#用户重要性" class="headerlink" title="用户重要性"></a>用户重要性</h2><p>易用性<br>响应速度<br>功能<br>成本<br>安全性<br>用户隐私</p>
<h2 id="里程碑"><a href="#里程碑" class="headerlink" title="里程碑"></a>里程碑</h2><p>评审产品战略和产品路线图，启动评估产品机会工作，选择值得投入精力的产品，请产品经理评估产品机会<br>根据评估产品机会的结果，决定是否开始定义产品解决方案<br>评审产品原型，用户测试结果，成本估算明细，决定是否开发产品<br>评审最终产品，产品品质，发布计划，社会效应，决定是否发布产品</p>
<h2 id="产品经理的做法"><a href="#产品经理的做法" class="headerlink" title="产品经理的做法"></a>产品经理的做法</h2><p>与用户充分的沟通<br>充分利用公司的资源<br>深入了解用户需求（简历特约用户）</p>
<p>市场调研<br>    用户调查<br>    产品使用分析<br>    数据挖掘<br>    拜访用户<br>    人物角色<br>    可用性测试<br>    同类产品分析</p>
<p>谁是目标客户<br>用户会怎样使用产品<br>用户能想明白怎样使用产品么？障碍在哪里？<br>用户为甚选用你的产品<br>用户喜欢产品的哪些特点<br>用户希望如何改进产品，增加哪些功能</p>
<h2 id="探索（定义产品的过程）"><a href="#探索（定义产品的过程）" class="headerlink" title="探索（定义产品的过程）"></a>探索（定义产品的过程）</h2><p>采用什么技术来更好的解决产品要解决的问题。<br>设计怎么样的用户体验。</p>
<p>成功的产品一定要做到<br>    深入裂解用户需求<br>    了解现阶段可行的解决方案</p>
<h2 id="产品管理核心"><a href="#产品管理核心" class="headerlink" title="产品管理核心"></a>产品管理核心</h2><p>抓住哪些机会<br>解决什么问题<br>哪些功能最有价值<br>谁是主要用户</p>
<p>而任务角色有助于以上（创建人物角色）</p>
<h2 id="产品说明文档"><a href="#产品说明文档" class="headerlink" title="产品说明文档"></a>产品说明文档</h2><p>完整的描述用户体验<br>准确的描述软件的行为<br>受众广泛，只管的方式吧产品信息和产品行为告诉所有人<br>可以修改，但是避免频繁的修改<br>有一个主题来代表产品，避免混淆不清，版本错乱</p>
<h2 id="高保真原型"><a href="#高保真原型" class="headerlink" title="高保真原型"></a>高保真原型</h2><p>功能需求<br>信息架构<br>用户体验<br>交互设计<br>视觉设计</p>
<p>产品和设计师合作设计产品的高保真原型，去定义基本产品<br>邀请开发检查设计原型并评估功能可行性与时间成本<br>邀请真实用户验证（测试）产品原型</p>
<h2 id="产品验证"><a href="#产品验证" class="headerlink" title="产品验证"></a>产品验证</h2><p>产品价值、可用性、可行性</p>
<p>可行性测试：验证产品在现有技术条件下是否可行<br>可用性测试：让不同类型的用户都明白如何使用<br>价值测试：是否愿意使用系统的功能</p>
<p>原型测试<br>    把产品创意呈现给真实用户<br>    物色测试者<br>    准备测试<br>    准备不同的测试环境<br>    开始原型测试<br>    更新原型</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>改进现有产品   不是一味的添加功能。<br>平滑部署 对版本更新等一定做通知等。<br>快速响应产品  尤其在发布以后时刻关注。</p>
<h2 id="合理运用敏捷方法"><a href="#合理运用敏捷方法" class="headerlink" title="合理运用敏捷方法"></a>合理运用敏捷方法</h2><p>传统的瀑布开发方法<br>    采用阶段式开发，开发过程分为固定的几个阶段，撰写需求说明文档，设计高层软件架构，设计底层细节，编写代码，测试部署<br>    采用阶段式评审，每个阶段结束后，进行评审，评审通过后进入下一阶段</p>
<h2 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h2><p>20%法则 预留20%时间去给团队去思考产品<br>在受限制的条件下，利用自己的时间低调的进行创新研究<br>倾听和观察室简单的创新途径<br>保证实现模型和概念模型一致<br>收购小公司</p>
<h2 id="在大公司"><a href="#在大公司" class="headerlink" title="在大公司"></a>在大公司</h2><p>了解公司决策的方式<br>建立人脉网略<br>臭鼬工程<br>自己顶上<br>有选择的据理力争<br>会前沟通，形成默契<br>合理的分配时间<br>分享信息<br>向上司借力<br>传播产品理念</p>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>硬件为软件服务<br>软件为用户体验服务<br>用户体验为情感服务<br>产品为真正的需求服务</p>
<p>拒绝特例产品</p>
<h2 id="用户需求"><a href="#用户需求" class="headerlink" title="用户需求"></a>用户需求</h2><p>看到具体的产品前，用户很难知道自己需要什么<br>用户不知道什么样的产品是可行的<br>用户缺乏沟通，需求很难统一</p>
<p>所以用户提出的需求不一定是真正的需求。</p>
<h2 id="成熟的市场的产品"><a href="#成熟的市场的产品" class="headerlink" title="成熟的市场的产品"></a>成熟的市场的产品</h2><p>运用新技术解决老问题<br>    对目标市场了如指掌，对现有产品更的缺陷洞若观火<br>    跟踪最新的技术趋势<br>做好交互设计和视觉设计</p>
<h2 id="产品依赖"><a href="#产品依赖" class="headerlink" title="产品依赖"></a>产品依赖</h2><p>情感是用户依赖产品的关键<br>大众的线下生活方式是产品的主要竞争对手</p>
<h2 id="用户分类"><a href="#用户分类" class="headerlink" title="用户分类"></a>用户分类</h2><p>技术爱好者<br>非理性消费者<br>理性消费者<br>超理性消费者<br>观望者</p>
<h2 id="大众网络服务产品"><a href="#大众网络服务产品" class="headerlink" title="大众网络服务产品"></a>大众网络服务产品</h2><p>可用性<br>人物角色<br>扩展性<br>持续可用性<br>客户服务<br>保护用户隐私<br>口碑营销<br>全球化<br>平滑部署<br>用户社区管理</p>
<h2 id="企业级产品"><a href="#企业级产品" class="headerlink" title="企业级产品"></a>企业级产品</h2><p>可用性<br>产品正常工作<br>拒绝特例产品<br>特约用户<br>销售渠道的需求<br>客户和用户的需求<br>产品安装<br>产品的配置，自定义、集成<br>产品升级<br>销售策略</p>
<h2 id="平台产品"><a href="#平台产品" class="headerlink" title="平台产品"></a>平台产品</h2><p>考虑 应用软件供应商<br>开发人员<br>终端用户</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>产品管理职责（营销管理和项目管理）<br>用户体验（与交互设计师和开发人员密切合作）<br>机会评估（解决什么问题，为谁解决问题，产品的标准）<br>特约用户（好的产品不断试用，不断改进）<br>产品原则<br>人物角色<br>探索定义产品<br>使用原型<br>用户参与测试<br>根据数据改进产品</p>
<h2 id="十大问题"><a href="#十大问题" class="headerlink" title="十大问题"></a>十大问题</h2><p> 产品能吸引目标消费者的关注么？<br> 产品设计是否人性化，是否易于操作？<br> 产品竞争力如何？在变化的市场中竞争力如何？<br> 是否了解目标用户，是否得到他们的认可？<br> 产品特色是什么，向公司高管、客户、行业分析师如何解释？<br> 产品能正常运行么？<br> 产品是否完整？用户印象？销售业绩？销售任务？<br> 产品特色是否鲜明且与目标用户一致？<br> 产品值钱么？用户是否选择更便宜的？<br> 团队怎么看这个产品？</p>
]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/2019/06/01/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="以canvas为例"><a href="#以canvas为例" class="headerlink" title="以canvas为例"></a>以canvas为例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义构造函数</span></span><br><span class="line"><span class="keyword">var</span> CanvasCommand = <span class="function"><span class="keyword">function</span>(<span class="params">domId</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//获取当前id的dom</span></span><br><span class="line">	<span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(domId),</span><br><span class="line">		ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>),</span><br><span class="line">		<span class="comment">//定义一些方法</span></span><br><span class="line">		Action = &#123;</span><br><span class="line">			<span class="comment">//填充色</span></span><br><span class="line">			fillStyle : <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">				ctx.fillStyle = c;</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//填充方块</span></span><br><span class="line">			fillRect : <span class="function"><span class="keyword">function</span>(<span class="params">x,y,width,height</span>)</span>&#123;</span><br><span class="line">				ctx.fillRect(x,y,width,height)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//描边色</span></span><br><span class="line">			strokeStyle : <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">				ctx.strokeStyle(c);</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//描边方块</span></span><br><span class="line">			strokeRect : <span class="function"><span class="keyword">function</span>(<span class="params">x,y,width,height</span>)</span>&#123;</span><br><span class="line">				ctx.strokeRect(x,y,width,height);</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//画文字</span></span><br><span class="line">			fillText : <span class="function"><span class="keyword">function</span>(<span class="params">text,x,y</span>)</span>&#123;</span><br><span class="line">				ctx.fillText(text,x,y)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//开始路径</span></span><br><span class="line">			beginPath : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				ctx.beginPath()</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//移动到</span></span><br><span class="line">			moveTo : <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">				ctx.moveTo(x,y)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//画直线</span></span><br><span class="line">			lineTo : <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">				ctx.lineTo(x,y)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//画孤线</span></span><br><span class="line">			arc : <span class="function"><span class="keyword">function</span>(<span class="params">x,y,r,begin,end,dir</span>)</span>&#123;</span><br><span class="line">				ctx.arc(x,y,r,begin,end,dir)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//填充</span></span><br><span class="line">			fill : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				ctx.fill()</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//描边</span></span><br><span class="line">			stroke : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				ctx.stroke()</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="comment">//返回的方法</span></span><br><span class="line">		excute : <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">			<span class="comment">//没有指令</span></span><br><span class="line">			<span class="keyword">if</span>(!msg) <span class="keyword">return</span>;</span><br><span class="line">			<span class="comment">//多个指令，逐个遍历</span></span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params">msg.length</span>)</span>&#123;</span><br><span class="line">				<span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span>;i&lt;msg.length;i++</span>)</span>&#123;</span><br><span class="line">					<span class="built_in">arguments</span>.callee(msg[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				msg.param = <span class="built_in">Object</span>.prototype.toString.call(msg.param) === <span class="string">&quot;[object Array]&quot;</span> ? msg.param : [msg.param];</span><br><span class="line">				Action[msg.command].apply(Action,msg.param);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化domId</span></span><br><span class="line"><span class="keyword">var</span> mycanvas = <span class="keyword">new</span> CanvasCommand(<span class="string">&quot;domId&quot;</span>);</span><br><span class="line"><span class="comment">//使用命令画图</span></span><br><span class="line">mycanvas.excute([</span><br><span class="line">	&#123;<span class="attr">command</span> : <span class="string">&#x27;fillStyle&#x27;</span>,<span class="attr">param</span> : <span class="string">&quot;red&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">command</span> : <span class="string">&#x27;fillRect&#x27;</span>,<span class="attr">param</span> : [<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">100</span>]&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>命名规范</title>
    <url>/2019/05/28/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p><code>(阿里BEM命名规范：https://segmentfault.com/a/1190000012705634)</code></p>
<a id="more"></a>
<p>由历史原因及个人习惯引起的 DOM 结构、命名不统一，导致不同成员在维护同一页面时，效率低下，迭代、维护成本极高。</p>
<h2 id="目录命名"><a href="#目录命名" class="headerlink" title="目录命名"></a>目录命名</h2><blockquote>
<ul>
<li>项目文件夹：projectname</li>
<li>样式文件夹：css</li>
<li>脚本文件夹：js</li>
<li>样式类图片文件夹：img</li>
</ul>
</blockquote>
<h2 id="图片顺序"><a href="#图片顺序" class="headerlink" title="图片顺序"></a>图片顺序</h2><p>图片命名建议以以下顺序命名：</p>
<p>图片业务（可选） +（mod_）图片功能类别（必选）+ 图片模块名称（可选） + 图片精度（可选）</p>
<p>图片业务：</p>
<blockquote>
<ul>
<li>pp_：拍拍</li>
<li>wx_：微信</li>
<li>sq_：手Q</li>
<li>jd_：京东商城</li>
</ul>
</blockquote>
<p>图片功能类别：</p>
<blockquote>
<ul>
<li>mod_：是否公共，可选</li>
<li>icon：模块类固化的图标</li>
<li>logo：LOGO类</li>
<li>spr：单页面各种元素合并集合</li>
<li>btn：按钮</li>
<li>bg：可平铺或者大背景</li>
</ul>
</blockquote>
<p>图片模块名称：</p>
<blockquote>
<ul>
<li>goodslist：商品列表</li>
<li>goodsinfo：商品信息</li>
<li>userava tar：用户头像</li>
</ul>
</blockquote>
<p>图片精度：</p>
<blockquote>
<ul>
<li>普清：@1x</li>
<li>Retina：@2x | @3x</li>
</ul>
</blockquote>
<p>如下面例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">公共模块：</span><br><span class="line">wx_mod_btn_goodlist@<span class="number">2</span>x.png</span><br><span class="line">wx_mod_btn_goodlist.png</span><br><span class="line">mod_btn_goodlist.png </span><br><span class="line"></span><br><span class="line">非公共模块：</span><br><span class="line">wx_btn_goodlist@<span class="number">2</span>x.png</span><br><span class="line">wx_btn_goodlist.png</span><br><span class="line">btn_goodlist.png</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="交叉业务协作"><a href="#交叉业务协作" class="headerlink" title="交叉业务协作"></a>交叉业务协作</h3><p>业务交叉协作的时候，为了避免图片命名冲突，建议图片名加上业务和模块前辍，如拍拍侧和手Q侧的业务交叉合作时，侧栏导航icon雪碧图命名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">推荐：</span><br><span class="line">pp_icon_mod_sidenav.png</span><br><span class="line"></span><br><span class="line">不推荐：</span><br><span class="line">icon_mod_sidenav.png</span><br></pre></td></tr></table></figure>
<p>处理高清图片的时候，命名应该加上图片相应的精度说明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">推荐：</span><br><span class="line">jdc_logo@<span class="number">1</span>x.png</span><br><span class="line">jdc_logo@<span class="number">2</span>x.png</span><br><span class="line"></span><br><span class="line">不推荐：</span><br><span class="line">jdc_logo.png</span><br><span class="line">jdc_logo_retina.png</span><br></pre></td></tr></table></figure>
<h2 id="HTML-CSS文件命名"><a href="#HTML-CSS文件命名" class="headerlink" title="HTML/CSS文件命名"></a>HTML/CSS文件命名</h2><p>确保文件命名总是以字母开头而不是数字，且字母一律小写，以下划线连接且不带其他标点符号，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">jdc.html</span><br><span class="line">jdc_list.html</span><br><span class="line">jdc_detail.html</span><br><span class="line"></span><br><span class="line">&lt;!-- SASS --&gt;</span><br><span class="line">jdc.scss</span><br><span class="line">jdc_list.scss</span><br><span class="line">jdc_detail.scss</span><br></pre></td></tr></table></figure>
<h2 id="ClassName命名"><a href="#ClassName命名" class="headerlink" title="ClassName命名"></a>ClassName命名</h2><p>ClassName的命名应该尽量精短、明确，必须以字母开头命名，且全部字母为小写，单词之间统一使用下划线 “_” 连接</p>
<h3 id="命名原则"><a href="#命名原则" class="headerlink" title="命名原则"></a>命名原则</h3><p>祖先模块不能出现下划线，除了是全站公用模块，如 mod_ 系列的命名：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">推荐：</span><br><span class="line">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class="line">		&lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;</span><br><span class="line">		...</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">	</span><br><span class="line">&lt;!-- 这个是全站公用模块，祖先模块允许直接出现下划线 --&gt;</span><br><span class="line">&lt;div class=&quot;mod_info&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;</span><br><span class="line">	...		</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">不推荐：</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;</span><br><span class="line">	...		</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>在子孙模块数量可预测的情况下，严格继承祖先模块的命名前缀</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div class=&quot;modulename_info&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>当子孙模块超过4级或以上的时候，可以考虑在祖先模块内具有识辨性的独立缩写作为新的子孙模块</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">推荐：</span><br><span class="line">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class="line">    	&lt;div class=&quot;modulename_info_user&quot;&gt;</span><br><span class="line">    		&lt;div class=&quot;modulename_info_user_img&quot;&gt;</span><br><span class="line">    			&lt;img src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    			&lt;!-- 这个时候 miui 为 modulename_info_user_img 首字母缩写--&gt;</span><br><span class="line">    			&lt;div class=&quot;miui_tit&quot;&gt;&lt;/div&gt;</span><br><span class="line">    			&lt;div class=&quot;miui_txt&quot;&gt;&lt;/div&gt;</span><br><span class="line">    			...</span><br><span class="line">    		&lt;/div&gt;</span><br><span class="line">    	&lt;/div&gt;</span><br><span class="line">    	&lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">不推荐：</span><br><span class="line">&lt;div class=&quot;modulename&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div class=&quot;modulename_info&quot;&gt;</span><br><span class="line">    	&lt;div class=&quot;modulename_info_user&quot;&gt;</span><br><span class="line">    		&lt;div class=&quot;modulename_info_user_img&quot;&gt;</span><br><span class="line">    			&lt;img src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    			&lt;div class=&quot;modulename_info_user_img_tit&quot;&gt;&lt;/div&gt;</span><br><span class="line">    			&lt;div class=&quot;modulename_info_user_img_txt&quot;&gt;&lt;/div&gt;</span><br><span class="line">    			...</span><br><span class="line">    		&lt;/div&gt;</span><br><span class="line">    	&lt;/div&gt;</span><br><span class="line">    	&lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="模块命名"><a href="#模块命名" class="headerlink" title="模块命名"></a>模块命名</h3><p>全站公共模块：以 mod_ 开头</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;mod_yours&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>业务公共模块：以 业务名<em>mod</em> 开头</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;paipai_mod_yours&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="常用命名推荐"><a href="#常用命名推荐" class="headerlink" title="常用命名推荐"></a>常用命名推荐</h3><p>注意：ad、banner、gg、guanggao 等有机会和广告挂勾的字眠不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;ad&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这种广告的英文或拼音类名不应该出现<br>另外，敏感不和谐字眼也不应该出现，如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;fuck&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;jer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;sm&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;gcd&quot;&gt;&lt;/div&gt; </span><br><span class="line">&lt;div class=&quot;ass&quot;&gt;&lt;/div&gt; </span><br><span class="line">&lt;div class=&quot;KMT&quot;&gt;&lt;/div&gt; </span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>ClassName</th>
<th align="right">含义</th>
</tr>
</thead>
<tbody><tr>
<td>about</td>
<td align="right">关于</td>
</tr>
<tr>
<td>account</td>
<td align="right">账户</td>
</tr>
<tr>
<td>arrow</td>
<td align="right">箭头图标</td>
</tr>
<tr>
<td>article</td>
<td align="right">文章</td>
</tr>
<tr>
<td>aside</td>
<td align="right">边栏</td>
</tr>
<tr>
<td>audio</td>
<td align="right">音频</td>
</tr>
<tr>
<td>avatar</td>
<td align="right">头像</td>
</tr>
<tr>
<td>bg,background</td>
<td align="right">背景</td>
</tr>
<tr>
<td>bar</td>
<td align="right">栏（工具类）</td>
</tr>
<tr>
<td>branding</td>
<td align="right">品牌化</td>
</tr>
<tr>
<td>crumb,breadcrumbs</td>
<td align="right">面包屑</td>
</tr>
<tr>
<td>btn,button</td>
<td align="right">按钮</td>
</tr>
<tr>
<td>caption</td>
<td align="right">标题，说明</td>
</tr>
<tr>
<td>category</td>
<td align="right">分类</td>
</tr>
<tr>
<td>chart</td>
<td align="right">图表</td>
</tr>
<tr>
<td>clearfix</td>
<td align="right">清除浮动</td>
</tr>
<tr>
<td>close</td>
<td align="right">关闭</td>
</tr>
<tr>
<td>col,column</td>
<td align="right">列</td>
</tr>
<tr>
<td>comment</td>
<td align="right">评论</td>
</tr>
<tr>
<td>community</td>
<td align="right">社区</td>
</tr>
<tr>
<td>container</td>
<td align="right">容器</td>
</tr>
<tr>
<td>content</td>
<td align="right">内容</td>
</tr>
<tr>
<td>copyright</td>
<td align="right">版权</td>
</tr>
<tr>
<td>current</td>
<td align="right">当前态，选中态</td>
</tr>
<tr>
<td>default</td>
<td align="right">默认</td>
</tr>
<tr>
<td>description</td>
<td align="right">描述</td>
</tr>
<tr>
<td>details</td>
<td align="right">细节</td>
</tr>
<tr>
<td>disabled</td>
<td align="right">不可用</td>
</tr>
<tr>
<td>entry</td>
<td align="right">文章，博文</td>
</tr>
<tr>
<td>error</td>
<td align="right">错误</td>
</tr>
<tr>
<td>even</td>
<td align="right">偶数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>fail</td>
<td align="right">失败（提示）</td>
</tr>
<tr>
<td>feature</td>
<td align="right">专题</td>
</tr>
<tr>
<td>fewer</td>
<td align="right">收起</td>
</tr>
<tr>
<td>field</td>
<td align="right">用于表单的输入区域</td>
</tr>
<tr>
<td>figure</td>
<td align="right">图</td>
</tr>
<tr>
<td>filter</td>
<td align="right">筛选</td>
</tr>
<tr>
<td>first</td>
<td align="right">第一个，常用于列表中</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>rules</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式布局</title>
    <url>/2020/05/22/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>响应式布局指的是同一页面在不同屏幕尺寸下有不同的布局。传统的开发方式是PC端开发一套，手机端再开发一套，而使用响应式布局只要开发一套就够，缺点就是CSS比较重。下面是博客网站对不同设备适配后的结果，分别是iPhone5/SE,iphone6/7/8,iphone 6/7/8 plus,ipad pro,dell台式宽屏(1440 X 900)。 响应式设计与自适应设计的区别：响应式开发一套界面，通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容；自适应需要开发多套界面，通过检测视口分辨率，来判断当前访问的设备是pc端、平板、手机，从而请求服务层，返回不同的页面。</p>
<h1 id="1-媒体查询"><a href="#1-媒体查询" class="headerlink" title="1. 媒体查询"></a><strong>1. 媒体查询</strong></h1><p>CSS3媒体查询可以让我们针对不同的媒体类型定义不同的样式，当重置浏览器窗口大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。 如何选择屏幕大小分割点 如何确定媒体查询的分割点也是一个开发中会遇到的问题， 选择600px,900px,1200px,1800px作为分割点、480px,800px,1400px,1400px 上面的分割方案不一定满足项目中的实际需求，我们可以先用跨度大的分割点进行分割，如果出现不适配的情况可以再根据实际情况增加新的分割点。 移动优先 OR  PC优先 不管是移动优先还是PC优先，都是依据当随着屏幕宽度增大或减小的时候，后面的样式会覆盖前面的样式。因此，移动端优先首先使用的是min-width，PC端优先使用的max-width。</p>
<h1 id="2-百分比布局"><a href="#2-百分比布局" class="headerlink" title="2.百分比布局"></a><strong>2.百分比布局</strong></h1><p>通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果。Bootstrap里面的栅格系统就是利用百分比来定义元素的宽高，CSS3支持最大最小高，可以将百分比和max(min)一起结合使用来定义元素在不同设备下的宽高。 子元素的height或width中使用百分比，是相对于子元素的直接父元素，width相对于父元素的width，height相对于父元素的height；子元素的top和bottom如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度，同样子元素的left和right如果设置百分比，则相对于直接非static定位(默认定位的)父元素的宽度；子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。跟padding一样，margin也是如此，子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width；border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度，除了border-radius外，还有比如translate、background-size等都是相对于自身的； 从上述对于百分比单位的介绍我们很容易看出如果全部使用百分比单位来实现响应式的布局，有明显的以下两个缺点： 计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。 各个属性中如果使用百分比，相对父元素的属性并不是唯一的。比如width和height相对于父元素的width和height，而margin、padding不管垂直还是水平方向都相对比父元素的宽度、border-radius则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。</p>
<h1 id="3-rem布局"><a href="#3-rem布局" class="headerlink" title="3.rem布局"></a><strong>3.rem布局</strong></h1><p>REM是CSS3新增的单位，并且移动端的支持度很高，Android2.x+,ios5+都支持。rem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的size发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。 因此，如果通过rem来实现响应式的布局，只需要根据视图容器的大小，动态的改变font-size即可（而em是相对于父元素的）。 rem响应式的布局思想： 一般不要给元素设置具体的宽度，但是对于一些小图标可以设定具体宽度值 高度值可以设置固定值，设计稿有多大，我们就严格有多大 所有设置的固定值都用rem做单位（首先在HTML总设置一个基准值：px和rem的对应比例，然后在效果图上获取px值，布局的时候转化为rem值) js获取真实屏幕的宽度，让其除以设计稿的宽度，算出比例，把之前的基准值按照比例进行重新的设定，这样项目就可以在移动端自适应了 rem布局的缺点： 在响应式布局中，必须通过js来动态控制根元素font-size的大小，也就是说css样式和js代码有一定的耦合性，且必须将改变font-size的代码放在css样式之前 /*上述代码中将视图容器分为10份，font-size用十分之一的宽度来表示，最后在header标签中执行这段代码，就可以动态定义font-size的大小，从而1rem在不同的视觉容器中表示不同的大小，用rem固定单位可以实现不同容器内布局的自适应。*/ REM布局也是目前多屏幕适配的最佳方式。默认情况下我们html标签的font-size为16px,我们利用媒体查询，设置在不同设备下的字体大小。</p>
<h1 id="4-视口单位"><a href="#4-视口单位" class="headerlink" title="4.视口单位"></a><strong>4.视口单位</strong></h1><p>css3中引入了一个新的单位vw/vh，与视图窗口有关，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。各个单位具体的含义如下： vw  相对于视窗的宽度，1vw 等于视口宽度的1%，即视窗宽度是100vw vh   相对于视窗的高度，1vh 等于视口高度的1%，即视窗高度是100vh vmin   vw和vh中的较小值 vmax   vw和vh中的较大值 用视口单位度量，视口宽度为100vw，高度为100vh（左侧为竖屏情况，右侧为横屏情况）。例如，在桌面端浏览器视口尺寸为650px，那么 1vw = 650 * 1% = 6.5px（这是理论推算的出，如果浏览器不支持0.5px，那么实际渲染结果可能是7px）。 使用视口单位来实现响应式有两种做法： 1.仅使用vw作为CSS单位 2.搭配vw和rem</p>
<h1 id="5-图片响应式"><a href="#5-图片响应式" class="headerlink" title="5.图片响应式"></a><strong>5.图片响应式</strong></h1><p>这里的图片响应式包括两个方面，一个就是大小自适应，这样能够保证图片在不同的屏幕分辨率下出现压缩、拉伸的情况；一个就是根据不同的屏幕分辨率和设备像素比来尽可能选择高分辨率的图片，也就是当在小屏幕上不需要高清图或大图，这样我们用小图代替，就可以减少网络带宽了。 1.使用max-width（图片自适应）: 图片自适应意思就是图片能随着容器的大小进行缩放 2.使用srcset    <img srcset="photo\_w350.jpg 1x, photo\_w640.jpg 2x" src="photo\_w350.jpg" alt=""> 3.使用background-image 4.使用picture标签</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>响应式布局的实现可以通过媒体查询+px,媒体查询+百分比，媒体查询+rem+js,vm/vh,vm/vh +rem这几种方式来实现。但每一种方式都是有缺点的，媒体查询需要选取主流设备宽度尺寸作为断点针对性写额外的样式进行适配，但这样做会比较麻烦，只能在选取的几个主流设备尺寸下呈现完美适配，另外用户体验也不友好，布局在响应断点范围内的分辨率下维持不变，而在响应断点切换的瞬间，布局带来断层式的切换变化，如同卡带的唱机般“咔咔咔”地一下又一下。通过百分比来适配首先是计算麻烦，第二各个属性中如果使用百分比，其相对的元素的属性并不是唯一的，这样就造成我们使用百分比单位容易使布局问题变得复杂。通过采用rem单位的动态计算的弹性布局，则是需要在头部内嵌一段脚本来进行监听分辨率的变化来动态改变根元素字体大小，使得CSS与JS 耦合了在一起。通过利用纯css视口单位实现适配的页面，是既能解决响应式断层问题，又能解决脚本依赖的问题的，但是兼容性还没有完全能结构接受。 响应式布局的成型方案 现在的css，UI框架等都已经考虑到了适配不同屏幕分辨率的问题，实际项目中我们可以直接使用这些新特性和框架来实现响应式布局。可以有以下选择方案： 利用上面的方法自己来实现，比如CSS3 Media Query,rem，vw等 Flex弹性布局，兼容性较差 Grid网格布局，兼容性较差 Columns栅格系统，往往需要依赖某个UI库，如Bootstrap 响应式布局的要点 在实际项目中，我们可能需要综合上面的方案，比如用rem来做字体的适配，用srcset来做图片的响应式，宽度可以用rem，flex，栅格系统等来实现响应式，然后可能还需要利用媒体查询来作为响应式布局的基础，因此综合上面的实现方案，项目中实现响应式布局需要注意下面几点： 设置viewport 媒体查询 字体的适配（字体单位） 百分比布局 图片的适配（图片的响应式） 结合flex，grid，BFC，栅格系统等已经成型的方案</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>回流和重绘</title>
    <url>/2019/06/10/%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98/</url>
    <content><![CDATA[<p>本文主要讲CSS的回流和重绘，从CSS提升页面性能</p>
<a id="more"></a>
<h3 id="图层的形成"><a href="#图层的形成" class="headerlink" title="图层的形成"></a>图层的形成</h3><ul>
<li>获取DOM后分割为多个图层</li>
<li>对每个图层的节点计算央视结果（recalculate style —样式重新计算）</li>
<li>为每个节点生成图形和位置（layout -回流和重布局）</li>
<li>为每个节点绘制填充到图层位图中（Paint Setup和Paint–重绘）</li>
<li>图层作为纹理上传至CPU</li>
<li>符合多个图层到页面上生成最终屏幕图像（图层重组）<h3 id="以下属性会导致生成一个图层"><a href="#以下属性会导致生成一个图层" class="headerlink" title="以下属性会导致生成一个图层"></a>以下属性会导致生成一个图层</h3>CSS 动画3D<br>video<br>canvas<br>webgl<br>flash<br>css过滤器<br>opacity<br>本身页面为一个图层<br>Z-index属性节点<br>（gif不会生成图层）<h3 id="chrome创建图层的条件"><a href="#chrome创建图层的条件" class="headerlink" title="chrome创建图层的条件"></a>chrome创建图层的条件</h3></li>
<li>3D或透视变换CSS属性</li>
<li>使用加速视频解码的vidoe节点</li>
<li>拥有3D webGL 或者2D  CANVAS</li>
<li>或者插件（如flash）</li>
<li>对一个元素做opacity或者webkit变换</li>
<li>拥有css过滤器的元素（filter、 blur等）</li>
<li>元素有一个包含复合层的后代节点</li>
<li>元素在复合层上渲染<h3 id="触发页面重布局的属性"><a href="#触发页面重布局的属性" class="headerlink" title="触发页面重布局的属性"></a>触发页面重布局的属性</h3></li>
<li>盒子模型相关属性</li>
<li>定位属性及浮动属性</li>
<li>改变节点内部文字结构<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">width height padding margin padding display border min-height</span><br><span class="line">border-width top bottom left right position float clear </span><br><span class="line">text-align overflow-y font-wight overflow font-family </span><br><span class="line">line-height vertical-align white-space font-size</span><br></pre></td></tr></table></figure>
<h3 id="触发页面重绘的属性"><a href="#触发页面重绘的属性" class="headerlink" title="触发页面重绘的属性"></a>触发页面重绘的属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">color border-style border-radius visiboly</span><br><span class="line">text-decoration background background-img background-position</span><br><span class="line">background-repeat background-size outline-style  outline-width boxshadow</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>图片规范</title>
    <url>/2019/05/30/%E5%9B%BE%E7%89%87%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="图片规范"><a href="#图片规范" class="headerlink" title="#图片规范"></a>#图片规范</h2><a id="more"></a>
<h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><hr>
<p>常见的图片格式有 GIF、PNG8、PNG24、JPEG、WEBP，根据图片格式的特性和场景需要选取适合的图片格式。</p>
<h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h3><blockquote>
<p>GIF图象是基于颜色列表的（存储的数据是该点的颜色对应于颜色列表的索引值），最多只支持8位（256色）。GIF文件内部分成许多存储块，用来存储多幅图象或者是决定图象表现行为的控制块，用以实现动画和交互式应用。GIF文件还通过LZW压缩算法压缩图象数据来减少图象尺寸</p>
</blockquote>
<p>特性</p>
<blockquote>
<ul>
<li>优秀的压缩算法使其在一定程度上保证图像质量的同时将体积变得很小。</li>
<li>可插入多帧，从而实现动画效果。</li>
<li>可设置透明色以产生对象浮现于背景之上的效果。</li>
<li>由于采用了8位压缩，最多只能处理256种颜色，故不宜应用于真彩色图片。</li>
</ul>
</blockquote>
<h3 id="png"><a href="#png" class="headerlink" title="png"></a>png</h3><blockquote>
<p>PNG是20世纪90年代中期开始开发的图像文件存储格式，其目的是企图替代GIF和TIFF文件格式，同时增加一些GIF文件格式所不具备的特性。流式网络图形格式(Portable Network Graphic Format，PNG)名称来源于非官方的“PNG’s Not GIF”，是一种位图文件(bitmap file)存储格式，读成“ping”。PNG用来存储灰度图像时，灰度图像的深度可多到16位，存储彩色图像时，彩色图像的深度可多到48位，并且还可存储多到16位的α通道数据。PNG使用从LZ77派生的无损数据压缩算法。</p>
</blockquote>
<p>特性</p>
<blockquote>
<ul>
<li>支持256色调色板技术，文件体积小。</li>
<li>无损压缩</li>
<li>最高支持48位真彩色图像以及16位灰度图像。</li>
<li>支持Alpha通道的透明/半透明特性。</li>
<li>支持图像亮度的Gamma校准信息。</li>
<li>支持存储附加文本信息，以保留图像名称、作者、版权、创作时间、注释等信息。</li>
<li>渐近显示和流式读写，适合在网络传输中快速显示预览效果后再展示全貌。</li>
<li>使用CRC防止文件出错。</li>
<li>最新的PNG标准允许在一个文件内存储多幅图像。</li>
</ul>
</blockquote>
<h3 id="JPEG"><a href="#JPEG" class="headerlink" title="JPEG"></a>JPEG</h3><blockquote>
<p>JPEG是一种针对照片视频而广泛使用的一种有损压缩标准方法。这个名称代表Joint Photographic Experts Group（联合图像专家小组）。此团队创立于公元1986年，1992年发布了JPEG的标准而在1994年获得了ISO 10918-1的认定</p>
</blockquote>
<p>特性</p>
<blockquote>
<ul>
<li>适用于储存24位元全采影像</li>
<li>采取的压缩方式通常为有损压缩</li>
<li>不支持透明或动画</li>
<li>压缩比越高影像耗损越大，失真越严重</li>
<li>压缩比在10左右肉眼无法辨出压缩图与原图的差别</li>
</ul>
</blockquote>
<h3 id="WEBP"><a href="#WEBP" class="headerlink" title="WEBP"></a>WEBP</h3><blockquote>
<p>WebP，是一种同时提供了有损压缩与无损压缩的图片文件格式，派生自视频编码格式 VP8，是由Google在购买On2 Technologies后发展出来。WebP最初在2010年发布，2011年11月8日，Google开始让WebP支持无损压缩和透明色的功能，而在2012年8月16日的参考实做libwebp 0.2.0中正式支持</p>
</blockquote>
<p>特性：</p>
<blockquote>
<ul>
<li>同时提供有损压缩和无损压缩两种图片文件格式</li>
<li>文件体积小，无损压缩后，比 PNG 文件少了 45％ 的文件大小；有损压缩后，比 JPEG 文件少了 25% - 34% 文件大小</li>
<li>浏览器兼容差，目前只支持客户端 Chrome 和 Opera 浏览器以及安卓原生浏览器(Andriod 4.0+)，WebP兼容性</li>
</ul>
</blockquote>
<h3 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h3><h4 id="内容图"><a href="#内容图" class="headerlink" title="内容图"></a>内容图</h4><p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p>
<blockquote>
<ul>
<li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li>
<li>尽量不使用PNG格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li>
</ul>
</blockquote>
<h4 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h4><p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p>
<blockquote>
<ul>
<li>PNG 与 GIF 格式，优先考虑使用 PNG 格式,PNG格式允许更多的颜色并提供更好的压缩率</li>
<li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式</li>
<li>图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式</li>
<li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li>
<li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li>
</ul>
</blockquote>
<h2 id="图片大小"><a href="#图片大小" class="headerlink" title="图片大小"></a>图片大小</h2><hr>
<p>中国普通家庭的宽带基本能达到8Mbps，实际速率大约为500—900KB/s，全国3G/4G用户占有比超过了50%，为了保证图片能更好地加载展示给用户看，团队约定：</p>
<p>PC平台单张的图片的大小不应大于 200KB。</p>
<p>移动平台单张的图片的大小不应大于 100KB。</p>
<h2 id="图片质量"><a href="#图片质量" class="headerlink" title="图片质量"></a>图片质量</h2><hr>
<blockquote>
<ul>
<li>上线的图片都应该经过压缩处理，压缩后的图片不应该出现肉眼可感知的失真区域</li>
<li>60质量的JPEG格式图片与质量大于60的相比，肉眼已看不出明显的区别，因此保存 JPEG 图的时候，质量一般控制在60，若保真度要求高的图片可适量提高到 80，图片大小控制在 200KB 以内</li>
</ul>
</blockquote>
<h2 id="图片引入"><a href="#图片引入" class="headerlink" title="图片引入"></a>图片引入</h2><hr>
<p>测试内容图应该写上表明图片尺寸的占位图，可以用线上占位图生成服务，如：</p>
<p><a href="http://placeholder.qiniudn.com/300x200">http://placeholder.qiniudn.com/300x200</a></p>
<p>HTML 中图片引入不需添加 width、height 属性，alt 属性应该写上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">推荐：</span><br><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;&quot;</span> &gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">不推荐：</span><br><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> width=<span class="string">&quot;&quot;</span> height=<span class="string">&quot;&quot;</span> &gt;</span><br></pre></td></tr></table></figure>
<p>CSS 中图片引入不需要引号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    background-image: url(icon.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CSS-Sprites-VS-Data-URIs"><a href="#CSS-Sprites-VS-Data-URIs" class="headerlink" title="CSS Sprites VS Data URIs"></a>CSS Sprites VS Data URIs</h3><h4 id="CSS-Sprites特点"><a href="#CSS-Sprites特点" class="headerlink" title="CSS Sprites特点"></a>CSS Sprites特点</h4><blockquote>
<ul>
<li>减少请求数</li>
<li>加速图片的显示</li>
<li>维护更新成本大</li>
<li>更多的内存消耗，特别是大体积或有过多空白的 Sprites 图</li>
<li>图片渗漏，相邻的不需展示的图片有可能出现在展示元素中，特别是在高清设备移动设备上</li>
</ul>
</blockquote>
<h4 id="Data-URIs（base64编码）"><a href="#Data-URIs（base64编码）" class="headerlink" title="Data URIs（base64编码）"></a>Data URIs（base64编码）</h4><blockquote>
<ul>
<li>减少请求数</li>
<li>转换文件体积大，大约比原始的二进制大33%</li>
<li>IE6 / IE7 不支持</li>
<li>图片显示相对较慢，需要更多的CPU消耗</li>
</ul>
</blockquote>
<h3 id="团队约定-1"><a href="#团队约定-1" class="headerlink" title="团队约定"></a>团队约定</h3><p>CSS Sprites 使用建议</p>
<blockquote>
<ul>
<li>适合使用频率高更新频率低的小图标</li>
<li>尽量不留太多的空白</li>
<li>体积较大的图片不合并</li>
<li>确保要合并的小图坐标数值和合并后的 Sprites 图尺寸均为偶数</li>
</ul>
</blockquote>
<p>Data URIs（base64编码）使用建议</p>
<blockquote>
<ul>
<li>适合更新频率高的小图片，如某些具备自定义功能的标题icon等</li>
<li>转换成 Base64 编码的图片应小于 2KB</li>
<li>移动端不使用 Base64 编码</li>
<li>要兼容 IE6/IE7 的不使用</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>rules</tag>
      </tags>
  </entry>
  <entry>
    <title>地摊经济的复苏</title>
    <url>/2020/06/04/%E5%9C%B0%E6%91%8A%E7%BB%8F%E6%B5%8E%E7%9A%84%E5%A4%8D%E8%8B%8F/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>说起地摊，相信不少人就会想起大街小巷上的各类美食，价格低廉的袜子，五花八门的小玩具。但随着城市化的发展，地摊经济一度消失了，尤其在一、二线城市里，宽敞干净的街道上，是完全看不到地摊痕迹的。今年全国“两会”期间，天津市杨宝玲提出了“地摊经济”建议，引起了人们的普遍共鸣。在我国经济急需复苏的情况下，地摊经济所具备的活力，能有效拉动内需。毕竟地摊经济最大的特点，就是方便实惠。人们需要特意跑一趟超市购买的商品，现在就在家门口摆着，价格也不贵，说买就买了。 <strong><strong>地摊经济一度消失，如今重启地摊经济，是倒退还是前进？</strong></strong> 实际上，地摊经济大多是小本生意，摆摊商贩通过售卖手中的商品获得收入来源，资金流动快，商贩能短时间回本；对于消费者而言，买地摊上的东西也更方便实惠。在疫情之后，我国也出现了一大批破产倒闭的企业和工厂，不少人处于待业状态。地摊经济的复苏，也将解决一部分人的就业问题。 但是过去取缔地摊，也并非没有原因。地摊经济的管理难度相当大，商贩们只要一辆小推车，就能四处游走，在路边摆摊营生，一方面影响市容市貌，另一方面流动性大，不便管理，因此无法合法合规化。 现在重提“地摊经济”，其实可以算是一个进步。只要能抓住老鼠就是好猫，同理，只要能复苏经济，即便是摆地摊，也能够合规化。可以摆地摊对于底层人民而言，相当于给他们了一条谋生之路。从近日来全国各个地摊经济形势的跟踪报道来看，目前地摊经济呈爆发式增长，各地市场开始“活”过来了。当然，地摊的大量出现，也将给城市管理带来一定的难度，但由于我国科技进步，如今地摊经济，也将进入大数据管理模式。 <strong><strong>地摊经济成时代新风口，互联网模式的新地摊格局出现</strong></strong> 此前，电商经济呈现一派欣欣向荣的景象，但是地摊经济的复苏，将会对电商经济造成空前打击。2020年之后，地摊经济或将成为我国经济发展的新风口，谁把握住这个机会，不仅能发家致富，说不准还能成为下一个“马云”。 地摊经济的特点在于，成本低，没有昂贵的广告费和租赁费，也不需要长周期的手续认证，只要有手艺，有产品，人人都能做。 地摊经济的监管问题，将由互联网来解决。相较于以往简单粗放的地摊经济，如今融入互联网监管后，将变得有序合理化。现在摊贩使用的扫码支付，让地摊经营的每个环节和交易信息都有迹可循，给管理带来了极大便利。 除此之外，登记地摊经营者信息，使他们合法合规的监管模式也在推进，未来监管部门，完全可以根据录入的信息，通过互联网，追踪地摊经营者的位置和经营状况。 重新摆上地摊的城市，已经开始热闹起来了。</p>
]]></content>
      <categories>
        <category>新闻咨询</category>
      </categories>
  </entry>
  <entry>
    <title>埋点</title>
    <url>/2019/07/03/%E5%9F%8B%E7%82%B9/</url>
    <content><![CDATA[<p>本文主要讲了对埋点的一些学习。</p>
<a id="more"></a>
<h2 id="埋点sdk"><a href="#埋点sdk" class="headerlink" title="埋点sdk"></a>埋点sdk</h2><ul>
<li>自主研发（大公司的必经之路）</li>
<li>百度统计（免费）</li>
<li>TalkingData（收费）</li>
<li>GrowingIo（全埋点）</li>
<li>Google Analytics（免费）</li>
<li>Mixpanel（可视化埋点）</li>
<li>友盟（收费）</li>
<li>神策（收费）<h2 id="埋点统计内容"><a href="#埋点统计内容" class="headerlink" title="埋点统计内容"></a>埋点统计内容</h2></li>
<li>who：行为背后的人，具有哪些属性、IP，账号</li>
<li>when：什么时候触发的这个行为？</li>
<li>where：事件发生的地点，城市地区甚至GPS</li>
<li>what：描述用户所做的事件的具体内容</li>
<li>How：用户进行事件的方式<h2 id="埋点使用场景"><a href="#埋点使用场景" class="headerlink" title="埋点使用场景"></a>埋点使用场景</h2></li>
<li>页面浏览</li>
<li>用户点击交互</li>
<li>页面加载性能</li>
<li>JS报错</li>
<li>接口出错上报</li>
<li>自定义测速<h2 id="埋点方式"><a href="#埋点方式" class="headerlink" title="埋点方式"></a>埋点方式</h2></li>
<li>前端埋点（监控页面加载、浏览习惯、页面停留时长、点击交互、表单提交，接口报错、JS报错、用户设备、IP）（ 用户行为数据 + 前端健康度分析）</li>
<li>后台埋点 （IP、接口调用、用户信息、设备信息）<h2 id="SDK埋点分类"><a href="#SDK埋点分类" class="headerlink" title="SDK埋点分类"></a>SDK埋点分类</h2></li>
<li>Web</li>
<li>移动端（IOS/Android）</li>
<li>小程序（微信、支付宝、百度）</li>
<li>App第三方框架（RN,Flutter,Weex)<h2 id="埋点平台化"><a href="#埋点平台化" class="headerlink" title="埋点平台化"></a>埋点平台化</h2></li>
<li>埋点规范<br>埋点规范代码生成平台</li>
<li>埋点管理<br>   注册埋点，添加、删除埋点<br>   埋点可视化</li>
<li>埋点验证<br>   测试埋点平台，可生成报告</li>
<li>埋点发布<br>   独立的埋点发布平台</li>
<li>埋点监控<br>   埋点数据回流<br>   埋点错误上报<h2 id="埋点前端方式"><a href="#埋点前端方式" class="headerlink" title="埋点前端方式"></a>埋点前端方式</h2><h3 id="JS埋点"><a href="#JS埋点" class="headerlink" title="JS埋点"></a>JS埋点</h3>1、提供全局的方法，让JS进行调用<br>2、监控浏览器的事件，添加标识（自动上传，后期进行数据整合）（如添加click事件的监控）<br>3、JS业务代码中添加JS代码。<br>4、对需要进程埋点的DOM声明 data属性，遍历绑定事件。<br>5、vue中可以利用路由钩子函数以及组件声明周期进行页面的监控。<h3 id="CSS埋点"><a href="#CSS埋点" class="headerlink" title="CSS埋点"></a>CSS埋点</h3>1、加载页面的时候，利用background、url等属性，直接调用接口上报数据。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>埋点</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>/2019/06/01/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="列表缓存"><a href="#列表缓存" class="headerlink" title="列表缓存"></a>列表缓存</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="keyword">var</span> Page = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//定义缓存</span></span><br><span class="line">	<span class="keyword">var</span> cache=&#123;&#125;;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">page,fn</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//命中缓存</span></span><br><span class="line">		<span class="function"><span class="title">if</span>(<span class="params">cache[page]</span>)</span>&#123;</span><br><span class="line">			showPage(page,cacge[page]);</span><br><span class="line">			fn&amp;&amp;fn();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//对请求回来的数据进行缓存</span></span><br><span class="line">			$.post(<span class="string">&quot;&quot;</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">				<span class="function"><span class="title">if</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">					showPage(page,res.data);</span><br><span class="line">					cache[page]=res.data;</span><br><span class="line">					fn&amp;&amp;fn()</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>复制百度文库</title>
    <url>/2020/08/03/%E5%A4%8D%E5%88%B6%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>复制百度文库的文章先按F12，然后运行下方代码。最后将str中的内容复制粘贴出来调整样式即可。</p>
<p>let index = 0<br>let str = “”<br>while($(“.reader-txt-layer”)[index]){<br>    str += $(“.reader-txt-layer”)[index].innerText.replace(/\r\n/g,””)<br>    index++<br>}<br>debugger<br>console.log(str)</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>学习vue-cli准备</title>
    <url>/2019/06/05/%E5%AD%A6%E4%B9%A0vue-cli%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<p>主要学习一些vuecli的处理JS工具</p>
<a id="more"></a>
<h3 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h3><p><a href="https://kuangpf.com/vue-cli-analysis/start/npm.html">vuecli源码分析</a><br><a href="https://github.com/tj/commander.js">命令行框架，提供了用户命令行输入和参数解析强大功能</a><br><a href="https://github.com/SBoudrias/Inquirer.js">Inquirer为交互式命令行工具</a><br><a href="https://github.com/sindresorhus/execa#API">execa 是可以调用 shell 和本地外部程序的 javascript 封装</a><br><a href="https://handlebarsjs.com/">handlebars 是一个 javascript 语义模版库</a><br><a href="https://metalsmith.io/">metalsmith 一个静态网站生成器</a><br><a href="https://github.com/chalk/chalk">chalk 是用于修改控制台字符串的样式，包括字体样式（加粗），颜色以及背景颜色等。</a><br><a href="https://github.com/flipxfx/download-git-repo">download-git-repo 是用于 从 GitHub, GitLab, Bitbucket 下载一个 git 仓库</a><br><a href="https://github.com/tj/consolidate.js">consolidate 是一个模版引擎整合库，它的作用是把一些著名的模板引擎适配成 Express 兼容的接口</a></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>VUE-CLI</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序 开发新问题</title>
    <url>/2020/06/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>1.同一页面多个input框, 下方的input光标及输入内容错位</strong><br>(1)问题表现：如下图，使用安卓系统时候，在输入身份证号input光标错位 <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/1-150x300.jpg">                  <img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/2-150x300.jpg"><br>(2)问题原因：小程序input 组件问题<br>(3)解决： 1 页面可通过样式的滚动（overflow-y: auto）来写，但是不要用 -webkit-overflow-scrolling: touch; 2页面用scroll-view,通过变量{sysScroll}来控制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view: </span><br><span class="line">&lt;scroll-view scroll-y\&#x3D;&quot;&#123;&#123;sysScroll&#125;&#125;&quot;  scroll-top\&#x3D;&quot;&#123;&#123;scrollTop&#125;&#125;&quot; class\&#x3D;&quot;scroll-hei-2 bg-def&quot;\&gt;</span><br><span class="line">    &lt;form &gt;</span><br><span class="line">      &lt;input bindfocus\&#x3D;&quot;onfocus&quot; bindblur\&#x3D;&quot;onblur&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form\&gt;</span><br><span class="line">&lt;&#x2F;scroll-view\&gt;</span><br><span class="line"></span><br><span class="line">js: </span><br><span class="line">  onfocus: function() &#123;</span><br><span class="line">    this.setData(&#123;sysScroll: false&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  onblur: function (e, param, inst) &#123;</span><br><span class="line">    this.setData(&#123;sysScroll: true&#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><strong>2.在wx.hideLoading()后调用 wx.showToast ,报错且不显示消息弹窗</strong> (1)问题表现：toast弹窗不出现，报错：<br><img src="http://10.144.213.26:9898/wp-content/uploads/2020/06/%E6%8D%95%E8%8E%B7-300x29.png"><br>(2)问题原因：其实是因为小程序将Toast和Loading放到同一层渲染引起的，而且缺乏一个优先级判断，也没有提供Toast、Loading是否正在显示的接口供业务侧判断。</p>
<p>(3)解决： A.用showMessage 替代 showToast; B.使用Object.defineProperty方法重新定义原生API，业务使用方式不需要任何修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意此代码应该在调用原生api之前执行</span><br><span class="line">let isShowLoading &#x3D; false;</span><br><span class="line">let isShowToast &#x3D; false;</span><br><span class="line">const &#123;</span><br><span class="line">  showLoading,</span><br><span class="line">  hideLoading,</span><br><span class="line">  showToast,</span><br><span class="line">  hideToast</span><br><span class="line">&#125; &#x3D; wx;</span><br><span class="line">Object.defineProperty(wx, &#39;showLoading&#39;, &#123;</span><br><span class="line">  configurable: true, &#x2F;&#x2F; 是否可以配置</span><br><span class="line">  enumerable: true, &#x2F;&#x2F; 是否可迭代</span><br><span class="line">  writable: true, &#x2F;&#x2F; 是否可重写</span><br><span class="line">  value(...param) &#123;</span><br><span class="line">    if (isShowToast) &#123; &#x2F;&#x2F; Toast优先级更高</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    isShowLoading &#x3D; true;</span><br><span class="line">    console.log(&#39;--------showLoading--------&#39;)</span><br><span class="line">    return showLoading.apply(this, param); &#x2F;&#x2F; 原样移交函数参数和this</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Object.defineProperty(wx, &#39;hideLoading&#39;, &#123;</span><br><span class="line">  configurable: true, &#x2F;&#x2F; 是否可以配置</span><br><span class="line">  enumerable: true, &#x2F;&#x2F; 是否可迭代</span><br><span class="line">  writable: true, &#x2F;&#x2F; 是否可重写</span><br><span class="line">  value(...param) &#123;</span><br><span class="line">    if (isShowToast) &#123; &#x2F;&#x2F; Toast优先级更高</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    isShowLoading &#x3D; false;</span><br><span class="line">    console.log(&#39;--------hideLoading--------&#39;)</span><br><span class="line">    return hideLoading.apply(this, param); &#x2F;&#x2F; 原样移交函数参数和this</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Object.defineProperty(wx, &#39;showToast&#39;, &#123;</span><br><span class="line">  configurable: true, &#x2F;&#x2F; 是否可以配置</span><br><span class="line">  enumerable: true, &#x2F;&#x2F; 是否可迭代</span><br><span class="line">  writable: true, &#x2F;&#x2F; 是否可重写</span><br><span class="line">  value(...param) &#123;</span><br><span class="line">    if (isShowLoading) &#123; &#x2F;&#x2F; Toast优先级更高</span><br><span class="line">      wx.hideLoading();</span><br><span class="line">    &#125;</span><br><span class="line">    isShowToast &#x3D; true;</span><br><span class="line">    console.error(&#39;--------showToast--------&#39;)</span><br><span class="line">    return showToast.apply(this, param); &#x2F;&#x2F; 原样移交函数参数和this</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Object.defineProperty(wx, &#39;hideToast&#39;, &#123;</span><br><span class="line">  configurable: true, &#x2F;&#x2F; 是否可以配置</span><br><span class="line">  enumerable: true, &#x2F;&#x2F; 是否可迭代</span><br><span class="line">  writable: true, &#x2F;&#x2F; 是否可重写</span><br><span class="line">  value(...param) &#123;</span><br><span class="line">    isShowToast &#x3D; false;</span><br><span class="line">    console.error(&#39;--------hideToast--------&#39;)</span><br><span class="line">    return hideToast.apply(this, param); &#x2F;&#x2F; 原样移交函数参数和this</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>小程序</title>
    <url>/2019/07/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>学习小程序而不仅仅是学会用</p>
<a id="more"></a>
<h2 id="小程序发展"><a href="#小程序发展" class="headerlink" title="小程序发展"></a>小程序发展</h2><ul>
<li><p>微信webview（微信浏览器的广泛使用）</p>
</li>
<li><p>微信SDK（提供开发者在调用微信原生能力）（会出现加载延迟）</p>
</li>
<li><p>增强版JS-SDK，“微信 Web 资源离线存储” （解决的部分加载的问题，但是网页切换补流程，复杂的也会出现白屏）</p>
</li>
<li><p>微信小程序</p>
<h2 id="小程序和web的区别"><a href="#小程序和web的区别" class="headerlink" title="小程序和web的区别"></a>小程序和web的区别</h2></li>
<li><p>普通网页开发可以使用各种浏览器提供的 DOM API，进行 DOM 操作，小程序的逻辑层和渲染层是分开的，逻辑层运行在 JSCore中，并没有一个完整浏览器对象，因而缺少相关的DOM API和BOM  API。</p>
</li>
<li><p>普通网页开发渲染线程和脚本线程是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应，而在小程序中，二者是分开的，分别运行在不同的线程中。</p>
</li>
<li><p>网页开发者在开发网页的时候，只需要使用到浏览器，并且搭配上一些辅助工具或者编辑器即可。小程序的开发则有所不同，需要经过申请小程序帐号、安装小程序开发者工具、配置项目等等过程方可完成。</p>
</li>
<li><p>小程序的执行环境</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">环境</th>
<th align="left">逻辑</th>
<th align="right">视图</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IOS</td>
<td align="left">javascriptcore</td>
<td align="right">wkwebview</td>
</tr>
<tr>
<td align="center">安卓</td>
<td align="left">V8</td>
<td align="right">chromium</td>
</tr>
<tr>
<td align="center">开发者工具</td>
<td align="left">nwjs</td>
<td align="right">chrome webview</td>
</tr>
</tbody></table>
<h2 id="开发思路"><a href="#开发思路" class="headerlink" title="开发思路"></a>开发思路</h2><p>Hybrid 技术来渲染小程序<br>小程序的渲染层和逻辑层分别由 2 个线程管理：视图层的界面使用了 WebView 进行渲染，逻辑层采用 JsCore 线程运行 JS脚本。</p>
<p>逻辑层：创建一个单独的线程去执行 JavaScript，在这里执行的都是有关小程序业务逻辑的代码，负责逻辑处理、数据请求、接口调用等<br>视图层：界面渲染相关的任务全都在 WebView 线程里执行，通过逻辑层代码去控制渲染哪些界面。一个小程序存在多个界面，所以视图层存在多个 WebView 线程<br>JSBridge 起到架起上层开发与Native（系统层）的桥梁，使得小程序可通过API使用原生的功能，且部分组件为原生组件实现，从而有良好体验</p>
<ol>
<li><p>在渲染层把 WXML 转化成对应的 JS 对象。</p>
</li>
<li><p>在逻辑层发生数据变更的时候，通过宿主环境提供的 setData 方法把数据从逻辑层传递到 Native，再转发到渲染层。</p>
</li>
<li><p>经过对比前后差异，把差异应用在原来的 DOM 树上，更新界面。</p>
</li>
</ol>
<h2 id="小程序基础库"><a href="#小程序基础库" class="headerlink" title="小程序基础库"></a>小程序基础库</h2><p>小程序的基础库不会被打包在某个小程序的代码包里边，它会被提前内置在微信客户端。<br>小程序的渲染层和逻辑层是两个线程管理，两个线程各自注入了基础库</p>
<ul>
<li>在视图层，提供各类组件来组建界面的元素</li>
<li>在逻辑层，提供各类 API 来处理各种逻辑</li>
<li>处理数据绑定、组件系统、事件系统、通信系统等一系列框架逻辑<h2 id="Exparser-框架"><a href="#Exparser-框架" class="headerlink" title="Exparser 框架"></a>Exparser 框架</h2>Exparser是微信小程序的组件组织框架，内置在小程序基础库中，为小程序的各种组件提供基础的支持。小程序内的所有组件，包括内置组件和自定义组件，都由Exparser组织管理。</li>
<li>基于ShadowDOM模型：模型上与WebComponents的ShadowDOM高度相似，但不依赖浏览器的原生支持，也没有其他依赖库；实现时，还针对性地增加了其他API以支持小程序组件编程。</li>
<li>可在纯JS环境中运行：这意味着逻辑层也具有一定的组件树组织能力。</li>
<li>高效轻量：性能表现好，在组件实例极多的环境下表现尤其优异，同时代码尺寸也较小。</li>
</ul>
<p>基于Exparser框架，小程序内置了一套组件，提供了视图容器类、表单类、导航类、媒体类、开放类等几十种组件。有了这么丰富的组件，再配合WXSS，可以搭建出任何效果的界面。在功能层面上，也满足绝大部分需求。</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>小程序启动会有两种情况，一种是「冷启动」，一种是「热启动」。假如用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时无需重新启动，只需将后台状态的小程序切换到前台，这个过程就是热启动；冷启动指的是用户首次打开或小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动。</p>
<ul>
<li>小程序没有重启的概念</li>
<li>当小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后（目前是5分钟）会被微信主动销毁</li>
<li>当短时间内（5s）连续收到两次以上收到系统内存告警，会进行小程序的销毁<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2>小程序冷启动时如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。 如果需要马上应用最新版本，可以使用 wx.getUpdateManager API 进行处理。<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2></li>
<li>精简代码，降低WXML结构和JS代码的复杂性；</li>
<li>合理使用setData调用，减少setData次数和数据量；</li>
<li>必要时使用分包优化。<h3 id="视图及逻辑"><a href="#视图及逻辑" class="headerlink" title="视图及逻辑"></a>视图及逻辑</h3>小程序的视图层目前使用 WebView 作为渲染载体，而逻辑层是由独立的 JavascriptCore 作为运行环境。在架构上，WebView 和 JavascriptCore 都是独立的模块，并不具备数据直接共享的通道。当前，视图层和逻辑层的数据传输，实际上通过两边提供的 evaluateJavascript 所实现。即用户传输的数据，需要将其转换为字符串形式传递，同时把转换后的数据内容拼接成一份 JS 脚本，再通过执行 JS 脚本的形式传递到两边独立环境。而 evaluateJavascript 的执行会受很多方面的影响，数据到达视图层并不是实时的。<h3 id="错误的做法"><a href="#错误的做法" class="headerlink" title="错误的做法"></a>错误的做法</h3>频繁的去 setData在我们分析过的一些案例里，部分小程序会非常频繁（毫秒级）的去setData，其导致了两个后果：Android下用户在滑动时会感觉到卡顿，操作反馈延迟严重，因为 JS 线程一直在编译执行渲染，未能及时将用户操作事件传递到逻辑层，逻辑层亦无法及时将操作处理结果及时传递到视图层；渲染有出现延时，由于 WebView 的 JS 线程一直处于忙碌状态，逻辑层到页面层的通信耗时上升，视图层收到的数据消息时距离发出时间已经过去了几百毫秒，渲染的结果并不实时；<br>每次 setData 都传递大量新数据由setData的底层实现可知，我们的数据传输实际是一次 evaluateJavascript脚本过程，当数据量过大时会增加脚本的编译执行时间，占用 WebView JS 线程， 后台态页面进行<br>setData当页面进入后台态（用户不可见），不应该继续去进行setData，后台态页面的渲染用户是无法感受的，另外后台态页面去setData也会抢占前台页面的执行。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://eux.baidu.com/blog/fe/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86">这个</a><br><a href="https://zhuanlan.zhihu.com/p/22754296">这个</a><br><a href="https://segmentfault.com/a/1190000019131399">还有这个</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>埋点</tag>
      </tags>
  </entry>
  <entry>
    <title>常用配色技巧</title>
    <url>/2020/06/19/%E5%B8%B8%E7%94%A8%E9%85%8D%E8%89%B2%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>配色中的问题</strong> 下面列举了一下在配色中我们也经常会遇到一些理论解决不了的问题与解决方法。 1.互补色配色容易使人眼产生晕光现象（解决方法：降低明度差别） 2.页面颜色过多，产生杂乱无序的感觉（解决方法：克制用色，采用6：3：1的色彩配比 ）。 3.文字的可读性，在颜色对比的使用过程中，一定要注意文字的可读性。切勿用互补色来处理文字，因为会引起视觉闪烁的感觉。 4.高饱和度的色彩，会让人产生“幻觉”！让人产生视觉疲劳。（解决方法：避免大面积使用高饱和度的色彩）。 5.避免使用荧光色（尤其在UI界面中，避免使用荧光色）。 <strong>禁用色</strong> 这些区域的颜色不易控制，在没有驾驭好基础配色之前，尽量少用。 每个人对禁用色的运用区域都有不同的理解，但是他们的一个共同特点就是禁用色集中在右下角的区域，这个区域的颜色靠近黑色区域，在配色上属于暗清区域，大家学过画画的人都知道，黑色添加在别的颜色中较多的话，整个颜色就会显得很“脏”，其实在我们的拾色器里是一样的道理，在这个区域的颜色我们都尽量避免使用。 <img src="https://img.zcool.cn/community/01a90e5ee74ac1a801206621551b63.png"> <strong>检验配色</strong> 谈了很多配色方法，那么我们在设计中如何检验自己的设计图的配色是否合适呢？在这里我分享一个自己的检验方法，就是将自己的设计图进行去色处理，分析画面的色彩对比关系，保证整个页面的色彩比例和画面的中心突出。 如下图所示，可以看到左一图整体是一个比较明亮的风格，单独看每个颜色都是很好看的，但是组合在一起整个画面就很“飘”，可能我们在设计中经常会遇到这样的情况，自己很难审视出自己画面的问题所在，所以去色之后，如右二所示，我们就可以看到画面色彩只剩黑白灰三种色调，和我们画素描一样，我们很容易看出，画面的黑白灰关系明显不够，和右边的画面对比，整个画面都偏灰，那么很容易找到这个画面的问题，就是暗色部分不够，我们就需要加强画面中的色彩对比，调整暗部的颜色比例。 <img src="https://img.zcool.cn/community/0185725ee74ac2a801215aa090d0b6.png"> <strong>配色积累</strong> 学好配色是一个不断积累的过程，所以在平时我们可以分析一些配色比较优秀的作品，去提取别人的画面颜色，整理成色板，在拾色器中看这些色彩的区域和比例，找配色方法和规律，久而久之便可以摸索出一套自己的配色方法。 <img src="https://img.zcool.cn/community/01f98a5ee74ac2a801206621089b14.png"> <strong>配色网站</strong> 最后分享给大家一些整理出来比较好用配色网站。 <strong>Adobe Color</strong> <a href="https://color.adobe.com/">https://color.adobe.com/</a> Adobe Color通过拖拽色轮或输入自定义色值，我们可以创造出基于相似、互补、三原色等不同色彩规则的配色方案。除此之外，还支持CMYK、RGB、HSV多种色彩模式的配色调整。 <img src="https://img.zcool.cn/community/017e6b5ee74ac3a801215aa083cb27.png"> <strong>Culrs</strong>  <a href="https://www.culrs.com/">https://www.culrs.com/</a> Culrs是一个综合型的配色网站，可以通过邻近色、三色、四色和单色来搜寻灵感配色。除此之外，每种色彩规则下还有明暗分类，相当方便。 <img src="https://img.zcool.cn/community/0167695ee74ac3a8012066213de228.png"> <strong>Generate — Coolors</strong>  <a href="https://coolors.co/">https://coolors.co/</a> 几秒钟之内创建，保存并分享好看的配色方案。 <img src="https://img.zcool.cn/community/01f4555ee74ac3a801215aa0ab86bc.png"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序双层循环</title>
    <url>/2020/10/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8C%E5%B1%82%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>双层嵌套可以使用wx:for-item 和 wx:for-index 来指定index和item</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;swiper current&#x3D;&#39;&#123;&#123;currentTab&#125;&#125;&#39; duration&#x3D;&#39;300&#39; bindchange&#x3D;&#39;swiperTab&#39;&gt;</span><br><span class="line">   &lt;swiper-item wx:for&#x3D;&quot;&#123;&#123;content&#125;&#125;&quot; wx:key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">      &lt;textarea class&#x3D;&quot;buy-detail&quot; maxlength&#x3D;&quot;140&quot; placeholder-class&#x3D;&quot;textarea-placeholder&quot; placeholder&#x3D;&quot;&#123;&#123;item.txt&#125;&#125;&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">        &lt;view class&#x3D;&quot;buy-what&quot; &gt;</span><br><span class="line">          &lt;view class&#x3D;&quot;buy-what-item&quot;  wx:for&#x3D;&quot;&#123;&#123;item.tip&#125;&#125;&quot; wx:key&#x3D;&quot;idx&quot; wx:for-item&#x3D;&quot;newitem&quot; wx:for-index&#x3D;&quot;idx&quot;\&gt;&#123;&#123;newitem.name&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line">   &lt;&#x2F;swiper-item&gt;</span><br><span class="line">&lt;&#x2F;swiper&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>微信订阅号 “乱序阅读” 来了，有点不对劲啊！</title>
    <url>/2020/05/18/%E5%BE%AE%E4%BF%A1%E8%AE%A2%E9%98%85%E5%8F%B7-%E4%B9%B1%E5%BA%8F%E9%98%85%E8%AF%BB-%E6%9D%A5%E4%BA%86%EF%BC%8C%E6%9C%89%E7%82%B9%E4%B8%8D%E5%AF%B9%E5%8A%B2%E5%95%8A%EF%BC%81/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><img src="http://image.woshipm.com/wp-files/2020/05/RV6tjbL7Ijx3HFVvOWN7.jpg"> <strong>微信订阅号推文时间顺序打乱，貌似现在已经全量覆盖。</strong> 安卓和IOS用户应该都体验到了，看订阅号推文时不再完全按推送时间顺序进行展现。 这个还在灰度小范围测试的时候，我就有体验，感觉还好，不过现在感觉有点头大。 <img src="http://image.woshipm.com/wp-files/2020/05/eJAknLFibi52IRYNvpS1.jpeg" alt="微信订阅号 “乱序阅读” 来了，有点不对劲啊！" title="微信订阅号 “乱序阅读” 来了，有点不对劲啊！"> <strong>最开始的时候，我称之为订阅号推文的 “智能排序”。</strong> 也就是微信会在订阅号时间 “信息流” 的基础上，进行智能推荐，部分文章明明早就发了，也能排在新发的文章前面。 比如下面这张图，央视新闻20分钟前的信息推送，却排在了16分钟前推送的人民网前面。 <img src="http://image.woshipm.com/wp-files/2020/05/kHFdqjabpFKKMMtusLFw.jpeg" alt="微信订阅号 “乱序阅读” 来了，有点不对劲啊！" title="微信订阅号 “乱序阅读” 来了，有点不对劲啊！"> 对此，微信官方给出的解释是：</p>
<blockquote>
<p>这是微信最近正在灰度测试的订阅号<strong>“阅读效率优化“</strong>新功能，慢慢会普及开。 上线这个新功能后，订阅号消息排列顺序会根据订阅号的优质程度、用户对订阅号的喜爱程度以及群发文章的内容质量等综合因素动态变化，用户可以更高效阅读到感兴趣的内容。</p>
</blockquote>
<p>理想状态下，有点像今日头条的个性化智能推荐——你喜欢的，就是头条！ 当然，目前这个 “阅读效率优化“ 功能，主线还是按时间排序，<strong>不会完全靠智能推荐</strong>，只是部分文章会动态变化，优胜劣汰。 <strong>之前我对此的理解是，挺好的啊。</strong>有了这个时间线上的动态变化，那些被暂时忽略，没被点击的优质内容等于有了新的机会，会优先出现在用户面前，对不对？ 只要内容够优质，用心做对读者有价值的账号，微信会Pass掉时间因素，可能大范围把你推荐给用户，让好文章得到更多展现，对不对？ 虽然目前这个功能还没有什么明确的文章推荐标准，<strong>但**</strong>内容始终是核心竞争力<strong>。 现在每个人关注的公众号都很多，每天根本就来不及看：要么是匆匆划过，大多都没有点开；再要么低质内容抢走用户注意力，优质内容反而没有被阅读。良币驱逐劣币了。 **好好一篇最新推送的文章，可能就这样死掉，用户一辈子也不会再看到，多可惜！</strong> 就像微信团队说的：</p>
<blockquote>
<p>通过诱导关注等方法违规吸引粉丝的公众号，在新的排序方式下将更难获得与其内容质量不相符的高阅读量，而真正靠内容吸引粉丝的公众号，其内容将会更高效地触达常读粉丝。</p>
</blockquote>
<p>这些确实都挺好啊。 <strong>但最近全量覆盖后，整体用起来有点不对劲了，我开始称之为订阅号推文的 “乱序阅读”。</strong> <img src="http://image.woshipm.com/wp-files/2020/05/QdXS2Iysz0RV8faxREuR.jpeg" alt="微信订阅号 “乱序阅读” 来了，有点不对劲啊！" title="微信订阅号 “乱序阅读” 来了，有点不对劲啊！"> 理想很美好，现实些许残酷啊，智能未必就真智能。 乱，真的很乱！小小吐槽一下：</p>
<ul>
<li>  本以为会推荐常读和星标的给我，结果一堆根本不常读，也没星标的给我不断推荐，我关注只是工作需要啊。</li>
<li>  本来想看的公众号划几下都没看到，反而推后了。这几天，我感觉我的阅读效率有所下降。</li>
<li>  感觉乱序的文章量太大了，哪里都是乱序的，我一度都有点视觉错乱，几次看到3天前的，还以为后面的我都看了，哪知道后面还有很多新的。</li>
<li>  智能推荐没问题，但都是推荐的，那不成今日头条了吗，头大啊。</li>
<li>  这么说吧，我估计你三天不看公众号，再打开订阅号能乱到怀疑人生。</li>
<li>  动不动把几小时前的排到第一位，直接显示在订阅号最新推文的消息列表预览，搞得我以为今天订阅号都没有什么更新，其实都错过几十个了。</li>
<li>  ……</li>
</ul>
<p>毫无疑问，微信团队改版的初衷肯定是要提高阅读效率，既然现在全量更新了，那说明之前的灰度测试数据是利好的。<strong>但公众号整体各项指标连续几年都在下降，是好是坏真是没有很大底气。毕竟，用户们的吐槽声依旧是一言难尽。</strong> <img src="http://image.woshipm.com/wp-files/2020/05/QFCftjHbMTJ4SAyciQBJ.jpeg" alt="微信订阅号 “乱序阅读” 来了，有点不对劲啊！" title="微信订阅号 “乱序阅读” 来了，有点不对劲啊！"> <img src="http://image.woshipm.com/wp-files/2020/05/HzkpZga5jdI46FDbpLZZ.jpeg" alt="微信订阅号 “乱序阅读” 来了，有点不对劲啊！" title="微信订阅号 “乱序阅读” 来了，有点不对劲啊！"> 我看大部分用户的意思是： 不能接受！我自己关注的公众号，你凭啥还帮我做排序，不能及时看到自己关注订阅号的最新消息。希望有选择的权利，可以自主打开或关闭这个更新。 <strong>这对我自己的公众号有什么影响呢？</strong> 虽然官方说订阅号消息排列顺序会根据订阅号的优质程度、用户对订阅号的喜爱程度、群发文章的内容质量等综合因素动态变化。 <strong>但这个还是有点虚的，目前我自己看到好像有3点变化：</strong></p>
<ol>
<li> 打开率和阅读量变得充满不确定性，最近几天看下来，不太能摸得准是怎么在智能推荐；</li>
<li> 当天推送的推文当日阅读量有所下降，可能在我每天的固定推文时间（早上8:40），不知道被智能排到哪去了，影响到用户的及时点开。</li>
<li> 当天账号的整体总阅读量有所提升，可能是前一天或前二天的文章还有很多用户没读，系统判断内容不错，又靠前推荐了一下，所以整体一天的阅读量就起来了。</li>
</ol>
<p>当然，有再多的吐槽没什么意义，微信一直是敢做敢干的主儿，他做了也就做了，不可能你说几句就为你停止更新。 整体而言，作为创作者，对我的公众号利好或坏的影响目前不算多大，甚至我觉得往后对这个号而言会是很利好的，能有效激活优质内容曝光。但作为普通用户，对我个人的阅读体验而言，暂时真不太能接受。部分动态变化完全没有问题，但现在真太乱太杂了。 提高阅读效率的算法有待提高吧！可能。 体验过这种乱序阅读后，你有什么感受呢？欢迎留言分享</p>
]]></content>
      <categories>
        <category>新闻咨询</category>
      </categories>
  </entry>
  <entry>
    <title>快速制作一个弹跳的加载小动画</title>
    <url>/2020/07/17/%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%BC%B9%E8%B7%B3%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%B0%8F%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>食物动效图标的弹跳</strong> 话不多说，先看看食物图标的弹跳怎么做，可以看到其实就是一个简单的位移动画，难的地方是节奏的调整。 详细思路如下： 1、将食物图标做一个预合成，依次排列，一个图标只出现一秒钟。（这样做预合成的目的是减少K帧，等下我们可以给整个预合成做位移动画即可。） <img src="https://img.zcool.cn/community/01aa525efb07a9a801215aa00c3dd2.png"> 2、现在给整个图标的预合成做上下运动的动画，直接K位置关键帧即可。 <img src="https://img.zcool.cn/community/015f465efb07eaa80120662174ba43.png"> 默认效果是下图这样子的。 <img src="https://img.zcool.cn/community/01d6735efb0863a801215aa0613276.gif"> 有木有觉得很僵硬？这是因为没有调节动效节奏的问题，正常的弹跳应该是落下的时候加速，弹起的时候减速。 3、此时我们要调节关键帧的节奏了，看好了，这里有个进阶小技巧。选中这些在顶点位置的关键帧，然后 Alt + 鼠标左键双击关键帧，弹出关键帧速度调节窗口，将速度调为0，影响为80，即可快速做出弹跳动画。 <img src="https://img.zcool.cn/community/01a8ce5efb0967a801206621329af4.png"> 调节完节奏之后，是不是看起来舒服多了？ <img src="https://img.zcool.cn/community/01ab155efb09cea801215aa08e939b.gif"> 4、给预合成加一个旋转动画。 <img src="https://img.zcool.cn/community/014c035efb1c01a801206621fb7b01.gif"> So，图标的弹跳动画就搞定了。</p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>惰性模式</title>
    <url>/2019/06/01/%E6%83%B0%E6%80%A7%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><h5 id="方法一-加载的时候重新定义-on方法"><a href="#方法一-加载的时候重新定义-on方法" class="headerlink" title="方法一 加载的时候重新定义 on方法"></a>方法一 加载的时候重新定义 on方法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对事件绑定的重新定义</span></span><br><span class="line">A.on = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type,fn</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//不是ie的情况下</span></span><br><span class="line">	<span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">document</span>.addEventListenter</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dom, type,fn</span>)</span>&#123;</span><br><span class="line">			dom.addEventListenter(type,fn,<span class="literal">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">document</span>.attachEvent</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//IE的情况下</span></span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dom, type,fn</span>)</span>&#123;</span><br><span class="line">			dom.attachEvent(<span class="string">&quot;on&quot;</span> + type,fn);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//否则</span></span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dom, type,fn</span>)</span>&#123;</span><br><span class="line">			dom.attachEvent(<span class="string">&quot;on&quot;</span> + type) = fn;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<h5 id="方法二-执行的时候定义方法"><a href="#方法二-执行的时候定义方法" class="headerlink" title="方法二 执行的时候定义方法"></a>方法二 执行的时候定义方法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对事件绑定的重新定义</span></span><br><span class="line">A.on = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type,fn</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//不是ie的情况下</span></span><br><span class="line">	<span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">document</span>.addEventListenter</span>)</span>&#123;</span><br><span class="line">		A.on = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type,fn</span>)</span>&#123;</span><br><span class="line">			dom.addEventListenter(type,fn,<span class="literal">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">document</span>.attachEvent</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//IE的情况下</span></span><br><span class="line">		A.on = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type,fn</span>)</span>&#123;</span><br><span class="line">			dom.attachEvent(<span class="string">&quot;on&quot;</span> + type,fn);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//否则</span></span><br><span class="line">		A.on = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type,fn</span>)</span>&#123;</span><br><span class="line">			dom.attachEvent(<span class="string">&quot;on&quot;</span> + type) = fn;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义后重新执行方法</span></span><br><span class="line">	A.on(dom, type,fn);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>成为标杆的超强体验设计</title>
    <url>/2020/05/28/%E6%88%90%E4%B8%BA%E6%A0%87%E6%9D%86%E7%9A%84%E8%B6%85%E5%BC%BA%E4%BD%93%E9%AA%8C%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>CASE 1.淘宝-二楼</strong></p>
<p>2016年淘宝启动了一个项目要做一款内容化栏目——以视频为主，每晚更新一期，类比“一千零一夜”的故事。 那么在满满当当的淘宝运营区里该选择哪一个来试玩这个有趣的“新栏目”呢？是在头部的10宫格里再挤进去一个图标呢？还是在热门推荐里挤出一个tab呢？还是做一个悬浮的右下角的运营位？显然都不太合适。 根据这款产品每晚6点钟才可以使用，早上7点就会消失的游戏规则，最适配它的入口是一个<strong>不占界面原生空间，同时又有一定仪式感的位置</strong>。于是下拉loading的大空区成为了设计师们考虑的阵地。</p>
<p><img src="https://img.zcool.cn/community/0106e65ec48fa0a801214d729d4a3c.gif"></p>
<p>不知道这个banner为什么要排挤我</p>
<p>但地方选好了，又有了新顾虑。因为iOS的用户基本被系统洗脑了下拉手势，对于他们来说<strong>下拉=刷新</strong>，冒然在下拉刷新的手势基础上再叠加一个无关联的结果显然是有风险的。因此从交互上需要界定2个维度的指标来保障新栏目的体验。 <strong>1.下拉速度</strong>（速度临界值：速度多快？→刷新，多慢？→新栏目）——以速度为优先衡量指标（只要速度快，拉的距离再大也是→刷新） <strong>2.下拉距离</strong>（距离临界值：拉到多少距离进入新栏目？）——兼顾单手用户操作难度</p>
<p><img src="https://img.zcool.cn/community/01014c5ec48faca801214d721b9449.png"></p>
<p>反复试错2个指标数据的实际体验之后，新栏目有了安身之所，赐名“二楼”。进入“二楼”的整体交互和现在的短视频产品玩法基本类同，全屏竖滑切换，小图标带货。下拉加载位的开发，从普通loading动效到运营位的植入基本被各类电商平台轻松复刻了，因此这一切看上去更没什么了得，但对于原创来说那<strong>毕竟是4年前</strong>。 <img src="https://img.zcool.cn/community/0136215ec48fb9a801214d72a8684c.png"></p>
<p><strong>CASE 2. 豆瓣-叠加上滑板</strong></p>
<p>豆瓣自身是个比较复杂的集合多条业务线分支（“小组”“同城”“阅读”“音影”…）的多生态产品，这里我们主要拿它18年<strong>6.0大改版</strong>中<strong>影音模块的详情页</strong>大改造来说事儿。</p>
<p><img src="https://img.zcool.cn/community/01f1885ec48fe6a801209b86b8084b.png"></p>
<p>可能有很多人已经忘记6.0前的豆瓣电影详情页长啥样了，带你回顾一下。</p>
<p>看完对比图，视力正常的铁汁咋一看都能看出6.0版详情页整容的有多成功。但具体成功在哪里，可能不仅仅是好看这么简单。 大背景从海报上<strong>智能取色</strong>虽然不算是什么稀奇的做法，但是加了适度的渐变应用在这里也可以说是非常的恰到好处了。另外深底色和视觉比重加大的外链区都<strong>突显了“第三方播放”与“购票选座”的视觉感知</strong>。让用户沉浸在电影详情中并引导他们走向“豆瓣的主要收入来源之一——电影票分销与第三方视频播放产品引流”正好是6.0豆瓣改版一个“小小的目标”——<strong>更务实（商业化）</strong>。</p>
<p>从交互层面看，且不说评论头部吸底这个事情是不是也是因为6.0商业化的影响（评论区增加“话题”进行重点运营），这个交互本身我觉得还是很强大的。强大的体现在于<strong>良好的空间收纳能力与信息拓展能力</strong>。我给它起了个好听的名字叫-叠加上滑板（不好听也认了吧，毕竟也没有内部人员告诉我他们是不是起名字了）</p>
<p><img src="https://img.zcool.cn/community/01cf265ec48ffaa801209b86633461.png"></p>
<p>这里可能又会有很多人质疑它与用户已洗脑的上滑手势之间的冲突，这点解释起来和上文淘宝“二楼”有些类似，区别是豆瓣并没有做上滑速度or距离的临界值，只是把<strong>滑动区域做了隔离</strong>。而对比它的效仿者boss直聘，人家倒是在交互上做了进一步优化，适配自己的产品情况做了<strong>上滑叠层卡隐藏</strong>和<strong>上滑距离临界值</strong>。</p>
<p><img src="https://img.zcool.cn/community/011d1d5ec49013a801214d72b754d8.gif"></p>
<p><img src="https://img.zcool.cn/community/0126a05ec4901ea801209b86ff26b6.gif"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>打印</title>
    <url>/2019/08/16/%E6%89%93%E5%8D%B0/</url>
    <content><![CDATA[<p>谈谈web打印的一些东西</p>
<a id="more"></a>
<h3 id="打印方式"><a href="#打印方式" class="headerlink" title="打印方式"></a>打印方式</h3><ul>
<li>lodop打印</li>
<li>window.print<h3 id="浏览器自带打印"><a href="#浏览器自带打印" class="headerlink" title="浏览器自带打印"></a>浏览器自带打印</h3>用window.print浏览器支持度比较好，可以直接打印web页面，但是遇到的问题是不好控制打印内容，必须要DOM被渲染以后才能打印，所以推荐使用iframe进行打印。<br>于此同时，图片渲染速度比较慢，一维码于二维码的打印要借助插件进行渲染DOM。然后再进行打印。<br>参照<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;判断iframe是否存在，不存在则创建iframe</span><br><span class="line">var iframe&#x3D;document.getElementById(&quot;print-iframe&quot;);</span><br><span class="line">if(!iframe)&#123;  </span><br><span class="line">iframe &#x3D; document.createElement(&#39;IFRAME&#39;);</span><br><span class="line">iframe.setAttribute(&quot;id&quot;, &quot;print-iframe&quot;);</span><br><span class="line">iframe.setAttribute(&#39;style&#39;, &#39;position:fixed;width:0px;height:0px;right:-500px;top:-500px;&#39;);</span><br><span class="line">document.body.appendChild(iframe); </span><br><span class="line">&#125;else&#123;</span><br><span class="line">iframe.contentWindow.document.body.innerText &#x3D; &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 获取打印的iframe对象</span><br><span class="line">var ed &#x3D; document.all ? iframe.contentWindow.document : iframe.contentDocument;</span><br><span class="line">ed.write(&#39;需要打印的DOM内容，可以包含script代码进行DOM渲染&#39;);</span><br><span class="line">&#x2F;&#x2F; 进行打印</span><br><span class="line">&#x2F;&#x2F; 同时，也可以把打印的内容放到iframe中。渲染DOM元素渲染完毕后再调用打印命令</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">iframe.contentWindow.print()</span><br><span class="line">&#125;,100)</span><br><span class="line">&#x2F;&#x2F; 我们注意可以通过css样式进行打印。因为打印机未物理像素所以我们可以把样式写在打印中去</span><br><span class="line">&#x2F;&#x2F; 可以设置打印的大小以及边距。打印纸张的大小是根据打印机进行选择的。我们只能设置自己需要的大小，也可以用百分比进行设置。</span><br><span class="line">@page &#123;width:100mm;height:150mm;margin: 0;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="lodop打印"><a href="#lodop打印" class="headerlink" title="lodop打印"></a>lodop打印</h3>使用lodop打印是因为文档比较全面并且免费的。<br>打印之前需要先安装打印插件。<br>然后引入打印的lodopJS。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否加载过lodop</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">document</span>.location.protocol == <span class="string">&quot;http:&quot;</span></span>)</span>&#123;</span><br><span class="line">	<span class="comment">// http 引用</span></span><br><span class="line">	src1 = <span class="string">&#x27;http://localhost:8000/CLodopfuncs.js?priority=1&#x27;</span></span><br><span class="line">	src2 = <span class="string">&#x27;http://localhost:18000/CLodopfuncs.js?priority=0&#x27;</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">// https引用</span></span><br><span class="line">	src1 = <span class="string">&#x27;https://localhost:8443/CLodopfuncs.js?priority=1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取lodop</span></span><br><span class="line"><span class="built_in">window</span>.getCLodop()</span><br><span class="line"><span class="comment">// 下载地址 https://pan.baidu.com/s/1VISyg0ECQbqroerS5X8jag;</span></span><br><span class="line"><span class="comment">// 检查打印机状态</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">this</span>.LODOP.webskt &amp;&amp; <span class="built_in">this</span>.LODOP.webskt.readyState == <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.infoMsg = <span class="string">&quot;打印机未准备好。&quot;</span></span><br><span class="line">	<span class="built_in">this</span>.showInfo = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取本地打印机</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">this</span>.LODOP!==<span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> printNname = <span class="built_in">window</span>.localStorage.getItem(<span class="string">&#x27;choosePrint&#x27;</span>)</span><br><span class="line">	<span class="keyword">const</span> iCount = <span class="built_in">this</span>.LODOP.GET_PRINTER_COUNT()</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; iCount; index++) &#123;</span><br><span class="line">		<span class="keyword">let</span> name = <span class="built_in">this</span>.LODOP.GET_PRINTER_NAME(index)</span><br><span class="line">		<span class="built_in">this</span>.printLsit.push(&#123;</span><br><span class="line">			name:name,</span><br><span class="line">			index:index</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="function"><span class="title">if</span>(<span class="params">printNname === name</span>)</span>&#123;</span><br><span class="line">			<span class="built_in">this</span>.curenetPrint = index</span><br><span class="line">			<span class="built_in">this</span>.checkPrint = <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后 我们 就可以使用lodop的打印命令进行打印。</span></span><br></pre></td></tr></table></figure>
<h4 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h4></li>
<li>打印的时候最好使用异步打印，在On_Return方法中 间隔200MS在进行下一次打印。</li>
<li>如果是批量大一多张。我们可以分5张调用一次print方法。</li>
<li>新建页面方法未newpage</li>
<li>打印未print  预览为 preview</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>打印</tag>
      </tags>
  </entry>
  <entry>
    <title>拖曳插件vue-draggable-resizable使用说明</title>
    <url>/2020/05/29/%E6%8B%96%E6%9B%B3%E6%8F%92%E4%BB%B6vue-draggable-resizable%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>一．</strong><br>**vue-draggable-resizable  **<br>1.    安装： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install _\--save vue-draggable-resizable_ </span><br></pre></td></tr></table></figure>
<p>2.  全局注册组件main.js中写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;import VueDraggableResizable from &#39;vue-draggable-resizable&#39; import &#39;vue-draggable-resizable&#x2F;dist&#x2F;VueDraggableResizable.css&#39;&#x2F;&#x2F; 可选择导入默认样式 Vue.component(&#39;vue-draggable-resizable&#39;, VueDraggableResizable) </span><br></pre></td></tr></table></figure>
<p>3.  局部注册 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import VueDraggableResizable from &#39;vue-draggable-resizable&#39; import &#39;vue-draggable-resizable&#x2F;dist&#x2F;VueDraggableResizable.css&#39; </span><br></pre></td></tr></table></figure>
<p>4、常用属性<br>:w 默认宽度<br>:h 默认高度<br>:x=”50” 默认水平坐标<br>:y=”50” 默认垂直坐标<br>:min-width=”50” 最小宽度<br>:parent=”true” 限制不能拖出父元素<br>:grid 水平和垂直移动 每次分别能够走多少像素<br>class-name 自定义组件class<br>5常用事件<br>@dragging=”onDrag”  每当拖动组件时调用。<br>@resizing=”onResize” 每当组件调整大小时调用。<br>@dragstop=”onDragstop” 每当组件停止拖动时调用。<br>@resizestop=”onResizstop” 每当组件停止调整大小时调用<br>@deactivated=”onDeactivated” 每当用户单击组件外的任何位置时调用<br>@activated=”onActivated” 单击组件时调用，以显示句柄。备注：句柄就是点击组件后上下左右的可以拉伸的方块点 6.Demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class&#x3D;&quot;helloword&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;text-event&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;vue-draggable-resizable</span><br><span class="line"></span><br><span class="line">        :w&#x3D;&quot;150&quot;</span><br><span class="line"></span><br><span class="line">        :h&#x3D;&quot;150&quot;</span><br><span class="line"></span><br><span class="line">        :x&#x3D;&quot;50&quot;</span><br><span class="line"></span><br><span class="line">        :y&#x3D;&quot;50&quot;</span><br><span class="line"></span><br><span class="line">        :min-width&#x3D;&quot;50&quot;</span><br><span class="line"></span><br><span class="line">        :min-height&#x3D;&quot;50&quot;</span><br><span class="line"></span><br><span class="line">        :parent&#x3D;&quot;true&quot;</span><br><span class="line"></span><br><span class="line">        :grid&#x3D;&quot;\[10,10\]&quot;</span><br><span class="line"></span><br><span class="line">        class-name&#x3D;&quot;dragging1&quot;</span><br><span class="line"></span><br><span class="line">        @dragging&#x3D;&quot;onDrag&quot;</span><br><span class="line"></span><br><span class="line">        @resizing&#x3D;&quot;onResize&quot;</span><br><span class="line"></span><br><span class="line">      &gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;</span><br><span class="line"></span><br><span class="line">          你好！ 我是一个灵活的组件。 你可以拖我四处，你可以调整我的大小。</span><br><span class="line"></span><br><span class="line">          &lt;br &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">          X: &#123;&#123; x &#125;&#125; &#x2F; Y: &#123;&#123; y &#125;&#125; - Width: &#123;&#123; width &#125;&#125; &#x2F; Height: &#123;&#123; height &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;vue-draggable-resizable&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 相对于class等于什么的标记拖拽 注意指定 parent --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;p-event&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;vue-draggable-resizable parent&#x3D;&quot;.p-event&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;You can drag me around and resize me as you wish.&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;vue-draggable-resizable&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; import VueDraggableResizable from &#39;vue-draggable-resizable&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  name: &#39;dragger&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; components: &#123; VueDraggableResizable &#125;,</span><br><span class="line"></span><br><span class="line">  data: function () &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      width: 0,</span><br><span class="line"></span><br><span class="line">      height: 0,</span><br><span class="line"></span><br><span class="line">      x: 0,</span><br><span class="line"></span><br><span class="line">      y: 0</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">    onResize: function (x, y, width, height) &#123;</span><br><span class="line"></span><br><span class="line">      this.x &#x3D; x</span><br><span class="line"></span><br><span class="line">      this.y &#x3D; y</span><br><span class="line"></span><br><span class="line">      this.width &#x3D; width</span><br><span class="line"></span><br><span class="line">      this.height &#x3D; height</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onDrag: function (x, y) &#123;</span><br><span class="line"></span><br><span class="line">      this.x &#x3D; x</span><br><span class="line"></span><br><span class="line">      this.y &#x3D; y</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>  <strong>二．</strong><br><a href="https://github.com/gorkys/vue-draggable-resizable-gorkys"><strong>vue-draggable-resizable-gorkys</strong></a> 更新，新增：辅助线、元素对齐、互斥、吸附对齐 新增属性：<br><strong>handleInfo</strong>: 当使用transform:scale()进行缩放操作时，其中switch为是否让handle始终保持视觉效果不变,size为handle的大小(宽高相同), offset为handle的位置偏移，通常在自定义handle样式时需要设置。<br><vue-draggable-resizable :handle-info="{size: 14,offset: -5,switch: true}" /><br><strong>scaleRatio</strong> :当使用transform:scale()进行缩放操作时，用来修复操作组件时鼠标指针与移动缩放位置有所偏移的情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;vue-draggable-resizable :scale-ratio&#x3D;&quot;0.6&quot; &#x2F;&gt; </span><br></pre></td></tr></table></figure>
<p><strong>isConflictCheck</strong> :定义组件是否开启冲突检测。<br><strong>Snap</strong> :定义组件是否开启元素对齐。<br><strong>snapTolerance</strong> :当调用snap时，定义组件与元素之间的对齐距离，以像素(px)为单 新增事件<br><strong>refLineParams</strong> :返回parms,包含辅助线相关参数。<br>Demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;vue-draggable-resizable</span><br><span class="line"></span><br><span class="line">      :snap&#x3D;&quot;true&quot;</span><br><span class="line"></span><br><span class="line">      :snap-tolerance&#x3D;&quot;20&quot;</span><br><span class="line"></span><br><span class="line">      @refLineParams&#x3D;&quot;getRefLineParams&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;vue-draggable-resizable</span><br><span class="line"></span><br><span class="line">      :snap&#x3D;&quot;true&quot;</span><br><span class="line"></span><br><span class="line">      :snap-tolerance&#x3D;&quot;20&quot;</span><br><span class="line"></span><br><span class="line">      @refLineParams&#x3D;&quot;getRefLineParams&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span</span><br><span class="line"></span><br><span class="line">      class&#x3D;&quot;ref-line v-line&quot;</span><br><span class="line"></span><br><span class="line">      style&#x3D;&quot;margin:8px 0 0 8px;&quot;</span><br><span class="line"></span><br><span class="line">      v-for&#x3D;&quot;item in vLine&quot;</span><br><span class="line"></span><br><span class="line">      v-show&#x3D;&quot;item.display&quot;</span><br><span class="line"></span><br><span class="line">      :style&#x3D;&quot;&#123; left: item.position, top: item.origin, height: item.lineLength&#125;&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span</span><br><span class="line"></span><br><span class="line">      style&#x3D;&quot;margin:8px 0 0 8px;&quot;</span><br><span class="line"></span><br><span class="line">      class&#x3D;&quot;ref-line h-line&quot;</span><br><span class="line"></span><br><span class="line">      v-for&#x3D;&quot;item in hLine&quot;</span><br><span class="line"></span><br><span class="line">      v-show&#x3D;&quot;item.display&quot;</span><br><span class="line"></span><br><span class="line">      :style&#x3D;&quot;&#123; top: item.position, left: item.origin, width: item.lineLength&#125;&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>提高用户体验的五种方法</title>
    <url>/2020/06/04/%E6%8F%90%E9%AB%98%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>

<p>1、减少将康的投入 例如护眼模式、关怀语言 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-ln-20200515-13.jpg"> 2、减少金钱投入 例如打折、领券、比价 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-ln-20200515-11.jpg"> 3、减少情感投入 例如评价、销量 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-ln-20200515-21.jpg"> 4、减少脑力投入 例如7+2法则、提示语 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-ln-20200515-7.jpg"> 5、减少体力投入 例如语音控制、淘宝口令 <img src="https://image.uisdc.com/wp-content/uploads/2020/05/uisdc-ln-20200515-15.jpg"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>搭建本地运行环境</title>
    <url>/2019/06/01/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="如何利用http-serve搭建环境"><a href="#如何利用http-serve搭建环境" class="headerlink" title="如何利用http-serve搭建环境"></a>如何利用http-serve搭建环境</h2><a id="more"></a>
<h3 id="利用http-server"><a href="#利用http-server" class="headerlink" title="利用http-server"></a>利用http-server</h3><h5 id="http-http-server"><a href="#http-http-server" class="headerlink" title="http http-server"></a>http <a href="https://www.npmjs.com/package/http-server" title="https://www.npmjs.com/package/http-server">http-server</a></h5><p>全局安装http-server<br><code> npm install http-server -g</code><br>使用http<br><code>http-server [path] [options]</code><br>具体含义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-p 要使用的端口（默认为8080）</span><br><span class="line"></span><br><span class="line">-a 要使用的地址（默认为0.0.0.0）</span><br><span class="line"></span><br><span class="line">-d 显示目录列表（默认为“True”）</span><br><span class="line"></span><br><span class="line">-i 显示autoIndex（默认为“True”）</span><br><span class="line"></span><br><span class="line">-g或--gzip启用时（默认为“False”），它将用于.&#x2F;public&#x2F;some-file.js.gz代替.&#x2F;public&#x2F;some-file.jsgzip压缩版本的文件，并且该请求接受gzip编码。</span><br><span class="line"></span><br><span class="line">-e或--ext默认文件扩展名（如果没有提供）（默认为&#39;html&#39;）</span><br><span class="line"></span><br><span class="line">-s或--silent从输出中抑制日志消息</span><br><span class="line"></span><br><span class="line">--cors通过Access-Control-Allow-Origin标题启用CORS</span><br><span class="line"></span><br><span class="line">-o 启动服务器后打开浏览器窗口</span><br><span class="line"></span><br><span class="line">-c设置缓存控制max-age头的缓存时间（以秒为单位），例如-c10 10秒（默认为&#39;3600&#39;）。要禁用缓存，请使用-c-1。</span><br><span class="line"></span><br><span class="line">-U或--utc在日志消息中使用UTC时间格式。</span><br><span class="line"></span><br><span class="line">-P或--proxy代理无法在本地解决给定网址的所有请求。例如：-P http:&#x2F;&#x2F;someurl.com</span><br><span class="line"></span><br><span class="line">-S或--ssl启用https。</span><br><span class="line"></span><br><span class="line">-C或--certssl证书文件的路径（默认值：cert.pem）。</span><br><span class="line"></span><br><span class="line">-K或--keyssl密钥文件的路径（默认值：key.pem）。</span><br><span class="line"></span><br><span class="line">-r或者--robots提供一个&#x2F;robots.txt（其内容默认为&#39;User-agent：* \ nDisallow：&#x2F;&#39;）</span><br><span class="line"></span><br><span class="line">-h或--help打印此列表并退出。</span><br></pre></td></tr></table></figure>
<h5 id="使用https"><a href="#使用https" class="headerlink" title="使用https"></a>使用https</h5><p><code>openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</code></p>
<p><code>http-server -S -C cert.pem -o</code></p>
<h3 id="安装XAMPP"><a href="#安装XAMPP" class="headerlink" title="安装XAMPP"></a>安装XAMPP</h3><h5 id="利用xampp搭建本地服务"><a href="#利用xampp搭建本地服务" class="headerlink" title="利用xampp搭建本地服务"></a>利用xampp搭建本地服务</h5><p>第一步：安装<br>第二部：找到 C:\xampp\htdocs  将文件放置在次目录下<br>第三部：启动   config   可以对端口号进行配置</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝便捷的小程序切换</title>
    <url>/2020/08/18/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BE%BF%E6%8D%B7%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>1. 产品体验：</strong> 在支付宝小程序里，长按右上角的关闭按钮，会弹出最近使用过的8个小程序，单击可快速切换至其他小程序。<br><strong>2. 设计思考：</strong> 随着消费互联网时代的格局逐渐清晰，大型互联网平台为了进一步提升自身的资源整合能力和服务能力，需要向各个领域进行垂直发展，小程序则是一个重要的方式和手段。目前大部分用户也都集中这些一线的互联网平台中，小程序的免下载、轻量化备受用户的青睐，因而支持小程序开发的公司也一直在为用户提供更方便快捷的服务而不停的探索。 在支付宝小程序里长按右上角关闭按钮，就会弹出最近使用过的小程序，根据使用时间先后依次排列，点击可快速切换，免去了用户关闭当前小程序后再重新进入其他小程序的常规麻烦操作。退出切换对用户来说，属于一次使用中断，即「开始<del>结束、再次开始</del>结束…」，但通过长按关闭按钮切换，具有连贯性「开始<del>~</del>结束」，更有利于用户沉浸式的使用，避免用于因使用中断而离开，一定程度上能十分讨巧地挽留用户继续使用。有时候换一种思考方式做产品，也许能得到不一样的结果。 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-ui-20200812-6.jpg" alt="12个产品细节剖析，让你看看大厂是如何做设计的"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>支付宝小程序兼容字体图标</title>
    <url>/2020/09/11/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%BC%E5%AE%B9%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iconfont.css </span><br><span class="line">去掉这些 </span><br><span class="line">@font-face &#123;font-family: &quot;iconfont&quot;;</span><br><span class="line"> src: url(&#39;iconfont.eot?t&#x3D;1596614736052&#39;); &#x2F;\* IE9 \*&#x2F; </span><br><span class="line"> src: url(&#39;iconfont.eot?t&#x3D;1596614736052#iefix&#39;) format(&#39;embedded-opentype&#39;), &#x2F;\* IE6-IE8 \*&#x2F; </span><br><span class="line"> url(&#39;iconfont.woff?t&#x3D;1596614736052&#39;) format(&#39;woff&#39;), </span><br><span class="line"> url(&#39;iconfont.ttf?t&#x3D;1596614736052&#39;) format(&#39;truetype&#39;), &#x2F;\* chrome, firefox, opera, Safari, Android, iOS 4.2+ \*&#x2F; url(&#39;iconfont.svg?t&#x3D;1596614736052#iconfont&#39;) format(&#39;svg&#39;); &#x2F;\* iOS 4.1- \*&#x2F; &#125; </span><br><span class="line"> 打开 [https:&#x2F;&#x2F;transfonter.org&#x2F;](https:&#x2F;&#x2F;transfonter.org&#x2F;) 这个网站 转化为base64的格式 选择上传字体中iconfont.ttf的文件 复制 下载中的 stylesheet.css 替换到刚才的位置</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>数据管理器</title>
    <url>/2019/06/01/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*本地存储类</span></span><br><span class="line"><span class="comment">*参数 preId 本地存储数据库前缀</span></span><br><span class="line"><span class="comment">*参数 timeSign  定义时间戳与存储数据之间的拼接符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> BaseLocalStorage = <span class="function"><span class="keyword">function</span>(<span class="params">preId,timeSign</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//定义本地存储数据库前缀</span></span><br><span class="line">	<span class="built_in">this</span>.preId = preId;</span><br><span class="line">	<span class="comment">//定义时间戳与存储数据之间的拼接符</span></span><br><span class="line">	<span class="built_in">this</span>.timeSign = timeSign || <span class="string">&#x27;|-|&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BaseLocalStorage.prototype = &#123;</span><br><span class="line">	<span class="comment">//状态</span></span><br><span class="line">	status : &#123;</span><br><span class="line">		SUCCESS : <span class="number">0</span>,<span class="comment">//成功</span></span><br><span class="line">		FAILURE : <span class="number">1.</span><span class="comment">//失败</span></span><br><span class="line">		OVERFLOW : <span class="number">2</span>,<span class="comment">//溢出</span></span><br><span class="line">		TIMEOUT : <span class="number">3</span><span class="comment">//过期</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">//window的本地存储</span></span><br><span class="line">	storage : <span class="built_in">localStorage</span> || <span class="built_in">window</span>.localStrorage,</span><br><span class="line">	<span class="comment">//获取当前的key</span></span><br><span class="line">	getKey : <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.preId + key;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">//设置数据</span></span><br><span class="line">	set : <span class="function"><span class="keyword">function</span>(<span class="params">key,value,callback,time</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//默认成功</span></span><br><span class="line">		<span class="keyword">var</span> status = <span class="built_in">this</span>.status.SUCCESS,</span><br><span class="line">			<span class="comment">//获得key值</span></span><br><span class="line">			key = <span class="built_in">this</span>.getKey(key);</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//获取时间戳</span></span><br><span class="line">			time = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() || time.getTime();</span><br><span class="line">		&#125;<span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">			<span class="comment">//如果没有获取到，默认一个月</span></span><br><span class="line">			time = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">31</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//设置</span></span><br><span class="line">			<span class="built_in">this</span>.storage.setItem(key , time + <span class="built_in">this</span>.timeSign + value);</span><br><span class="line">		&#125;<span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">			<span class="comment">//如果失败了，溢出了</span></span><br><span class="line">			status = <span class="built_in">this</span>.syatus.OVERFLOW</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//执行回调函数</span></span><br><span class="line">		callback &amp;&amp; callback.call(<span class="built_in">this</span>, status ,key ,value)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">//获取数据</span></span><br><span class="line">	get : <span class="function"><span class="keyword">function</span>(<span class="params">key,callback</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//默认成功，设置key</span></span><br><span class="line">		<span class="keyword">var</span> status = <span class="built_in">this</span>.status.SUCCESS,</span><br><span class="line">			key = <span class="built_in">this</span>.getKey(key),</span><br><span class="line">			value =  <span class="literal">null</span>,</span><br><span class="line">			timeSignLen = <span class="built_in">this</span>.timeSign.length,</span><br><span class="line">			that = <span class="built_in">this</span>,</span><br><span class="line">			index,</span><br><span class="line">			result;</span><br><span class="line">		<span class="comment">//尝试获取值</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			value = that.stirage.getItem(key);</span><br><span class="line">		&#125;<span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">			<span class="comment">//如果没有获取到</span></span><br><span class="line">			result = &#123;</span><br><span class="line">				<span class="comment">//定义失败。</span></span><br><span class="line">				status : that.status.FAILURE,</span><br><span class="line">				value : <span class="literal">null</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//执行回调函数</span></span><br><span class="line">			callback &amp;&amp; callback.call(<span class="built_in">this</span>, result.status ,result.value);</span><br><span class="line">			<span class="comment">//返回失败</span></span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//拿到数据</span></span><br><span class="line">		<span class="function"><span class="title">if</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">			<span class="comment">//获取时间标记下标值</span></span><br><span class="line">			index =  value.indexOf(that.timeSign);</span><br><span class="line">			<span class="comment">//获取时间</span></span><br><span class="line">			time = +value.slice(<span class="number">0</span>,index);</span><br><span class="line">			<span class="comment">//比较时间是否过期</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() &gt; <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() || <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="comment">//没有过期获取真的value</span></span><br><span class="line">				value = value.slice(index + timeSignLen);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="comment">//过期了，设置过期，并移除原来的数据</span></span><br><span class="line">				value = <span class="literal">null</span>,</span><br><span class="line">				status = that.status.TIMEOUT;</span><br><span class="line">				that.remove(key);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//获取失败</span></span><br><span class="line">			status = that.status.FAILURE;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//定义结果</span></span><br><span class="line">		result = &#123;</span><br><span class="line">			status : status,</span><br><span class="line">			value : value</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="comment">//执行回掉函数并返回值</span></span><br><span class="line">		callback &amp;&amp; callback.call(<span class="built_in">this</span>, result.status ,result.value);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">//移除数据</span></span><br><span class="line">	remove : <span class="function"><span class="keyword">function</span>(<span class="params">key,callback</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//定义初始失败，并获取key</span></span><br><span class="line">		<span class="keyword">var</span> status = <span class="built_in">this</span>.status.FAILURE,</span><br><span class="line">			key = <span class="built_in">this</span>.getKey(key),</span><br><span class="line">			value =  <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">//尝试获取值</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//得到值了</span></span><br><span class="line">			value = that.stirage.getItem(key);</span><br><span class="line">		&#125;<span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span>&#123;&#125;</span><br><span class="line">		<span class="comment">//如果获取到了值</span></span><br><span class="line">		<span class="function"><span class="title">if</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="comment">//移除值，并设置成功</span></span><br><span class="line">				<span class="built_in">this</span>.storage.removeItem(key);</span><br><span class="line">				status = <span class="built_in">this</span>.status.SUCCESS;</span><br><span class="line">			&#125;<span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span>&#123;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//执行回掉函数</span></span><br><span class="line">		callback &amp;&amp; callback.call(<span class="built_in">this</span>, status ,status &gt; <span class="number">0</span> ? <span class="literal">null</span> : value.slice(value.indexOf(<span class="built_in">this</span>.timeSign) + <span class="built_in">this</span>.timeSign.length));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>数据表的20条设计指南</title>
    <url>/2020/07/06/%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%8420%E6%9D%A1%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>数据表是展示，查询，处理数据的良好解决方案，经过精心设计的数据表展示信息更加清晰，很好地帮助用户洞察并采取行动。 文章从数据表的功能和样式出发，给出20条设计指南。功能的介绍中有基础也有进阶，能满足很多场景下的业务，且所介绍的功能从代码的角度均有成熟的解决方案，可直接落地。</p>
<h2 id="一、功能"><a href="#一、功能" class="headerlink" title="一、功能"></a><strong>一、功能</strong></h2><h4 id="1-搜索，筛选，排序"><a href="#1-搜索，筛选，排序" class="headerlink" title="1.搜索，筛选，排序"></a>1.搜索，筛选，排序</h4><p>这三个功能是任何数据表都应最基本功能，它们的存在不仅仅是为了可用性——有着了解趋势，比较数据，查找特定值的作用。搜索相较于筛选更为精确，筛选可看作是粗略的搜索。 <strong>排序与筛选</strong>：直接跟在某个字段的标题之后，点击更改排序方式或筛选标准 <strong>栏搜索：</strong>搜索功能与列表内容融合，可根据每个栏的字段单独搜索 <strong>搜索模块：</strong>将搜索模块放在列表上方，可选择几个重要的字段作为独立的搜索 <img src="https://img.zcool.cn/community/01edd55ef988e5a801206621a74bf3.png"> <img src="https://img.zcool.cn/community/01f4c75ef988e6a801215aa019a9bd.png"> <img src="https://img.zcool.cn/community/01b2205ef988e6a801206621c9c7b0.png"></p>
<h4 id="2-页码选项与数据数量"><a href="#2-页码选项与数据数量" class="headerlink" title="2.页码选项与数据数量"></a>2.页码选项与数据数量</h4><p><strong>页码选项：</strong>在页码组件中会显示一系列的数字，点击能够获取另一组数据。这里可以自定义页码组件中显示的页码数量。（无限滚动通常会和页码选择一起被讨论，相比之下，页码对数据的会起到模糊的定位作用） <strong>行数量：</strong>用户可以自定义每页展示的多少条数据，若没有这个选项系统会默认设置一个数值 <strong>数据总量：</strong>没有总量的数据往往让人抓狂，了解不到总体情况，翻页何时是个头 三者通常一起使用，共同控制单页数据展示量，可放置于数据表底部或顶部 <img src="https://img.zcool.cn/community/0131d75ef98a26a8012066218e4096.png"></p>
<h4 id="3-批量操作"><a href="#3-批量操作" class="headerlink" title="3.批量操作"></a><strong>3.批量操作</strong></h4><p>数据表的用户往往需要对多条数据进行统一操作，批量操作允许用户使用复选框单选或多选对各条数据进行相同的一个操作，节约操作时间 批量操作的按钮可以采用非实时显示的方式，在选中复选框后展示相关操作按钮，减少展示给用户的信息量，优化页面内容，减轻用户的使用负担</p>
<h4 id="4-悬停动作"><a href="#4-悬停动作" class="headerlink" title="4.悬停动作"></a><img src="https://img.zcool.cn/community/01acdf5efd9a98a801206621cd7a31.gif">4.悬停动作</h4><p>当鼠标悬停在一行上时，显示常见操作。这样可以减少视觉混乱，但用户首次使用系统时会有找不到操作按钮的概率 <img src="https://img.zcool.cn/community/01a9685efc52e3a801206621d6a863.gif"> <strong>5.自定义高度内垂直滚动</strong> 可自定义设置高度保持数据表仅在该区域内通过滚动鼠标显示更多信息，在浏览数据表时可同时兼顾上下文的其他信息。 <img src="https://img.zcool.cn/community/01eed65ef9ef17a801206621c5be2d.gif"></p>
<h4 id="6-滚动时文本固定"><a href="#6-滚动时文本固定" class="headerlink" title="6.滚动时文本固定"></a>6.滚动时文本固定</h4><p><strong>1）头部字段固定</strong> 将数据表头部的字段名称在滚动时保持固定，提高查询数据的效率，特别是字段多且相近字段类别相同时，若没有固定的字段在顶部，容易给用户带来困扰，需要返回表单的顶部再次确认 <img src="https://img.zcool.cn/community/01bf0b5ef9ed61a801215aa03dd3b9.gif"> <strong>2）首栏固定</strong> 水平滑动数据表时保持首栏固定，起到引导效果，清晰地展示后几栏与第一栏之间信息的归属关系，第一栏在滑动时可以添加投影效果。 <img src="https://img.zcool.cn/community/0138b65efb1372a801206621a0c626.png"> <strong>7.可扩展行（行细节）</strong> 业务场景：页面的横向空间有限，每条记录需要更多的字段或内容在当前页展示信息，若用点击详情进入下一页的操作，鼠标的定位，位移动作量过大，且页面的不断跳转请求会影响到系统速度，影响体验 解决方法：在列表左侧放置展开按钮，当需要查看信息时可点击按钮，详情会在当前页展示 <img src="https://img.zcool.cn/community/01da1a5efd92fea801215aa03ebed6.gif"></p>
<h4 id="8-嵌套子表格"><a href="#8-嵌套子表格" class="headerlink" title="8.嵌套子表格"></a>8.嵌套子表格</h4><p>每行数据之下有隶属于该目录的另一个数据表单 <img src="https://img.zcool.cn/community/01bd8b5efd9500a801215aa0d7ca2e.gif"></p>
<h4 id="9-复合标题"><a href="#9-复合标题" class="headerlink" title="9.复合标题"></a>9.复合标题</h4><p>表单头部字段过多会给用户造成一定的视觉压力，不利于信息的筛选，这种情况下可以采用复合标题的形式将各种字段再进行组合分类 <img src="https://img.zcool.cn/community/01ed735ef9a62da801215aa0eb9247.png"> <strong>10.行分组</strong> 将每行的数据根据业务需要将其分组，下图中不同国家的订单被分在了各自的组中，但在数据量较大的情况下不大实用，浏览数据比较困难。 <strong><img src="https://img.zcool.cn/community/01023e5ef9f234a801215aa0cc42ce.png"></strong></p>
<h4 id="11-栏内编辑"><a href="#11-栏内编辑" class="headerlink" title="11.栏内编辑"></a>11.栏内编辑</h4><p>在数据表当前页直接对部分数据进行编辑保存，根据修改内容可采用弹窗或直接编辑的形式 <img src="https://img.zcool.cn/community/0182155efd9c87a801215aa04439d4.png"></p>
<h4 id="12-自定义表格"><a href="#12-自定义表格" class="headerlink" title="12.自定义表格"></a>12.自定义表格</h4><p><strong>1）自定义列内容</strong> 用户拥有高度自由，可选择数据表中显示哪些字段，以及将字段位置排序，采用弹出Modal框进一步操作的交互形式 <img src="https://img.zcool.cn/community/012ea65efd86bca8012066218642fc.png"> <strong>2）列宽度可调  ** 允许扩展和收缩任何列的宽度，以防止较长的数据被遮盖 <img src="https://img.zcool.cn/community/013e775efd6d35a801215aa0de73ec.png"> **3）显示密度</strong> 允许用户根据 数据内容及自身的阅读环境与能力（如设备屏幕大小，个人视力等）调整数据展示的密度</p>
<h4 id="13-行回调"><a href="#13-行回调" class="headerlink" title="13.行回调"></a><img src="https://img.zcool.cn/community/010a625efd7778a801215aa084b1da.gif">13.行回调</h4><p>根据业务需要对单行的相同类型内容给出不同的样式，如下图最后一列，根据付款总数制定规则，高于某个数值时显示字体显示红色，加粗</p>
<h4 id="14-页脚回调"><a href="#14-页脚回调" class="headerlink" title="14.页脚回调"></a><img src="https://img.zcool.cn/community/01ea775ef996a5a801206621af861b.png">14.页脚回调</h4><p>该功能可对列表中的数据执行一系列的功能操作，如下图最后一列的底部，将支付总额在当前页进行了汇总 <img src="https://img.zcool.cn/community/01614d5ef9f373a801215aa0e24cc4.png"></p>
<h2 id="二、样式"><a href="#二、样式" class="headerlink" title="二、样式"></a>二、样式</h2><h4 id="1-数据列表的常见样式"><a href="#1-数据列表的常见样式" class="headerlink" title="1.数据列表的常见样式"></a>1.数据列表的常见样式</h4><p><strong>1）斑马纹</strong> 每行的背景交替使用不同颜色，可以有效帮助用户在扫描较长的数据，数据前后校对时保持其位置，在数据量较大时可以使用，这里的背景色一定要浅，并且避免与鼠标悬停时的样式相似。 使用大屏幕时，这是我最喜欢的样式，因为相比于下面几种样式浏览数据更加省力 <img src="https://img.zcool.cn/community/0186005efc56e5a8012066217155b2.png"> <strong>2）分割线</strong> 数据列表中仅显示水平线以示区分，大量留白有效减少视觉噪音，并且依然可以帮助用户定位，数据量较多较少时都可使用，较为常见 <img src="https://img.zcool.cn/community/01c7d65ef9fbcaa801215aa0ab3a37.png"><strong>3）单元格</strong> 水平线与垂直线将数据包围，视觉干扰元素较多，建议在数据特别密集时使用（分割线的颜色要浅于文字） <img src="https://img.zcool.cn/community/012ac65ef9f52ba801215aa0fea64a.png"> <strong>4）纯背景</strong> 移除所有的分割线或斑马纹，用留白，距离来区分数据，在垂直方向会占用更多的空间，解析较多数据时用户可能会失去自己的位置，在数据量较少时可以使用 <img src="https://img.zcool.cn/community/01d3225efc5b28a8012066215815c1.png"></p>
<h4 id="2-多颜色的使用"><a href="#2-多颜色的使用" class="headerlink" title="2.多颜色的使用"></a>2.多颜色的使用</h4><p>不建议在数据表中用多种颜色展示文本，那会让画面杂乱，但涉及到状态时多颜色的使用可以有效区分，增加页面的活跃度</p>
<h4 id="3-减少纯黑颜色的使用"><a href="#3-减少纯黑颜色的使用" class="headerlink" title="3.减少纯黑颜色的使用"></a>3.减少纯黑颜色的使用</h4><p>自然界中不存在编号#000000的黑色，长期观看纯黑颜色会给用户带来视觉压力</p>
<h4 id="4-不要使用居中对齐"><a href="#4-不要使用居中对齐" class="headerlink" title="4.不要使用居中对齐"></a>4.不要使用居中对齐</h4><p>“F”型的视觉阅读习惯让左对齐成为主要对齐方式，也有人认为数字右对齐可以方便用户进行计算，对比，但居中对齐是不可取的 <img src="https://img.zcool.cn/community/01f8815efedd96a801206621413944.png"></p>
<h4 id="5-避免不必要的视觉效果"><a href="#5-避免不必要的视觉效果" class="headerlink" title="5.避免不必要的视觉效果"></a>5.避免不必要的视觉效果</h4><p>数据表是功能为主导，3D效果，阴影等酷炫效果不利于阅读大量数字文本</p>
<h4 id="6-为小屏幕考虑"><a href="#6-为小屏幕考虑" class="headerlink" title="6.为小屏幕考虑"></a><strong>6.为小屏幕考虑</strong></h4><p>小屏幕上缩小的列，隐藏的文本，错乱的布局，无休止的滚动都会破坏用户体验，即使我们不能同时给出各种尺寸下的最佳解决方案，也要让小屏幕上的样式过的去，在用测试数据时，把理论上的最多最长数据的情况考虑进去</p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>数组的遍历</title>
    <url>/2020/08/14/%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>数组的遍历。 js版本 for循环是最简单的，性能一般，好处是能通过break等方式退出循环。 forEach简洁高效，不用考虑索引，多维数组也很好操作，缺点是不能退出循环。 map方法和foreach特别像，不过map能返回一个新数组。 for…in循环的是对象。 for…of循环针对的是有迭代器接口的对象，比如数组、map结构、set结构。</p>
<h3 id="一、forEach方法"><a href="#一、forEach方法" class="headerlink" title="一、forEach方法"></a>一、forEach方法</h3><p>forEach是最简单、最常用的数组遍历方法，它提供一个回调函数，可用于处理数组的每一个元素，默认没有返回值。   以上是个简单的例子，计算出数组中大于等于3的元素的个数。 回调函数的参数，第一个是处于当前循环的元素，第二个是该元素下标，第三个是数组本身。三个参数均可选。</p>
<h3 id="二、map方法"><a href="#二、map方法" class="headerlink" title="二、map方法"></a>二、map方法</h3><p>map，从字面上理解，是映射，即数组元素的映射。它提供一个回调函数，参数依次为处于当前循环的元素、该元素下标、数组本身，三者均可选。默认返回一个数组，这个新数组的每一个元素都是原数组元素执行了回调函数之后的返回值。 map方法不改变原数组。     以上是一个简单的例子，把原数组的每一项乘以自身下标+1的数。</p>
<h3 id="三、filter方法"><a href="#三、filter方法" class="headerlink" title="三、filter方法"></a>三、filter方法</h3><p>filter，过滤，即对数组元素的一个条件筛选。它提供一个回调函数，参数依次为处于当前循环的元素、该元素下标、数组本身，三者均可选。默认返回一个数组，原数组的元素执行了回调函数之后返回值若为true，则会将这个元素放入返回的数组中。 filter方法不改变原数组     以上是一个简单的例子，筛选出原数组中，自身乘以下标大于等于3的元素。</p>
<h3 id="四、some、every方法"><a href="#四、some、every方法" class="headerlink" title="四、some、every方法"></a>四、some、every方法</h3><p>some方法和every的用法非常类似，提供一个回调函数，参数依次为处于当前循环的元素、该元素下标、数组本身，三者均可选。 数组的每一个元素都会执行回调函数，当返回值全部为true时，every方法会返回true，只要有一个为false，every方法返回false。当有一个为true时，some方法返回true，当全部为false时，every方法返回false。 some、every方法不改变原数组。    </p>
<h3 id="五、reduce方法"><a href="#五、reduce方法" class="headerlink" title="五、reduce方法"></a>五、reduce方法</h3><p>reduce方法有两个参数，第一个参数是一个回调函数（必须），第二个参数是初始值（可选）。回调函数有四个参数，依次为本轮循环的累计值、当前循环的元素（必须），该元素的下标（可选），数组本身（可选）。 reduce方法，会让数组的每一个元素都执行一次回调函数，并将上一次循环时回调函数的返回值作为下一次循环的初始值，最后将这个结果返回。 如果没有初始值，则reduce会将数组的第一个元素作为循环开始的初始值，第二个元素开始执行回调函数。 最常用、最简单的场景，是数组元素的累加、累乘。     reduce方法不改变原数组</p>
<h3 id="六、for-of方法"><a href="#六、for-of方法" class="headerlink" title="六、for of方法"></a>六、for of方法</h3><p>es6新增了interator接口的概念，目的是对于所有数据结构提供一种统一的访问机制，这种访问机制就是for of。 即：所有有interator接口的数据，都能用for of遍历。常见的包括数组、类数组、Set、Map等都有interator接口。     如果想用for of的方法遍历数组，又想用Index，可以用for of遍历arr.entries()</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>智慧交通</title>
    <url>/2020/08/03/%E6%99%BA%E6%85%A7%E4%BA%A4%E9%80%9A/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>我国交通现状：</strong><br>近几年来，随着经济和社会发展迅速，城市规模不继扩大，城市化进程的不断加快，城市人口迅速增长，并随着居民生活水平的不断提高，机动车拥有量迅速增长，交通需求极大增加，原有的交通供需平衡被打破，而相反城市的基础设施、交通管理设施和管理能力的提高跟不上交通需求发展速度，原有基础设施的缺陷和弊端不断暴露出来，交通管理的科技水平越来越显得不足，交通管理的手段、措施尚处于经验型、摸索型的状态，处于成长期。如何解决城市交通拥挤问题已经成为城市可持续发展的一个重要课题，城市道路、交通管理工作也面临着严峻的挑战。从政府管理者角度讲，需要更好地利用现有的交通运输基础设施，提高安全性，改善环境；从企业角度讲，企业需要提高运营效率与服务质量；从旅行角度讲，旅行者需要可靠的出行信息来减少旅行时间与旅行压力、提高安全性与可靠性，需要高质量的运输服务与便捷的支付手段；从行驶角度讲，驾驶员需要最新的交通信息、及时的危险警告、推荐最佳的行车线路、适宜的速度限制、在不利的道路与天气条件下对司机的有效支持、对紧急情况的快速反应。这些越来越高的交通需求是传统交通运输系统所难以满足的，因此，急需要将先进的信息技术融入到交通运输管理的全过程，全面提升整个行业的信息化水平。<br><strong>方案介绍：</strong> 智慧交通是指以交通信息中心为核心，连接城市公共汽车系统、城市出租车系统、城市高速公路监控系统、城市电子收费系统、城市道路信息管理系统、城市交通信号系统、汽车电子系统、停车场管理系统等的综合性协同运作，让人、车、路和交通系统融为一体，为出行者和交通监管部门提供实时交通信息，有效缓解交通拥堵，快速响应突发状况，为城市大动脉的良性运转提供科学的决策。智慧交通以信息的收集、处理、发布、交换、分析、利用为主线，为交通参与者提供多样性的服务。诸如动态导航，可提供多模式的城市动态交通信息，帮助驾驶员主动避开拥堵路段，合理利用道路资源，从而达到省时、节能、环保的目的。智慧交通系统通过各类传感器采集各类交通信息、发布各类交通信息、引导交通。各类采集到的交通信息将统一汇聚到城市交通信息系统中心，进行分析处理。通过对汇聚的数据进行处理和挖掘，可对道路交通拥堵状态进行分析，为交通管理部门进行决策提供帮助。银河之星智慧交通行业应用解决方案依托北斗卫星优势和移动网络资源，强大的ICT服务能力，丰富的行业应用经验，通过与业内优秀的产品和服务供应商合作，为交通行业客户提供信息化、智能化解决方案，从而有效提升交通行业信息化水平。交通运输行业信息化的需求热点可以主要归纳三个方面： 1）车辆综合管理和调度系统，基于北斗、GPS、GIS、无线通信等信息手段，通过建立私有或公共信息应用平台，能够为监管部门和企业实现定位管理，实现对运输工具、货物、人员的状态监控，提高运行效率，避免危险隐患，提高应急处理能力； 2）通过对城市道路、公路等交通网络的实时数据采集，交通管理部门能够实时发布交通信息，合理进行交通疏导，提高道路交通的通行效率和使用率； 3）对突发事件能够及时、快速处理，并充分利用现有的交通基础设施和彻底分析道路交通拥堵情况，制定交通建设规划和应对措施。智慧交通涵盖了所有的运输方式，并考虑运输系统动态的、相互作用的所有要素——人、车、路以及环境。据预测，应用智慧交通后，可有效提高交通运输效益，使交通拥挤降低20%，延误损失减少10—25%，车祸降低50～80%，油料消耗减少30%。<br><strong>智慧交通应用解决方案的总体框架图</strong> <strong>价值分析：</strong> 智慧交通是将先进的信息技术、数据通讯传输技术、电子控制技术及计算机处理等技术综合运用于整个交通运输管理体系，通过对交通信息的实时采集、传输和处理，借助各种科技手段和设备，对各种交通情况进行协调和处理，建立起一种实时、准确、高效的综合运输管理体系，从而使交通设施得以充分利用，提高交通效率和安全，最终使交通运输服务和管理智能化，实现交通运输的集约式发展。 一、对政府的价值 政府实时发布交通信息，合理进行交通疏导、突发事件快速处理，并充分利用现有的交通基础设施，分析道路交通拥堵原因，制定交通建设规划和应对措施。 1）采用信息化手段解决道路拥堵问题 采用部署诸如实时交通信号控制系统等先进的交通指挥系统来解决道路拥堵的 问题。利用信息化手段，在主要拥堵路段通过交通信号灯、交通管制等方式进行交通流 量疏导，及时将拥堵信息推送至车载终端或手机终端，引导车辆规避拥堵路段，并给出行驶路径建议。 2）建立完善的公共交通网络 包括进行公交系统的现代化建设，诸如公交视频监控、公交车辆定位调度、公共车辆信息管理等，进行地铁的规模化和信息化建设等。为市民出行提供完善的公共交通网络，发展城市公共交通配套。 3）建设和完善城市路网 新建或扩建市政道路，增加通车道路规模。基于现有拥堵情况信息分析，进行交通基础设施建设规划，对于常拥堵路段，制定改建计划，启动项目实施。 4）构建交通流量信息的采集系统和信息发布共享网络 通过各个路口信息采集终端（包括视频终端、RFID、红外、感应线圈等）获取城市交通信息，采集的交通信息汇聚到交通信息中心后，进行分析、处理、建模，给出全市的交通拥堵状况全视图。信息发布可通过媒体网络、运营商的无线通信网络、以及各个公共场所的LED屏及时发布道路拥堵、道路管制、交通事故、气象、道路积水等信息，引导市民规避拥堵路段。 5）建立完善的应急联动和事故救援机制 发生较大的交通事故，由交管中心统一调度，触发应急机制，联动公安、救援中心、120急救中心、保险公司等相关部门，快速、有效、妥善处理现场事件，尽快恢复交通原态。 6）大力倡导绿色交通、节能减排 政府部门倡导节能减排，鼓励电动车的发展，鼓励出行更多采用公共交通网络。 7）建设现代化信息化的城市停车场管理系统 建设现代化的城市级别的停车场管理系统，实现停车场实时信息及时发布，市民可通过多种途径，多种渠道方便的获取城市各个位置停车场的相关信息。 8）保障公共交通安全，加强公共车辆管理 实现对涉及公共安全的客运车辆的实时监控管理，实现对危险品运输车辆的实时监控管理，保障公共交通的安全。 9）推动智能电子车牌的发展 推动智能电子车牌的发展，加快车牌信息化建设。 二、对企业的价值 1）实现对企业车辆的实时监控和管理 企业需要具备对企业所属车辆的实时监控和管理的能力。包括：调度人员通过车辆综合调度业务，根据交通拥堵、事故、人员集聚等因素合理调度车辆，如出租车、物流车、企业自有营运车辆等；公司监管人员，通过车辆综合调度业务，随时查看车辆运行情况，包括当前、历史运行轨迹。 2）提供车载信息化服务 车辆生产企业对所销售的各类车辆可提供车载信息服务。通过车载信息服务，为司机提供交通信息查询、行程规划、车辆综合调度、车辆远程诊断、紧急救援等服务。 3）实现对车辆的安全管理 通过车辆的管理监控等多种信息化手段，保障企业车辆的安全。包括车辆防盗、车辆被劫持的及时报警等。 4）降低车辆的营运成本 采用信息化的车辆和车队管理手段，降低车辆运营费用，避免无规划的私自使用车辆情形。 三、对公众的价值 1）交通安全 关注各类交通出行方式，关注车辆故障、车辆防盗、车辆救援等安全相关内容。 2）获取各种类型的交通信息（停车/加油/交通信号/车辆诱导/气象） 能够及时、多渠道的获取各类交通信息，包括停车场的位置、附近加油站、途中的道路交通拥堵情况信息，车辆诱导信息，途中、目的地气象情况，日常车辆保养信息实时提醒，驾驶人员保健信息等。 3）延长车俩的使用寿命 获取车辆保养信息，参与各类车辆的维护，延长车辆的使用寿命。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>智慧社区还有文章可做吗？未来将如何发展？</title>
    <url>/2020/05/18/%E6%99%BA%E6%85%A7%E7%A4%BE%E5%8C%BA%E8%BF%98%E6%9C%89%E6%96%87%E7%AB%A0%E5%8F%AF%E5%81%9A%E5%90%97%EF%BC%9F%E6%9C%AA%E6%9D%A5%E5%B0%86%E5%A6%82%E4%BD%95%E5%8F%91%E5%B1%95%EF%BC%9F/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<blockquote>
<p>智慧社区是指充分利用物联网、云计算、移动互联网等新一代信息技术的集成应用,为社区居民提供一个安全、舒适、便利的现代化、智慧化生活环境,从而形成基于信息化、智能化社会管理与服务的一种新的管理形态的社区。但目前智慧社区的发展有限，仅仅只有一些基础的设施建设，智慧社区真的没有什么文章可做了吗？未来智慧社区将如何发展？</p>
</blockquote>
<p><img src="http://image.woshipm.com/wp-files/2019/09/OwmnyyHRswlTakzmUEMg.jpg"> 2017年6月中共中央、国务院印发《关于加强和完善城乡社区治理的意见》，意见提出，到2020年，实施“互联网+社区”行动计划，加快互联网与社区治理和服务体系的深度融合，运用社区论坛、微博、微信、移动客户端等新媒体，引导社区居民密切日常交往、参与公共事务、开展协商活动、组织邻里互助，探索网络化社区治理和服务新模式。 发展社区电子商务，按照分级分类推进新型智慧城市建设要求，务实推进智慧社区信息系统建设，积极开发智慧社区移动客户端，实现服务项目、资源和信息的多平台交互和多终端同步。 但目前智慧社区除门禁、监控、停车场等基础设施建设比较完善外，其他都没有针对性的解决方案，比如社区社交和电子商务等服务，这些服务在社区居民眼中没有很大的吸引力，微信、微博、淘宝、京东使用已经非常方便，似乎没有必要在这几个方面多此一举，智慧社区真的没有什么文章可做了吗？ 我们先看一下社区的特点：</p>
<ol>
<li> 社区是一个大家有着共同利益而且流量比较集中的地方，流量具有潮汐特性；</li>
<li> 社区是一个远亲不如近邻的但又彼此不太熟悉的地方；</li>
</ol>
<p>根据上面的特点，社区其实是非常适合做电子商务和社交服务，而且又与传统电子商务和社交不同，我们先看社区电子商务，它有以下特点：</p>
<ol>
<li> 社区电子商务天然支持团购服务，大家线上拼单后，可以集中送货，比其他团购模式的分散送货物流成本更低；</li>
<li> 社区电子商务可以主打就近服务，将社区周边的商家纳入社区电子商务范畴，比如餐饮、超市、医药、理发、美容等业态，都是高频服务，而且服务半径短、服务时效快，可以提供送货上门、服务上门，这个就是与传统电子商务差异化的地方；</li>
<li> 社区电子商务更适合二手交易，比如谁有闲置物品可以挂在社区网上，可以限制只限小区内部交易，小区内部交易的好处就是，因为大家都在一个空间，抬头不见低头见，交易会多一份责任和信任，另外物流也比较方便，即便大件物品，通过租用小区物业的车辆或是请周边的搬家人员都是比较方便的，而且成本低；</li>
</ol>
<p>而对于社区社交，它是不同于微信的熟人社交，也不同于陌陌的陌生人社交，因为大家虽然不认识但生活空间是相同的、公共利益是相同的，可以互相帮忙、可以互相保障，只要利益一致，就有认识的意愿； 但社区内的钢筋水泥似乎把大家隔开了，不知如何认识，微信或QQ虽然可以拉群沟通，但群成员入群很难控制，沟通内容也比较散乱，无法对沟通内容进行有效管理，只适合实时沟通； 比如有人在微信群里提议组织活动，有些人可能很晚才看到微信群里的信息，但微信群里的活动信息已经被其他信息淹没了，得不停的往前翻才可以。 它是多种消息混合在一起展示，如果采用类似BBS论坛这种方式，按照板块、楼栋等多个维度进行整理沟通，大家可以查找自己感兴趣的话题或维度进行参与，不需要翻看微信群里的每条记录，也不需要担心自己发布的信息是否合适，这样沟通会高效很多，而且沟通方式还可以多种多样，不只是发文字、图片、视频，还可以对某个话题进行投票或报名； 另外社区社交具备O2O的特点，因为大家在一个小区，可以线上约活动，线下见面交流。 不过，有的人可能会觉得微信是高频社交工具，其他社交工具没有人用，这个问题主要还是看社区社交是否有价值、对大家有没有用、有没有解决实际问题。 首先每个社区社交用户都是认证用户，比如业主、物业、商户，你可以放心的和任意陌生人交流，因为你知道他是谁、他在哪里，但只是不认识，不需要事先加微信好友，也不需要互相公开电话来联系； 大家都需要负责任的发布消息，因为跑的了和尚跑不了庙，发布不实消息，别人是可以找得到你，也可以放心的参加社区发布的各种活动，查看社区内部信息并参与投票。 这个社区社交其实与企业内部论坛类似，企业论坛在休息时间都是比较活跃的，尤其是租房、征婚、团购等信息都是大家比较关注的板块，因为都是企业内部员工发布的，大家相对是比较信任的，比较愿意参与，这就是社区社交的价值：“信任”。 智慧社区除了提供电子商务和社区社交外，还有其他文章可做吗？ 其实社区就像一个缩小版的城市，很多智慧城市的治理型方案都可以用到社区里，比如<strong>智能交通</strong>里的停车场诱导方案也可以用与社区，但在社区里应用停车场诱导需要做的更深入，因为社区使用会更高频，每天都需要用到停车场，住户需要通过APP等方式提前了解小区停车位情况，做好规划，进入小区后如何指引到空车位上，如何更便利的交停车费等； 其他比如<strong>智慧民生里的社区养老</strong>，也需要提供更深入的服务才能获得青睐并盈利，传统的机构养老因为资源有限、而且价格昂贵，很难推广，真正能落地的还是社区养老或居家养老，养老服务可以是B2C或C2C，B2C可以由物业或商户提供，可以联合附近的社区医院提供各种上门服务； 社区医院通过平台还可以提供类似美国那种家庭医生服务，但服务的前提是需要定期缴纳会员费才能享受，商业模式类似保险业务，C2C类似钟点工护理，按需上门、按次收费，由就近的人提供，价格便宜； 为了服务安全起见，需要双方提前做好身份认证，并结合智慧门禁、智慧电梯等措施，保障服务人员上门的安全性和便利性。社区养老的好处就是便利、便宜，又能通过身份认证、生物识别等方式保障服务的安全性。 其他智慧社区方案，比如<strong>智慧安防</strong>等也是一样，但需要结合社区的特点，提供更接地气的服务和保障，这就是智慧社区的价值。 作为<strong>社区的管理者物业</strong>将是未来房地产尤其是住宅地产的新的增长点，而房地产增量市场将不可持续，因为土地资源有限、土地价格又不断升高，而人口却在负增长，物业将是房产保值增值的重要因素，因为就算再漂亮的商业地产，如果没有好的物业管理，也一样会萧条。 物业的商业模式不只是收物业费和广告费，其实有很多增值服务费可以挖掘，只要给物业和业主一个合适的平台，让物业来管理各自的小区并获得平台分成收益，这样既可以调动物业经营社区的积极性，也可以减轻平台统一运营的压力； 它不同于58同城的模式，58是自运营，而社区平台是分布式运营，因为社区平台不只是运营，还有治理，而物业是社区治理最佳人选，如果社区平台没有治理功能，智慧社区的价值将大大折扣； 比如社区可以提供一张社区地图，可以清晰知道XXX栋再哪里、怎么走，社区里哪里有公共厕所、周边商铺、社区医院等，就像旅游目的地的手绘攻略地图一样，而这个地图可以由物业和业主共同参与制作； 再比如物业可以通过社区平台让业主参与各种社区事物的投票，让业主参与小区治理，还可以将公共区域的水电费、广告费、绿化费、维修费等公开，让业主了解小区的情况； 另外物业可以通过社区平台的社交功能组织线下公益活动，通过电商拉赞助给社区养老困难的住户送温暖等； <strong>每个住户</strong>也都可以通过平台进行展示，比如通过视频直播向大家介绍自己。这个和抖音等视频直播平台的目的不同，每个住户之间都可以方便的线上打招呼并提醒一些邻里之间的事，比如楼上漏水了之类，这些都是社区平台不同于其他第三方平台的价值。 通过智慧社区物业服务会越来越透明化、便利化，业主的信任度、好感度也会越来越高，形成良性循环。</p>
]]></content>
      <categories>
        <category>新闻咨询</category>
      </categories>
  </entry>
  <entry>
    <title>智慧警务 公安指挥中心运行新模式</title>
    <url>/2020/07/31/%E6%99%BA%E6%85%A7%E8%AD%A6%E5%8A%A1-%E5%85%AC%E5%AE%89%E6%8C%87%E6%8C%A5%E4%B8%AD%E5%BF%83%E8%BF%90%E8%A1%8C%E6%96%B0%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h2 id="智慧公安，是大数据时代下进行治安管理的重要转型。"><a href="#智慧公安，是大数据时代下进行治安管理的重要转型。" class="headerlink" title="智慧公安，是大数据时代下进行治安管理的重要转型。"></a>智慧公安，是大数据时代下进行治安管理的重要转型。</h2><p>当随着社会经济的快速发展和科学技术的突飞猛进，影响政治稳定、社会安定的因素变得越来越复杂，公安机关打击违法犯罪、维护社会稳定的任务愈加繁重。随着物联网、云计算、移动互联网、5G、人工智能等新一代信息技术不断发展，公安信息化应用水平不断提升。推进信息化建设来提高警务决策指挥的能力和效率，是我国公安部门在新形势下维护国家安全和社会稳定、预防和打击暴力恐怖犯罪的战略举措，也对公安指挥中心的职能提出了更高的要求。</p>
<h2 id="一、当前我国公安指挥中心的职能"><a href="#一、当前我国公安指挥中心的职能" class="headerlink" title="一、当前我国公安指挥中心的职能"></a>一、当前我国公安指挥中心的职能</h2><p>公安指挥中心是公安机关实施接警处警、信息研判、决策参谋、指挥调度的综合职能部门，是实现快速反应、整体作战的警务指挥枢纽，集成了信息中心、监控中心、指挥中心等多项重要功能，而指挥中心大屏系统是辅助决策的核心系统。 <strong>1、接警处警</strong> 接警处警包括报警报案、举报线索、紧急求助、群众投诉等，还包括GPS报警、金融系统报警。这是指挥中心的对外职能。 <strong>2、收集报送信息</strong> 公安部在文件中明确规定：“凡是重大紧急信息的报送工作，统一归指挥中心负责。”因此，收集、整理、报送公安信息是指挥中心的又一重要职责。体现了指挥中心就是公安机关的信息枢纽的职能。 <strong>3、指挥、调度、协调、支持、服务</strong> 这是指挥中心的对内职能，可概括为“三个联动”：一是警种联动，是指指挥中心指挥、调度、协调各警种统一快速处置各类群体性、突发性事件。二是社会联动，是指指挥中心指挥、调度、协调政府各有关职能部门紧急处置各类社会应急求助。三是跨区域联动，是指指挥中心接受上级指挥中心的指令或请求其支援，从而实现跨市县、跨省市快速治安联防协作。 此外，指挥中心还担负着对各处警单位的处警工作进行检查指导、监督管理，表扬先进、鞭策后进，发现问题、及时纠正等职责。</p>
<h2 id="二、公安指挥中心亟待新变革"><a href="#二、公安指挥中心亟待新变革" class="headerlink" title="二、公安指挥中心亟待新变革"></a><strong>二、公安指挥中心亟待新变革</strong></h2><p>公安指挥中心是汇总全市社会治安情况和公安系统重要动态信息，分析研究治安形势，协助相关领导指挥调度警力，处置紧急治安案件、严重暴力性案件、重大自然灾害事故及其它重大治安问题的决策部门。它承担了预防、制止和侦查违法犯罪；防范、打击恐怖活动，维护社会治安秩序的重要作用。随着社会经济的发展、社会治安要素的不断膨胀，指挥中心工作越来越多而杂,小而细，涉及面广,项项业务都牵涉各个警种，事事关联公安工作大局。纵观现行公安机关指挥中心的工作模式，还不同程度地存在着各种问题,制约着指挥中心工作的健康发展。公安指挥中心运行模式亟待新变革。</p>
<h2 id="三、现行指挥中心工作痛点与解决方法"><a href="#三、现行指挥中心工作痛点与解决方法" class="headerlink" title="三、现行指挥中心工作痛点与解决方法"></a>三、现行指挥中心工作痛点与解决方法</h2><p>公安指挥中西承担了预防、制止和侦查违法犯罪；防范、打击恐怖活动，维护社会治安秩序的重要职能作用，纵观现行公安机关指挥中心的工作模式，还不同程度地存在着各种问题,制约着指挥中心工作的健康发展，公安指挥中心运行模式亟待新变革。 1、业务繁重，指挥中心不堪重负。公安指挥中心接处警范围宽泛，种类繁杂琐碎，传统的必须亲力亲为的业务处置方式，效率低下，面对繁重的工作任务，会造成指挥中心工作质量不足或者工作效率低下等问题。 数字冰雹智慧警务可视化决策平台，可将辖区内城市街道、地标点、建筑物、机动目标、视频数据等治安要素信息进行详细展现，辖区警力资源分布、实时警情信息、接处警情况、重点人员活动情况、舆情信息等治安态势一目了然，为警务人员进行治安维稳防控工作提供全面数据支持，大大省去人工监测的繁重工作；同时统可对重点区域的具体警力、警情、监控视频等信息进行实时查询，高效监测违法犯罪活动行为系，实现管辖区域内“人、车、地、事、物”的全面监控，辅助公安部门综合掌控大范围城市治安态势，大力提高社会治安维稳防控力度和工作效率，解决公安指挥中心面对繁重工作可能造成的工作质量不足或工作效率低下等问题。</p>
<p><img src="https://pic3.zhimg.com/80/v2-5df0cd5ed2caed12ae0fb2fadf6133fa_720w.jpg"></p>
<p>2、接处警环节多，工作效率滞后。快速、高质处理突发事件，全力维护社会秩序是公安指挥中心第一要务。 数字冰雹可视化系统可对各个地区、部门的警力资源进行统一管理，对警力资源在岗数量、脱岗数量、所在位置等要素进行可视化监测，通过指挥中心大屏即可实时交互警情信息、掌握现场警力布防状态、发布指挥调度指令、进行勤务效果督导，一旦发现警情，可一目了然警情第一现场、发生时间、路段等实时态势，还可智能化筛选查看警情周边应急队伍、车辆、物资、设备等警务资源，方便指挥人员对突发警情周边情况进行判定和分析；同时可实现一键直呼、协同调度多方警力资源，强化公安管理部门扁平化指挥调度、协同作战的能力，提升处置突发事件的效率，辅助提高公安管理威信力。</p>
<p><img src="https://pic1.zhimg.com/80/v2-1299c3902d38a0d02f72a396850043f8_720w.jpg"></p>
<h2 id="智慧警务-公安指挥中心运行新模式"><a href="#智慧警务-公安指挥中心运行新模式" class="headerlink" title="智慧警务 公安指挥中心运行新模式"></a>智慧警务 公安指挥中心运行新模式</h2><p>数字冰雹智慧警务可视化决策平台，在充分整合、利用信息技术与信息资源的基础上，挖掘数据信息的最大价值，从而实现对警务各领域的智慧化管理，是智慧警务的核心中枢。系统基于卓越的性能与强大的功能，对警务各领域的数据进行综合监测与可视化分析，为管理者提供可视、可管、可控的业务支撑平台，帮助管理者开拓警务运行新模式，减少繁重警务工作负担，实现驾驭数据，洞悉价值，充分提升用户决策效率和能力。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>构造函数</title>
    <url>/2019/06/01/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h2 id="闭包实现构造函数"><a href="#闭包实现构造函数" class="headerlink" title="闭包实现构造函数"></a>闭包实现构造函数</h2><pre><code>var Book=(function()&#123;
    //静态私有变量
    var bookNum=100;
    //静态私有方法
    function checkBook(name)&#123;&#125;
    //创建类
    function _book(newId, newName, newPrice)&#123;
        //私有变量
        //var name,price;
        //私有方法
        function checkId(id)&#123;&#125;
        //特权方法
        this.getName=function()&#123;&#125;
        this.getPrice=function()&#123;&#125;
        this.setName=function()&#123;&#125;
        this.setPrice=function()&#123;&#125;
        //公有属性
        this.id=newId;
        //公有方法
        this.copy=function()&#123;&#125;;
        bookNum++;
        if(bookNum&gt;100)
            throw new Error(&quot;只有100本书可以被创建&quot;)
        //构造器
        this.setName(name);
        this.setPrice(price);
    &#125;
    //构建原型
    _book.prototype = &#123;
        //静态公有变量
        isJsBook : false,
        //静态公有方法
        display : function()&#123;&#125;
    &#125;;
    //返回类
    return _book;
&#125;)()</code></pre>
<h2 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数，防止未new直接var mybook = Book();</span></span><br><span class="line"><span class="keyword">var</span> Book=<span class="function"><span class="keyword">function</span>(<span class="params">title,time,type</span>)</span>&#123;</span><br><span class="line">	<span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">this</span> <span class="keyword">instanceof</span> Book</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.title = title;</span><br><span class="line">		<span class="built_in">this</span>.time = time;</span><br><span class="line">		<span class="built_in">this</span>.type = type;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Book(title,time,type);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>注释规范</title>
    <url>/2019/05/27/%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="遵循标准"><a href="#遵循标准" class="headerlink" title="遵循标准"></a>遵循标准</h2><p>HTML注释规范写法应该遵循以下标准：</p>
<a id="more"></a>
<blockquote>
<p>Comments must start with the four character sequence U+003C LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS (&lt;!–). Following this sequence, the comment may have text, with the additional restriction that the text must not start with a single “&gt;” (U+003E) character, nor start with a U+002D HYPHEN-MINUS character (-) followed by a “&gt;” (U+003E) character, nor contain two consecutive U+002D HYPHEN-MINUS characters (–), nor end with a U+002D HYPHEN-MINUS character (-). Finally, the comment must be ended by the three character sequence U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS, U+003E GREATER-THAN SIGN (–&gt;).</p>
</blockquote>
<ul>
<li>必须以4个有序字符开始：编码为 U+003C LESS-THAN SIGN 的小于号, 编码为 U+0021 EXCLAMATION MARK 的感叹号, 编码为 U+002D HYPHEN-MINUS 横线, 编码为 U+002D HYPHEN-MINUS横线 ，即 “&lt;!–”</li>
<li>在此之后是注释内容，注释的内容有以下限制：<ul>
<li>不能以单个 “&gt;” (U+003E) 字符开始</li>
<li>不能以由 “-“（U+002D HYPHEN-MINUS）和 ”&gt;” (U+003E) 组合的字符开始，即 “-&gt;”</li>
<li>不能包含两个连续的 U+002D HYPHEN-MINUS 字符，即 “–”</li>
<li>不能以一个 U+002D HYPHEN-MINUS 字符结束，即 “-”</li>
</ul>
</li>
<li>必须以3个有序字符结束：U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS, U+003E GREATER-THAN SIGN，即 “–&gt;”</li>
</ul>
<p>标准写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Comment Text--&gt;</span></span><br></pre></td></tr></table></figure>

<p>错误的写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&gt;The Wrong Comment Text--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!---&gt;The Wrong Comment Text--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--The--Wrong--Comment Text--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--The Wrong Comment Text---&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考 <a href="http://www.w3.org/">www.w3.org</a> <a href="http://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#comments">#Comments</a> </p>
<h2 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>一般用于简单的描述，如某些状态描述、属性描述等</p>
<p>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</p>
<p><em>推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Comment Text --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- Comment Text --&gt;</span>	</span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- Comment Text --&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="模块注释"><a href="#模块注释" class="headerlink" title="模块注释"></a>模块注释</h3><p>一般用于描述模块的名称以及模块开始与结束的位置</p>
<p>注释内容前后各一个空格字符，<code>&lt;!-- S Comment Text --&gt;</code> 表示模块开始，<code>&lt;!-- E Comment Text --&gt;</code> 表示模块结束，模块与模块之间相隔一行</p>
<p><em>推荐写法：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- S Comment Text A --&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_a&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text A --&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!-- S Comment Text B --&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_b&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text B --&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐写法：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- S Comment Text A --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_a&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text A --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- S Comment Text B --&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_b&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text B --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="嵌套模块注释"><a href="#嵌套模块注释" class="headerlink" title="嵌套模块注释"></a>嵌套模块注释</h3><p>当模块注释内再出现模块注释的时候，为了突出主要模块，嵌套模块不再使用 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- S Comment Text --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text --&gt;</span></span><br></pre></td></tr></table></figure>

<p>而改用 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /Comment Text --&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释写在模块结尾标签底部，单独一行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- S Comment Text A --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_a&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_b&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /mod_b --&gt;</span></span><br><span class="line">    	</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_c&quot;</span>&gt;</span></span><br><span class="line">    	...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /mod_c --&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text A --&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>rules</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器兼容性检查插件</title>
    <url>/2020/05/23/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E6%A3%80%E6%9F%A5%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install &#39;akbigdata-browser-detect&#39;;</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import BrowserDetect from &#39;akbigdata-browser-detect&#39;;</span><br><span class="line">new BrowserDetect(</span><br><span class="line">  &#123;</span><br><span class="line">    recommend: &#123;</span><br><span class="line">      chrome: 76,</span><br><span class="line">      firefox: 76,</span><br><span class="line">      ie: 11,</span><br><span class="line">      360: 56,</span><br><span class="line">      uc: 11,</span><br><span class="line">      kugou: 11</span><br><span class="line">    &#125;,</span><br><span class="line">    supported: &#123;</span><br><span class="line">      firefox: 60,</span><br><span class="line">      mobile: false</span><br><span class="line">    &#125;,</span><br><span class="line">    unsupported: &#123;</span><br><span class="line">      msie: 10,</span><br><span class="line">      chrome: 76.0,</span><br><span class="line">      firefox: &#39;33&#39;,</span><br><span class="line">      mobile: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p> </p>
<h2 id="打包配置-vue-config-js"><a href="#打包配置-vue-config-js" class="headerlink" title="打包配置 vue.config.js"></a><strong>打包配置 vue.config.js</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chainWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">    config.module.rule(&#39;compile&#39;)</span><br><span class="line">      .test(&#x2F;\\.js$&#x2F;)</span><br><span class="line">      .include</span><br><span class="line">      .add(resolve(&#39;node\_modules&#x2F;\_akbigdata-browser-detect@1.0.7@akbigdata-browser-detect&#x2F;&#39;))</span><br><span class="line">      .add(resolve(&#39;node\_modules&#x2F;akbigdata-browser-detect&#x2F;&#39;))</span><br><span class="line">      .end()</span><br><span class="line">      .use(&#39;babel&#39;)</span><br><span class="line">      .loader(&#39;babel-loader&#39;)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        presets: \[</span><br><span class="line">          &#39;@vue&#x2F;babel-preset-app&#39;</span><br><span class="line">        \]</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  \_akbigdata-browser-detect@1.0.7改为当前版本</span><br></pre></td></tr></table></figure>
<p><strong>或者</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transpileDependencies: \[&#39;akbigdata-browser-detect&#39;\]</span><br></pre></td></tr></table></figure>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a><strong>参数说明</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据navigator.userAgent判断是否支持</span><br></pre></td></tr></table></figure>
<p><strong>supported 支持的浏览器最低版本</strong></p>
<p><strong>unsupported 不支持的浏览器最高版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> \&#96;chrome\&#96;</span><br><span class="line">  \&#96;firefox\&#96;</span><br><span class="line">  \&#96;msie\&#96;</span><br><span class="line">  \&#96;msedge\&#96;</span><br><span class="line">  \&#96;safari\&#96;</span><br><span class="line">  \&#96;yandexbrowser\&#96;</span><br><span class="line">  \&#96;android\&#96;</span><br><span class="line">  \&#96;ios\&#96;</span><br><span class="line">  \&#96;opera\&#96;</span><br><span class="line">  \&#96;samsungBrowser\&#96;</span><br><span class="line">  \&#96;phantom\&#96;</span><br><span class="line">  \&#96;blackberry\&#96;</span><br><span class="line">  \&#96;webos\&#96;</span><br><span class="line">  \&#96;silk\&#96;</span><br><span class="line">  \&#96;bada\&#96;</span><br><span class="line">  \&#96;tizen\&#96;</span><br><span class="line">  \&#96;seamonkey\&#96;</span><br><span class="line">  \&#96;sailfish\&#96;</span><br><span class="line">  \&#96;ucbrowser\&#96;</span><br><span class="line">  \&#96;qupzilla\&#96;</span><br><span class="line">  \&#96;vivaldi\&#96;</span><br><span class="line">  \&#96;sleipnir\&#96;</span><br><span class="line">  \&#96;kMeleon\&#96;</span><br><span class="line"></span><br><span class="line">**recommend 配置项**</span><br><span class="line"></span><br><span class="line"> chrome: 76,</span><br><span class="line">  firefox: 76,</span><br><span class="line">  ie: 11,</span><br><span class="line">  360: 56,</span><br><span class="line">  uc: 11,</span><br><span class="line">  kugou: 11</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/2019/06/01/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建玛丽的类</span></span><br><span class="line"><span class="keyword">var</span> MarryState = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//内部私有变量</span></span><br><span class="line">	<span class="keyword">var</span> _currentState = &#123;&#125;,</span><br><span class="line">		<span class="comment">//状态和方法的映射</span></span><br><span class="line">		states = &#123;</span><br><span class="line">			jump : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="comment">//跳</span></span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;jump&quot;</span>)</span><br><span class="line">			&#125;,</span><br><span class="line">			move : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="comment">//移动</span></span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;move&quot;</span>)</span><br><span class="line">			&#125;,</span><br><span class="line">			shoot : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="comment">//射击</span></span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;shoot&quot;</span>)</span><br><span class="line">			&#125;,</span><br><span class="line">			squat : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="comment">//蹲下</span></span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;squat&quot;</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//动作控制类</span></span><br><span class="line">		Action = &#123;</span><br><span class="line">			<span class="comment">//改变状态方法</span></span><br><span class="line">			changeState : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">				<span class="comment">//重置动作</span></span><br><span class="line">				_currentState = &#123;&#125;;</span><br><span class="line">				<span class="comment">//追加动作</span></span><br><span class="line">				<span class="function"><span class="title">if</span>(<span class="params">arg.length</span>)</span>&#123;</span><br><span class="line">					<span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span>,len = arg.length;i&lt;len;i++</span>)</span>&#123;</span><br><span class="line">						_currentState[arg[i]] = <span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="comment">//执行动作</span></span><br><span class="line">			goes : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="comment">//遍历执行动作</span></span><br><span class="line">				<span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i <span class="keyword">in</span> _currentState</span>)</span>&#123;</span><br><span class="line">					states[i] &amp;&amp; states[i]();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	<span class="comment">//返回动作类</span></span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		change : Action.changeState,</span><br><span class="line">		goes : Action.goes</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//new  marry个人</span></span><br><span class="line"><span class="keyword">var</span> marry = <span class="keyword">new</span> MarryState();</span><br><span class="line"><span class="comment">//方法的调用</span></span><br><span class="line">marry</span><br><span class="line">	.change(<span class="string">&quot;jump&quot;</span>,<span class="string">&quot;shoot&quot;</span>)</span><br><span class="line">	.goes()</span><br><span class="line">	.change(<span class="string">&quot;move&quot;</span>,<span class="string">&quot;shoot&quot;</span>)</span><br><span class="line">	.goes()</span><br><span class="line">	.change(<span class="string">&quot;squat&quot;</span>,<span class="string">&quot;shoot&quot;</span>)</span><br><span class="line">	.goes();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>用户体验升级指南—规避用户“无意识错误”的防错法则</title>
    <url>/2020/05/22/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E5%8D%87%E7%BA%A7%E6%8C%87%E5%8D%97-%E8%A7%84%E9%81%BF%E7%94%A8%E6%88%B7%E6%97%A0%E6%84%8F%E8%AF%86%E9%94%99%E8%AF%AF%E7%9A%84%E9%98%B2/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>

<p>用户在使用软件时不可避免的会进行误操作； 应如何通过设计，使得犯错变得困难，从而提升产品易用性。</p>
<p><strong><img src="https://img.zcool.cn/community/01d40e5ec0df49a8012148144273e6.png"></strong><br><strong>大纲要点：</strong><br>1.行为预判<br>2.多重保险<br>3.限制行为<br>4.唯一性原则<br>5.默认项复用<br>6.特征明显  <br><strong>1.**</strong>行为预判,走在用户前面**<br>通过固定场景，判断用户接下来的操作，或对某些操作做是否执行的处理。<br>①.输入银行卡号，软件在你输入完成时自动识别发卡行，避免手动选择错银行导致转款失败。 <img src="https://img.zcool.cn/community/0161855ebfb691a801214814171cfd.png"><br>②支付宝转账，在聊天窗口输入纯数字，系统会自动弹出“给对方转账xx元”的悬浮条提示，点击悬浮条即可进行转账操作。对用户误把转账发送成信息的行为进行预判，提升产品易用性。 <img src="https://img.zcool.cn/community/0181855ebfb692a801207200dbdb9a.png"><br><strong>2.多重保险 ，二次确认执行。</strong><br>生活中很容易产生对文件进行误删或提交的误操作，多重保险是对不可逆的操作进行双重确认后再实施执行。 如ios信息删除页面，删除信息需进行以下三个操作：<br>①左滑调出删除按钮（把“隐性”特征转化为“显性”特征）<br>②点击删除，“确认删除”弹窗弹出<br>③确认删除，多重”确认“降低误操作 <img src="https://img.zcool.cn/community/01bfd85ebfb690a801207200db4d65.png"><br><strong>3.**</strong>限制行为，使错误无法发生。** 在固定字符的表单中。对其输入的内容自动格式化， 如支付宝注册页面，只提供数字键盘且只能输入11位数，从而限制用户行为。 <img src="https://img.zcool.cn/community/0174fb5ebfb5f3a801207200481193.png"> 直接从源头杜绝误触其他字符或多输入的误操作。 当你开始输入时，系统会自动将手机号隔成XXX XXXX XXXX的格式,方便用户以最快的速度核对已输入的手机号，毕竟相对于一长串的数字，被分成小块的数字组合更容易被记住和看懂。<br><strong>4.唯一性原则,一个页面干一件事</strong> 按照顺序分步进行，避免用户在一个页面完成多个任务。 如接收验证码时，保持页面的功能性是唯一的，手机号注册页只能填写手机号，验证码页面只能填写验证码。利用页面的唯一性减少误操作率。 <img src="https://img.zcool.cn/community/0178305ebfb692a8012148149280e5.png"><br><strong>5.默认项复用，优先预知用户所想</strong> 同一件事做两次出错的几率肯定比做一次要大得多，对用户已录入过的信息储存，以便如需再次录入时的直接填充。 如寄快递购物时的填写地址，定机酒时输入人物信息，直接复用历史信息，省时又不会出错。 <img src="https://img.zcool.cn/community/01649c5ebfb692a8012072007479cb.png"><br><strong>6.特征明显，对比突出可适当夸大</strong> 视觉效果上，夸大功能性特征，能够有效地使用户准确获知该区域可实现的功能，向用户呈现清晰的行为结果。<br>①如删除弹窗，按钮中文字的描述应决定用户接下来的行为。 “确认删除”是用户行为，”确定“则是对该弹窗内容的时间判断，用户是不会对弹窗内容进行细看的，所以在按钮文字上就应明确用户，准确地告知按按钮所对应的行为。 <img src="https://img.zcool.cn/community/01d5645ebfbf90a801207200789c27.png"><br>②如Iphone的关机界面，app 内各个入口删除等可操作按钮 <img src="https://img.zcool.cn/community/014dd85ebfb693a801214814dce678.png"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>用户认证</title>
    <url>/2019/07/27/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p>主要讲讲JWT 和 session</p>
<a id="more"></a>
<h2 id="session与cookie"><a href="#session与cookie" class="headerlink" title="session与cookie"></a>session与cookie</h2><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p>
<blockquote>
<p>服务器可以主动清除session<br>session保存在服务器端<br>结合cookie使用，较为灵活，兼容性较好<br>缺点<br>cookie + session在跨域场景表现并不好<br>如果是分布式部署，需要做多机共享session机制，实现方法可将session存储到数据库中或者redis中<br>基于 cookie 的机制很容易被 CSRF<br>查询session信息可能会有数据库查询操作<br>cookie存储大小约为4kb</p>
</blockquote>
<h2 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h2><p>JWT基本上由.分隔的三部分组成，分别是头部，有效载荷和签名<br>优点<br>可以实现多台服务的信息共享<br>缺点<br>JWT时效性比较差<br>JWT TOKEN一般数据比较长<br>解决办法<br>将JWT token 存入redis中，用户传入是，先在redis中通过简单的token获取全部的token。然后在进行操作，同时退出登录，权限操作的时候也可快捷的更改用户的当前状态。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于用户的认证，使用JWT TOKEN更加方便。但是不要把太多的用户信息存储在JWT-TOKEN中去，我们可以采用结合的方法，对于用户的一些常用信息可以存储在cookie中去，采用互相结合的办法。但是重要的是，用户的关键信息都需要做加密处理。这样才能保证用户的信息安。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>用户认证</tag>
      </tags>
  </entry>
  <entry>
    <title>百度地图与腾讯地图坐标转换</title>
    <url>/2020/07/21/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E4%B8%8E%E8%85%BE%E8%AE%AF%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>百度地图经纬度转腾讯地图经纬度</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function  bMapTransQQMap(lng,lat)&#123;</span><br><span class="line">        let x\_pi &#x3D; 3.14159265358979324 \* 3000.0 &#x2F; 180.0;</span><br><span class="line">        let x &#x3D; lng - 0.0065;</span><br><span class="line">        let y &#x3D; lat - 0.006;</span><br><span class="line">        let z &#x3D; Math.sqrt(x \* x + y \* y) - 0.00002 \* Math.sin(y \* x\_pi);</span><br><span class="line">        let theta &#x3D; Math.atan2(y, x) - 0.000003 \* Math.cos(x \* x\_pi);</span><br><span class="line">        let lngs &#x3D; z \* Math.cos(theta);</span><br><span class="line">        let lats &#x3D; z \* Math.sin(theta);</span><br><span class="line">        return &#123;</span><br><span class="line">            lng: lngs,</span><br><span class="line">            lat: lats</span><br><span class="line">        &#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>
<p><strong>腾讯地图经纬度转百度地图经纬度</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function qqMapTransBMap(lng,lat)&#123;</span><br><span class="line">        let x\_pi &#x3D; 3.14159265358979324 \* 3000.0 &#x2F; 180.0;</span><br><span class="line">        let x &#x3D; lng;</span><br><span class="line">        let y &#x3D; lat;</span><br><span class="line">        let z &#x3D; Math.sqrt(x \* x + y \* y) + 0.00002 \* Math.sin(y \* x\_pi);</span><br><span class="line">        let theta &#x3D; Math.atan2(y, x) + 0.000003 \* Math.cos(x \* x\_pi);</span><br><span class="line">        let lngs &#x3D; z \* Math.cos(theta) + 0.0065;</span><br><span class="line">        let lats &#x3D; z \* Math.sin(theta) + 0.006;</span><br><span class="line">        return &#123;</span><br><span class="line">            lng: lngs,</span><br><span class="line">            lat: lats</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>移动端验证原型合集</title>
    <url>/2020/07/27/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%AA%8C%E8%AF%81%E5%8E%9F%E5%9E%8B%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h2 id="01-普通的滑动验证"><a href="#01-普通的滑动验证" class="headerlink" title="01 普通的滑动验证"></a>01 普通的滑动验证</h2><p>这种是验证是滑动验证里面最简单的验证方式的，只需要滑动滑块到最右端就能完成，这种验证方法的优势是操作简单，正是因为他简单，所以容易被破译。 <img src="http://image.woshipm.com/wp-files/2020/07/ilYbHfHIULbJrtts8Jhu.gif"></p>
<h2 id="02-拼图滑动验证"><a href="#02-拼图滑动验证" class="headerlink" title="02 拼图滑动验证"></a>02 拼图滑动验证</h2><p>拼图滑动验证是在普通滑动验证的基础上加工行程的，原理和普通滑动验证类似，增加了拼图图片，而且每次拼图位置随机，这样可以增大破译的难度，同时增加用户验证的趣味性。 <img src="http://image.woshipm.com/wp-files/2020/07/lbbCuABI4RYZA5BnqgmB.gif"></p>
<h2 id="03-旋转图片验证"><a href="#03-旋转图片验证" class="headerlink" title="03 旋转图片验证"></a>03 旋转图片验证</h2><p>拼图滑动验证同样是在普通滑动验证的基础上加工行程的，原理和普通滑动验证类似，增加了图片随滑动旋转，摆正图片后验证成功，而且每次图片旋转角度随机，这样同样可以增大破译的难度，同时增加用户验证的趣味性。 <img src="http://image.woshipm.com/wp-files/2020/07/yyg4FNnaHqA1Ve7ZLOel.gif"></p>
<h2 id="04-手势验证"><a href="#04-手势验证" class="headerlink" title="04 手势验证"></a>04 手势验证</h2><p>手势验证是跟着图片绘制手势即可，图片和手势是随机的。 <img src="http://image.woshipm.com/wp-files/2020/07/1NGXDujcSlcvdgPn9fMH.gif"></p>
<h2 id="05-随机码验证"><a href="#05-随机码验证" class="headerlink" title="05 随机码验证"></a>05 随机码验证</h2><p>这种是最常见的验证方式，随机生成字符，输入同样字符验证成功，对用户而言，操作会有点麻烦，而且现在ai自学习技术要破解这种验证方式也不难。 <img src="http://image.woshipm.com/wp-files/2020/07/L4OFuUp3h3VS4WYsflS1.gif"></p>
<h2 id="06-文字排序验证"><a href="#06-文字排序验证" class="headerlink" title="06 文字排序验证"></a>06 文字排序验证</h2><p>这种验证是上面随机码验证的进化版，省去了用户输入的操作，直接按顺序点击即可，所以更受用户的欢迎。 <img src="http://image.woshipm.com/wp-files/2020/07/HXALFrMnJareHEUpsOLq.gif"></p>
<h2 id="07-短信验证"><a href="#07-短信验证" class="headerlink" title="07 短信验证"></a>07 短信验证</h2><p>短信验证，通过系统向用户手机发送随机验证短信，用户输入验证码和短信一致才能通过验证。这种验证方式的安全系数高，但是用户操作难度大，需要等待短信时间，而且容易输错。一般向银行转账，或者手机注册登录时才需要用到该验证。 <img src="http://image.woshipm.com/wp-files/2020/07/rVkionVsmfJJsoYHQO7b.gif"></p>
<h2 id="08-九宫格验证"><a href="#08-九宫格验证" class="headerlink" title="08 九宫格验证"></a>08 九宫格验证</h2><p>九宫格验证一般是用户事先设置好手势密码，需要校验是正确画出手势即可通过验证。这种验证方式的安全系数高，而且操作难度不大。 <img src="http://image.woshipm.com/wp-files/2020/07/3XfnTzaRYUb9hvDPRcSB.gif"></p>
<h2 id="09-指纹验证"><a href="#09-指纹验证" class="headerlink" title="09 指纹验证"></a>09 指纹验证</h2><p>通过验证用户的指纹的方式进行验证，安全系数极高，而且操作简单，但是要获取用户指纹的权限。 <img src="http://image.woshipm.com/wp-files/2020/07/dbIBMtAk9Fn4O6jmmaZF.png"></p>
<h2 id="10-人脸验证"><a href="#10-人脸验证" class="headerlink" title="10 人脸验证"></a>10 人脸验证</h2><p>通过对面人脸特征的信息进行验证，这种验证方式安全系数最高，但是操作难度大，而且需要获取人脸的信息。 <img src="http://image.woshipm.com/wp-files/2020/07/itSJFogklc3WCasYOGSp.gif"> 总的来说，各种验证方式各有利弊，大家可以根据实际需求使用。</p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2019/06/01/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="策略算法"><a href="#策略算法" class="headerlink" title="策略算法"></a>策略算法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表单验证对象</span></span><br><span class="line"><span class="keyword">var</span> InputStrategy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> strategy=&#123;</span><br><span class="line">		<span class="comment">//是否为空</span></span><br><span class="line">		notNull : <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="regexp">/\s+/</span>.test(value)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;请输入内容&quot;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//是否为数字</span></span><br><span class="line">		number : <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="regexp">/^[0-9]+(\.[0-9]+)?$/</span>.test(value)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;请输入数字&quot;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//是否是手机号</span></span><br><span class="line">		phone : <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="regexp">/^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\d&#123;8&#125;$/</span>.test(value)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;请输入正确的电话&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="comment">//验证</span></span><br><span class="line">		check : <span class="function"><span class="keyword">function</span>(<span class="params">type,value</span>)</span>&#123;</span><br><span class="line">			value = <span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span> ? value.trim() : value;</span><br><span class="line">			<span class="keyword">return</span> strategy[type] ? strategy[type](value):<span class="string">&quot;没有该类型&quot;</span>;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//添加验证类型</span></span><br><span class="line">		addStrategy :<span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line">			strategy[type] = fn</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>简体繁体切换</title>
    <url>/2020/07/04/%E7%AE%80%E4%BD%93%E7%B9%81%E4%BD%93%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>原生简体繁体封装，在vue项目中引入调用 1.首先要创建一个公共的js文件   代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; setToken, getToken &#125; from &#39;.&#x2F;zhCook&#39; &#x2F;&#x2F; 封装cookie存储</span><br><span class="line">&#x2F;&#x2F; 网页简繁体转换</span><br><span class="line">&#x2F;&#x2F; 本js用于客户在网站页面选择繁体中文或简体中文显示，默认是正常显示，即简繁体同时显示</span><br><span class="line">&#x2F;&#x2F; 在用户第一次访问网页时,会自动检测客户端语言进行操作并提示.此功能可关闭</span><br><span class="line">&#x2F;&#x2F; 本程序只在UTF8编码下测试过，不保证其他编码有效</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; -------------- 以下参数大部分可以更改 --------------------</span><br><span class="line">&#x2F;&#x2F; s &#x3D; simplified 简体中文 t &#x3D; traditional 繁体中文 n &#x3D; normal 正常显示</span><br><span class="line">&#x2F;&#x2F; const zhDefault &#x3D; &#39;n&#39; &#x2F;&#x2F; 默认语言，请不要改变</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 简体繁体对照字表,可以自行s替换</span><br><span class="line">const zhS &#x3D; &#39;皑蔼碍爱翱袄奥坝罢摆败颁办绊帮绑镑谤剥饱宝报鲍辈贝钡狈备惫绷笔毕毙闭边编贬变辩辫鳖瘪濒滨宾摈饼拨钵铂驳卜补参蚕残惭惨灿苍舱仓沧厕侧册测层诧搀掺蝉馋谗缠铲产阐颤场尝长偿肠厂畅钞车彻尘陈衬撑称惩诚骋痴迟驰耻齿炽冲虫宠畴踌筹绸丑橱厨锄雏础储触处传疮闯创锤纯绰辞词赐聪葱囱从丛凑窜错达带贷担单郸掸胆惮诞弹当挡党荡档捣岛祷导盗灯邓敌涤递缔点垫电淀钓调迭谍叠钉顶锭订东动栋冻斗犊独读赌镀锻断缎兑队对吨顿钝夺鹅额讹恶饿儿尔饵贰发罚阀珐矾钒烦范贩饭访纺飞废费纷坟奋愤粪丰枫锋风疯冯缝讽凤肤辐抚辅赋复负讣妇缚该钙盖干赶秆赣冈刚钢纲岗皋镐搁鸽阁铬个给龚宫巩贡钩沟构购够蛊顾剐关观馆惯贯广规硅归龟闺轨诡柜贵刽辊滚锅国过骇韩汉阂鹤贺横轰鸿红后壶护沪户哗华画划话怀坏欢环还缓换唤痪焕涣黄谎挥辉毁贿秽会烩汇讳诲绘荤浑伙获货祸击机积饥讥鸡绩缉极辑级挤几蓟剂济计记际继纪夹荚颊贾钾价驾歼监坚笺间艰缄茧检碱硷拣捡简俭减荐槛鉴践贱见键舰剑饯渐溅涧浆蒋桨奖讲酱胶浇骄娇搅铰矫侥脚饺缴绞轿较秸阶节茎惊经颈静镜径痉竞净纠厩旧驹举据锯惧剧鹃绢杰洁结诫届紧锦仅谨进晋烬尽劲荆觉决诀绝钧军骏开凯颗壳课垦恳抠库裤夸块侩宽矿旷况亏岿窥馈溃扩阔蜡腊莱来赖蓝栏拦篮阑兰澜谰揽览懒缆烂滥捞劳涝乐镭垒类泪篱离里鲤礼丽厉励砾历沥隶俩联莲连镰怜涟帘敛脸链恋炼练粮凉两辆谅疗辽镣猎临邻鳞凛赁龄铃凌灵岭领馏刘龙聋咙笼垄拢陇楼娄搂篓芦卢颅庐炉掳卤虏鲁赂禄录陆驴吕铝侣屡缕虑滤绿峦挛孪滦乱抡轮伦仑沦纶论萝罗逻锣箩骡骆络妈玛码蚂马骂吗买麦卖迈脉瞒馒蛮满谩猫锚铆贸么霉没镁门闷们锰梦谜弥觅绵缅庙灭悯闽鸣铭谬谋亩钠纳难挠脑恼闹馁腻撵捻酿鸟聂啮镊镍柠狞宁拧泞钮纽脓浓农疟诺欧鸥殴呕沤盘庞国爱赔喷鹏骗飘频贫苹凭评泼颇扑铺朴谱脐齐骑岂启气弃讫牵扦钎铅迁签谦钱钳潜浅谴堑枪呛墙蔷强抢锹桥乔侨翘窍窃钦亲轻氢倾顷请庆琼穷趋区躯驱龋颧权劝却鹊让饶扰绕热韧认纫荣绒软锐闰润洒萨鳃赛伞丧骚扫涩杀纱筛晒闪陕赡缮伤赏烧绍赊摄慑设绅审婶肾渗声绳胜圣师狮湿诗尸时蚀实识驶势释饰视试寿兽枢输书赎属术树竖数帅双谁税顺说硕烁丝饲耸怂颂讼诵擞苏诉肃虽绥岁孙损笋缩琐锁獭挞抬摊贪瘫滩坛谭谈叹汤烫涛绦腾誊锑题体屉条贴铁厅听烃铜统头图涂团颓蜕脱鸵驮驼椭洼袜弯湾顽万网韦违围为潍维苇伟伪纬谓卫温闻纹稳问瓮挝蜗涡窝呜钨乌诬无芜吴坞雾务误锡牺袭习铣戏细虾辖峡侠狭厦锨鲜纤咸贤衔闲显险现献县馅羡宪线厢镶乡详响项萧销晓啸蝎协挟携胁谐写泻谢锌衅兴汹锈绣虚嘘须许绪续轩悬选癣绚学勋询寻驯训讯逊压鸦鸭哑亚讶阉烟盐严颜阎艳厌砚彦谚验鸯杨扬疡阳痒养样瑶摇尧遥窑谣药爷页业叶医铱颐遗仪彝蚁艺亿忆义诣议谊译异绎荫阴银饮樱婴鹰应缨莹萤营荧蝇颖哟拥佣痈踊咏涌优忧邮铀犹游诱舆鱼渔娱与屿语吁御狱誉预驭鸳渊辕园员圆缘远愿约跃钥岳粤悦阅云郧匀陨运蕴酝晕韵杂灾载攒暂赞赃脏凿枣灶责择则泽贼赠扎札轧铡闸诈斋债毡盏斩辗崭栈战绽张涨帐账胀赵蛰辙锗这贞针侦诊镇阵挣睁狰帧郑证织职执纸挚掷帜质钟终种肿众诌轴皱昼骤猪诸诛烛瞩嘱贮铸筑驻专砖转赚桩庄装妆壮状锥赘坠缀谆浊兹资渍踪综总纵邹诅组钻致钟么为只凶准启板里雳余链泄&#39;</span><br><span class="line">const zhT &#x3D; &#39;皚藹礙愛翺襖奧壩罷擺敗頒辦絆幫綁鎊謗剝飽寶報鮑輩貝鋇狽備憊繃筆畢斃閉邊編貶變辯辮鼈癟瀕濱賓擯餅撥缽鉑駁蔔補參蠶殘慚慘燦蒼艙倉滄廁側冊測層詫攙摻蟬饞讒纏鏟産闡顫場嘗長償腸廠暢鈔車徹塵陳襯撐稱懲誠騁癡遲馳恥齒熾沖蟲寵疇躊籌綢醜櫥廚鋤雛礎儲觸處傳瘡闖創錘純綽辭詞賜聰蔥囪從叢湊竄錯達帶貸擔單鄲撣膽憚誕彈當擋黨蕩檔搗島禱導盜燈鄧敵滌遞締點墊電澱釣調叠諜疊釘頂錠訂東動棟凍鬥犢獨讀賭鍍鍛斷緞兌隊對噸頓鈍奪鵝額訛惡餓兒爾餌貳發罰閥琺礬釩煩範販飯訪紡飛廢費紛墳奮憤糞豐楓鋒風瘋馮縫諷鳳膚輻撫輔賦複負訃婦縛該鈣蓋幹趕稈贛岡剛鋼綱崗臯鎬擱鴿閣鉻個給龔宮鞏貢鈎溝構購夠蠱顧剮關觀館慣貫廣規矽歸龜閨軌詭櫃貴劊輥滾鍋國過駭韓漢閡鶴賀橫轟鴻紅後壺護滬戶嘩華畫劃話懷壞歡環還緩換喚瘓煥渙黃謊揮輝毀賄穢會燴彙諱誨繪葷渾夥獲貨禍擊機積饑譏雞績緝極輯級擠幾薊劑濟計記際繼紀夾莢頰賈鉀價駕殲監堅箋間艱緘繭檢堿鹼揀撿簡儉減薦檻鑒踐賤見鍵艦劍餞漸濺澗漿蔣槳獎講醬膠澆驕嬌攪鉸矯僥腳餃繳絞轎較稭階節莖驚經頸靜鏡徑痙競淨糾廄舊駒舉據鋸懼劇鵑絹傑潔結誡屆緊錦僅謹進晉燼盡勁荊覺決訣絕鈞軍駿開凱顆殼課墾懇摳庫褲誇塊儈寬礦曠況虧巋窺饋潰擴闊蠟臘萊來賴藍欄攔籃闌蘭瀾讕攬覽懶纜爛濫撈勞澇樂鐳壘類淚籬離裏鯉禮麗厲勵礫曆瀝隸倆聯蓮連鐮憐漣簾斂臉鏈戀煉練糧涼兩輛諒療遼鐐獵臨鄰鱗凜賃齡鈴淩靈嶺領餾劉龍聾嚨籠壟攏隴樓婁摟簍蘆盧顱廬爐擄鹵虜魯賂祿錄陸驢呂鋁侶屢縷慮濾綠巒攣孿灤亂掄輪倫侖淪綸論蘿羅邏鑼籮騾駱絡媽瑪碼螞馬罵嗎買麥賣邁脈瞞饅蠻滿謾貓錨鉚貿麽黴沒鎂門悶們錳夢謎彌覓綿緬廟滅憫閩鳴銘謬謀畝鈉納難撓腦惱鬧餒膩攆撚釀鳥聶齧鑷鎳檸獰甯擰濘鈕紐膿濃農瘧諾歐鷗毆嘔漚盤龐國愛賠噴鵬騙飄頻貧蘋憑評潑頗撲鋪樸譜臍齊騎豈啓氣棄訖牽扡釺鉛遷簽謙錢鉗潛淺譴塹槍嗆牆薔強搶鍬橋喬僑翹竅竊欽親輕氫傾頃請慶瓊窮趨區軀驅齲顴權勸卻鵲讓饒擾繞熱韌認紉榮絨軟銳閏潤灑薩鰓賽傘喪騷掃澀殺紗篩曬閃陝贍繕傷賞燒紹賒攝懾設紳審嬸腎滲聲繩勝聖師獅濕詩屍時蝕實識駛勢釋飾視試壽獸樞輸書贖屬術樹豎數帥雙誰稅順說碩爍絲飼聳慫頌訟誦擻蘇訴肅雖綏歲孫損筍縮瑣鎖獺撻擡攤貪癱灘壇譚談歎湯燙濤縧騰謄銻題體屜條貼鐵廳聽烴銅統頭圖塗團頹蛻脫鴕馱駝橢窪襪彎灣頑萬網韋違圍爲濰維葦偉僞緯謂衛溫聞紋穩問甕撾蝸渦窩嗚鎢烏誣無蕪吳塢霧務誤錫犧襲習銑戲細蝦轄峽俠狹廈鍁鮮纖鹹賢銜閑顯險現獻縣餡羨憲線廂鑲鄉詳響項蕭銷曉嘯蠍協挾攜脅諧寫瀉謝鋅釁興洶鏽繡虛噓須許緒續軒懸選癬絢學勳詢尋馴訓訊遜壓鴉鴨啞亞訝閹煙鹽嚴顔閻豔厭硯彥諺驗鴦楊揚瘍陽癢養樣瑤搖堯遙窯謠藥爺頁業葉醫銥頤遺儀彜蟻藝億憶義詣議誼譯異繹蔭陰銀飲櫻嬰鷹應纓瑩螢營熒蠅穎喲擁傭癰踴詠湧優憂郵鈾猶遊誘輿魚漁娛與嶼語籲禦獄譽預馭鴛淵轅園員圓緣遠願約躍鑰嶽粵悅閱雲鄖勻隕運蘊醞暈韻雜災載攢暫贊贓髒鑿棗竈責擇則澤賊贈紮劄軋鍘閘詐齋債氈盞斬輾嶄棧戰綻張漲帳賬脹趙蟄轍鍺這貞針偵診鎮陣掙睜猙幀鄭證織職執紙摯擲幟質鍾終種腫衆謅軸皺晝驟豬諸誅燭矚囑貯鑄築駐專磚轉賺樁莊裝妝壯狀錐贅墜綴諄濁茲資漬蹤綜總縱鄒詛組鑽緻鐘麼為隻兇準啟闆裡靂餘鍊洩&#39;</span><br><span class="line">&#x2F;&#x2F; eslint-disable-next-line no-extend-native</span><br><span class="line">String.prototype.tran &#x3D; function () &#123;</span><br><span class="line">  let s1 &#x3D; &#39;&#39;</span><br><span class="line">  let s2 &#x3D; &#39;&#39;</span><br><span class="line">  const zhChoose &#x3D; getToken()</span><br><span class="line">  if (zhChoose &#x3D;&#x3D;&#x3D; &#39;t&#39;) &#123;</span><br><span class="line">    s1 &#x3D; zhS</span><br><span class="line">    s2 &#x3D; zhT</span><br><span class="line">  &#125; else if (zhChoose &#x3D;&#x3D;&#x3D; &#39;s&#39;) &#123;</span><br><span class="line">    s1 &#x3D; zhT</span><br><span class="line">    s2 &#x3D; zhS</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line">  let a &#x3D; &#39;&#39;</span><br><span class="line">  for (let i &#x3D; 0; i &lt; this.length; i++) &#123;</span><br><span class="line">    const c &#x3D; this.charAt(i)</span><br><span class="line">    const p &#x3D; s1.indexOf(c)</span><br><span class="line">    a +&#x3D; p &lt; 0 ? c : s2.charAt(p)</span><br><span class="line">  &#125;</span><br><span class="line">  return a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const zhTranBody &#x3D; function (obj) &#123;</span><br><span class="line">    const o &#x3D; typeof obj &#x3D;&#x3D;&#x3D; &#39;object&#39; ? obj.childNodes : document.body.childNodes;</span><br><span class="line">  for (let i &#x3D; 0; i &lt; o.length; i++) &#123;</span><br><span class="line">    const c &#x3D; o.item(i)</span><br><span class="line">    if (&#39;BRHRTEXTAREASCRIPT&#39;.indexOf(&#39;&#39; + c.tagName + &#39;&#39;) &gt; 0) continue</span><br><span class="line">    if (c.title !&#x3D;&#x3D; &#39;&#39; &amp;&amp; c.title !&#x3D; null) &#123;</span><br><span class="line">      c.title &#x3D; c.title.tran()</span><br><span class="line">    &#125;</span><br><span class="line">    if (c.alt !&#x3D;&#x3D; &#39;&#39; &amp;&amp; c.alt !&#x3D; null) &#123;</span><br><span class="line">      c.alt &#x3D; c.alt.tran()</span><br><span class="line">    &#125;</span><br><span class="line">    if (c.tagName &#x3D;&#x3D;&#x3D; &#39;INPUT&#39; &amp;&amp; c.value !&#x3D;&#x3D; &#39;&#39; &amp;&amp; c.type !&#x3D;&#x3D; &#39;text&#39; &amp;&amp; c.type !&#x3D;&#x3D; &#39;hidden&#39; &amp;&amp; c.type !&#x3D;&#x3D; &#39;password&#39;) &#123;</span><br><span class="line">      c.value &#x3D; c.value.tran()</span><br><span class="line">    &#125;</span><br><span class="line">    if (c.nodeType &#x3D;&#x3D;&#x3D; 3) &#123;</span><br><span class="line">      c.data &#x3D; c.data.tran()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      zhTranBody(c)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const zhTran &#x3D; function (go) &#123;</span><br><span class="line">  if (go) &#123;</span><br><span class="line">    setToken(go)</span><br><span class="line">  &#125;</span><br><span class="line">  if (go &#x3D;&#x3D;&#x3D; &#39;n&#39;) &#123;</span><br><span class="line">    window.location.reload()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    zhTranBody()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const zhInit &#x3D; function () &#123;</span><br><span class="line">  const zhChoose &#x3D; getToken()</span><br><span class="line">  if (zhChoose !&#x3D;&#x3D; &#39;n&#39;) &#123;</span><br><span class="line">    if (window.onload) &#123;</span><br><span class="line">      window.onload\_before\_zh\_init &#x3D; window.onload</span><br><span class="line">      window.onload &#x3D; function () &#123;</span><br><span class="line">        zhTran(zhChoose)</span><br><span class="line">        window.onload\_before\_zh\_init()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      window.onload &#x3D; function () &#123;</span><br><span class="line">        zhTran(zhChoose)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用cookie存储去判断是简体还是繁体（‘t’为繁体，‘s’为简体）</p>
<p>2.全局注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;zhTran&#125; from &#39;.&#x2F;utils&#x2F;zh&#39;</span><br><span class="line">Vue.prototype.$zhTran &#x3D; zhTran</span><br></pre></td></tr></table></figure>
<p>3.因为它无法监测到别的页面，所以必须在每个组件都要调用它才行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$zhTran()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>结构化设计</title>
    <url>/2020/08/03/%E7%BB%93%E6%9E%84%E5%8C%96%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>高内聚低耦合</strong> 保持模块大小适中 减少调用深度（少于7层） 多扇入，少扇出（扇入：被别人调用，扇出：需要调用其他模块） 单入口，单出口 模块的作用域在模块内 功能应该是可预测的 <img src="http://10.144.213.26:9898/wp-content/uploads/2020/08/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200803113152.png"> <strong>设计原则</strong> <img src="http://10.144.213.26:9898/wp-content/uploads/2020/08/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200803114221.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2019/06/01/%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.superVal = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为父类添加方法</span></span><br><span class="line">SuperClass.prototype.getSuperVal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.superVal</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.subVal=<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承父类</span></span><br><span class="line">SubClass.prototype=<span class="keyword">new</span> SuperClass();</span><br><span class="line"><span class="comment">//添加子类方法</span></span><br><span class="line">SubClass.prototype.getSubVal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.subVal</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//值类型共有属性</span></span><br><span class="line">	<span class="built_in">this</span>.id=id;</span><br><span class="line">	<span class="comment">//引用类型共有属性</span></span><br><span class="line">	<span class="built_in">this</span>.books=[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;css&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父类型声明原型方法</span></span><br><span class="line">SuperClass.prototype.showBooks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>.books)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//继承父类</span></span><br><span class="line">	SuperClass.call(<span class="built_in">this</span>,id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建子类实例</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubClass(<span class="number">11</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//值类型共有属性</span></span><br><span class="line">    <span class="built_in">this</span>.id=id;</span><br><span class="line">    <span class="comment">//引用类型共有属性</span></span><br><span class="line">    <span class="built_in">this</span>.books=[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;css&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父类型声明原型方法</span></span><br><span class="line">SuperClass.prototype.showBooks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.books)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">id,time</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//继承父类</span></span><br><span class="line">    SuperClass.call(<span class="built_in">this</span>,id)</span><br><span class="line">	<span class="comment">//新增共有属性</span></span><br><span class="line">	<span class="built_in">this</span>.time=time</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类式继承</span></span><br><span class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass();</span><br><span class="line"><span class="comment">//子类原型方法</span></span><br><span class="line">SubClass.prototype.getTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>.time)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子类实例</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass(<span class="number">10</span>,<span class="string">&quot;2017&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubClass(<span class="number">11</span>,<span class="string">&quot;2018&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><h6 id="复制一个对象的prototype"><a href="#复制一个对象的prototype" class="headerlink" title="复制一个对象的prototype"></a>复制一个对象的prototype</h6><p> <code>Object.create(o.prototype)</code></p>
<p> <code>function object(o)&#123;     function F()&#123;&#125;     F.prototype = o;     return new F(); &#125;</code></p>
<h6 id="寄生组合"><a href="#寄生组合" class="headerlink" title="寄生组合"></a>寄生组合</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType,superType</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//object()方法是ES5前Object.create()的非规范化实现</span></span><br><span class="line">	 <span class="keyword">var</span> prototype=object(superType.prototype);</span><br><span class="line">	 <span class="comment">//增强对象</span></span><br><span class="line">	prototype.constructor = subType;</span><br><span class="line">	<span class="comment">//指定对象</span></span><br><span class="line">    subType.prototype = prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//值类型共有属性</span></span><br><span class="line">    <span class="built_in">this</span>.id=id;</span><br><span class="line">    <span class="comment">//引用类型共有属性</span></span><br><span class="line">    <span class="built_in">this</span>.books=[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;css&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父类型声明原型方法</span></span><br><span class="line">SuperClass.prototype.showBooks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.books)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">id,time</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//继承父类</span></span><br><span class="line">    SuperClass.call(<span class="built_in">this</span>,id)</span><br><span class="line">    <span class="comment">//新增共有属性</span></span><br><span class="line">    <span class="built_in">this</span>.time=time</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line">inheritPrototype(SubClass,SuperClass)<span class="string">&#x27;</span></span><br><span class="line"><span class="string">//子类增加原型方法</span></span><br><span class="line"><span class="string">SubClass.prototype.getTime = function()&#123;</span></span><br><span class="line"><span class="string">	console.log(this.time);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>自媒体时代的流量“陷阱”</title>
    <url>/2020/05/28/%E8%87%AA%E5%AA%92%E4%BD%93%E6%97%B6%E4%BB%A3%E7%9A%84%E6%B5%81%E9%87%8F%E9%99%B7%E9%98%B1/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>自媒体时代人人都可能成为网红，这只是主观臆断，虽说自媒体时代人人都有机会，但从客观上讲，也不是随随便便就能成功的，这是由自媒体时代客观的网络生态环境决定的，最重要的就是网络引流的问题。 自媒体时代一定要善于发现价值，分享价值。那么分享价值的过程实际上也是寻找价值认同的过程，价值认同度越高，点赞、关注、收藏、转发的可能越多，“爆红”的可能性也就越大。但就是这么一个简单的逻辑，让无数自媒体创业的朋友最终折翼。其中的核心因素就是大家常说的引流和吸粉的问题了。这不是一个“坑儿”的问题，而是遍地陷阱，简直就是横在创业路上一条难以逾越的鸿沟。总得来说，有两个问题是自媒体人必须要清楚的常识： 一、互联网寡头的流量垄断 想必大家都知道“BAT”（百度、阿里、腾讯）是怎么回事，在当下的互联网生态中，BAT可以说就是处于绝对统治地位的寡头，他们凭借资本和早期建立的巨大行业优势，事实上早已控制了这个网络生态系统的各大流量入口，就像一张看不见的网，笼罩在这个虚拟数字世界的外围。所谓的自媒体和网民不过都是网里的鱼儿罢了，这就是客观现实。搞明白了这一点，剩下的就都好理解了，商业社会谁也不会把自己吃饭的家伙轻易地拱手让人，“要想从此过，留下买路财”就是互联网的生存哲学。当然，商业准则核心的一点就是讲究互惠互利，当鱼儿越长越大的时候，能为这些寡头创造流量价值的时候，也就是成功的时候，资本就会照进你的梦想。仅凭一己之力改变不了这种现实，对策就是：老老实实按别人制定的规矩套路来，踏踏实实地做好“瘦马”，等待“待价而沽”的到来就行了。 二、流量的导入没有捷径可走 相信自媒体的朋友都知道，吸粉和引流是重中之重，没有流量何谈粉丝，无异于“闭门造车”；有流量也未必能引来粉丝，因为只有讨人欢心，寻求价值认同才能换来关注。太难！“一夜爆红”的艰辛岂止常人可以理解？怎么办？大家常规的手段无非就是花代价找来专业的团队开始策划，苦寻“爆点”，不能说这不是办法，但这里面水太深，花了钱最后“溺亡”的太多太多……道理也简单，“买得身，买不了心”，花钱搞定的粉丝，粘度是个关键问题。别忘了“粉丝”也是要靠“网”吃饭的。“有需求就会有市场”——这是“生活宇宙”和“网络宇宙”通用的法则。如此一说，有的朋友可能会说，那还搞什么，还有什么前景？其实不然，任何新生的东西都要经历“由野蛮生长到理性有序发展的过程”，自媒体也不例外，要在浩瀚的网络世界寻求“价值认同”并不是一点机会都没有的事情，关键的关键就是：利用好真正有价值的平台（比如BAT）的流量赋能，发掘真正有价值的内容，持续的价值分享，放弃“一夜爆红”的幻想，发挥愚公的精神，在正确的道路上“苦逼”的等待每一个引爆的机会，剩下的交给天。</p>
]]></content>
      <categories>
        <category>新闻咨询</category>
      </categories>
  </entry>
  <entry>
    <title>节流和防抖</title>
    <url>/2019/07/11/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<p>节流与防抖</p>
<a id="more"></a>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>如果是业务中需要实现的节流与防抖等需求，最好还是根据业务需求自己编写定时器，简洁方便。</li>
<li>如果是复杂的计算，最好结合webworker，启用多线程的方式。也能优化体验<br>lodash<h2 id="节流与防抖定义"><a href="#节流与防抖定义" class="headerlink" title="节流与防抖定义"></a>节流与防抖定义</h2>节流：在一定时间多次触发函数，保证一段时间仅执行一次。如页面resize，重绘大小的时候，间隔一段时间重绘一次。<br>防抖：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2></li>
<li>第一次进入  timerId为空 执行leadingEdge（设置定时器，时间为等待时间，执行函数为timerExpired）</li>
<li>如果设置了leading为true，则立刻执行invokeFunc（执行一遍任务函数）</li>
<li>期间用户未操作，定时器时间到了，执行timerExpired（如果可以立刻执行，执行trailingEdge，否则重置定时器：时间为等待时间，执行函数timerExpired）</li>
<li>执行trailingEdge，清空定时器ID，判断是否周期结束后是否执行（如果是的，执行函数，不是，清空变量及参数）</li>
<li>期间用户又操作了，判断是否应该执行（如果不应该且定时器是空的，则执行timerExpired[有定时器，不操作]；如果应该且设置最大等待时间，重新设置定时器并立刻执行一次；如果不能，则不做任何事）<h2 id="lodash防抖"><a href="#lodash防抖" class="headerlink" title="lodash防抖"></a>lodash防抖</h2></li>
</ul>
<ul>
<li>@param {Function}  实现的业务函数.</li>
<li>@param {number} [wait=0] </li>
<li> 延迟执行的时间，默认值是0，如果不传，使用requestAnimationFrame来更新页面；</li>
<li>@param {Object} [options={}] The options object.</li>
<li>@param {boolean} [options.leading=false]</li>
<li> Specify invoking on the leading edge of the timeout.</li>
<li>@param {number} [options.maxWait]</li>
<li> The maximum time <code>func</code> is allowed to be delayed before it’s invoked.</li>
<li>@param {boolean} [options.trailing=true]</li>
<li> Specify invoking on the trailing edge of the timeout.</li>
<li>@returns {Function} Returns the new debounced function.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function debounce(func, wait, options) &#123;</span><br><span class="line">  let lastArgs,     &#x2F;&#x2F; debounced 被调用后被赋值,表示至少调用 debounced一次</span><br><span class="line">    lastThis,   &#x2F;&#x2F; 保存 this</span><br><span class="line">    maxWait,     &#x2F;&#x2F; 最大等待时间</span><br><span class="line">    result,      &#x2F;&#x2F; 返回执行的函数</span><br><span class="line">    timerId,    &#x2F;&#x2F; 定时器句柄</span><br><span class="line">    lastCallTime    &#x2F;&#x2F; 上一次调用 debounced 的时间</span><br><span class="line"></span><br><span class="line">  let lastInvokeTime &#x3D; 0  &#x2F;&#x2F; 上一次执行 func 的时间</span><br><span class="line">  let leading &#x3D; false     &#x2F;&#x2F; 是否第一次触发时立即执行</span><br><span class="line">  let maxing &#x3D; false     &#x2F;&#x2F; 是否有最长等待时间</span><br><span class="line">  let trailing &#x3D; true    &#x2F;&#x2F; 是否在等待周期结束后执行用户传入的函数</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。</span><br><span class="line">  const useRAF &#x3D; (!wait &amp;&amp; wait !&#x3D;&#x3D; 0 &amp;&amp; typeof root.requestAnimationFrame &#x3D;&#x3D;&#x3D; &#39;function&#39;)</span><br><span class="line">  &#x2F;&#x2F;  以上代码被我注释，可以先不关注</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 这个很好理解，如果传入的 func 不是函数，抛出错误，老子干不了这样的活</span><br><span class="line">  if (typeof func !&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">    throw new TypeError(&#39;Expected a function&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 如果不存在  默认为0</span><br><span class="line">  wait &#x3D; +wait || 0</span><br><span class="line">  if (isObject(options)) &#123;</span><br><span class="line">    leading &#x3D; !!options.leading</span><br><span class="line">    maxing &#x3D; &#39;maxWait&#39; in options</span><br><span class="line">    maxWait &#x3D; maxing ? Math.max(+options.maxWait || 0, wait) : maxWait</span><br><span class="line">    trailing &#x3D; &#39;trailing&#39; in options ? !!options.trailing : trailing</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  执行 用户传入的 func</span><br><span class="line">&#x2F;&#x2F;  lastInvokeTime 在此时被赋值，记录上一次调用 func的时间</span><br><span class="line">  function invokeFunc(time) &#123;</span><br><span class="line">    const args &#x3D; lastArgs</span><br><span class="line">    const thisArg &#x3D; lastThis</span><br><span class="line">&#x2F;&#x2F;  重置 lastArgs，lastThis</span><br><span class="line">    lastArgs &#x3D; lastThis &#x3D; undefined</span><br><span class="line">    lastInvokeTime &#x3D; time</span><br><span class="line">    result &#x3D; func.apply(thisArg, args)</span><br><span class="line">    return result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  setTimeout 一个定时器</span><br><span class="line">  function startTimer(pendingFunc, wait) &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果没有传wait   默认使用浏览器的requestAnimationFrame</span><br><span class="line">    if (useRAF) &#123;</span><br><span class="line">      return root.requestAnimationFrame(pendingFunc)</span><br><span class="line">    &#125;</span><br><span class="line">    return setTimeout(pendingFunc, wait)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  清除定时器</span><br><span class="line">  function cancelTimer(id) &#123;</span><br><span class="line">    if (useRAF) &#123;</span><br><span class="line">      return root.cancelAnimationFrame(id)</span><br><span class="line">    &#125;</span><br><span class="line">    clearTimeout(id)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  防抖开始时执行的操作</span><br><span class="line">&#x2F;&#x2F;  lastInvokeTime 在此时被赋值，记录上一次调用 func的时间</span><br><span class="line">&#x2F;&#x2F;  设置了立即执行func，则执行func， 否则设置定时器</span><br><span class="line">  function leadingEdge(time) &#123;</span><br><span class="line">    &#x2F;&#x2F; Reset any &#96;maxWait&#96; timer.</span><br><span class="line">    lastInvokeTime &#x3D; time</span><br><span class="line">    &#x2F;&#x2F; Start the timer for the trailing edge.</span><br><span class="line">    timerId &#x3D; startTimer(timerExpired, wait)</span><br><span class="line">    &#x2F;&#x2F; Invoke the leading edge.</span><br><span class="line">    return leading ? invokeFunc(time) : result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  计算还需要等待多久</span><br><span class="line">&#x2F;&#x2F;  没设置最大等待时间，结果为 wait - (当前时间 - 上一次触发(scroll) )  时间，也就是  wait - 已经等候时间</span><br><span class="line">&#x2F;&#x2F;  设置了最长等待时间，结果为 最长等待时间 和 按照wait 计算还需要等待时间 的最小值</span><br><span class="line">  function remainingWait(time) &#123;</span><br><span class="line">    const timeSinceLastCall &#x3D; time - lastCallTime</span><br><span class="line">    const timeSinceLastInvoke &#x3D; time - lastInvokeTime</span><br><span class="line">    const timeWaiting &#x3D; wait - timeSinceLastCall</span><br><span class="line"></span><br><span class="line">    return maxing</span><br><span class="line">      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)</span><br><span class="line">      : timeWaiting</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此时是否应该设置定时器&#x2F;执行用户传入的函数，有四种情况应该执行</span><br><span class="line">&#x2F;&#x2F; 1, 第一次触发</span><br><span class="line">&#x2F;&#x2F; 2. 距离上次触发超过 wait</span><br><span class="line">&#x2F;&#x2F; 3. 当前时间小于 上次触发时间</span><br><span class="line">&#x2F;&#x2F; 4. 设置了最长等待时间，并且等待时长不小于最长等待时间了</span><br><span class="line">  function shouldInvoke(time) &#123;</span><br><span class="line">    const timeSinceLastCall &#x3D; time - lastCallTime</span><br><span class="line">    const timeSinceLastInvoke &#x3D; time - lastInvokeTime</span><br><span class="line"></span><br><span class="line">    return (lastCallTime &#x3D;&#x3D;&#x3D; undefined || (timeSinceLastCall &gt;&#x3D; wait) ||</span><br><span class="line">      (timeSinceLastCall &lt; 0) || (maxing &amp;&amp; timeSinceLastInvoke &gt;&#x3D; maxWait))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行函数呢 还是继续设置定时器呢？ 防抖的核心</span><br><span class="line">&#x2F;&#x2F; 时间满足条件，执行</span><br><span class="line">&#x2F;&#x2F; 否则 重新设置定时器</span><br><span class="line">  function timerExpired() &#123;</span><br><span class="line">    const time &#x3D; Date.now()</span><br><span class="line">    if (shouldInvoke(time)) &#123;</span><br><span class="line">      return trailingEdge(time)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; Restart the timer.</span><br><span class="line">    timerId &#x3D; startTimer(timerExpired, remainingWait(time))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行用户传入的 func 之前的最后一道屏障</span><br><span class="line">&#x2F;&#x2F; 重置 定时器</span><br><span class="line">&#x2F;&#x2F; 执行 func</span><br><span class="line">&#x2F;&#x2F; 重置 lastArgs &#x3D; lastThis 为 undefined</span><br><span class="line">  function trailingEdge(time) &#123;</span><br><span class="line">    timerId &#x3D; undefined</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Only invoke if we have &#96;lastArgs&#96; which means &#96;func&#96; has been</span><br><span class="line">    &#x2F;&#x2F; debounced at least once.</span><br><span class="line">    if (trailing &amp;&amp; lastArgs) &#123;</span><br><span class="line">      return invokeFunc(time)</span><br><span class="line">    &#125;</span><br><span class="line">    lastArgs &#x3D; lastThis &#x3D; undefined</span><br><span class="line">    return result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 取消防抖</span><br><span class="line">&#x2F;&#x2F;  重置所有变量  清除定时器</span><br><span class="line">  function cancel() &#123;</span><br><span class="line">    if (timerId !&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">      cancelTimer(timerId)</span><br><span class="line">    &#125;</span><br><span class="line">    lastInvokeTime &#x3D; 0</span><br><span class="line">    lastArgs &#x3D; lastCallTime &#x3D; lastThis &#x3D; timerId &#x3D; undefined</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定时器已存在，去执行 嗯，我就是这么强势</span><br><span class="line">  function flush() &#123;</span><br><span class="line">    return timerId &#x3D;&#x3D;&#x3D; undefined ? result : trailingEdge(Date.now())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  是否正在 等待中</span><br><span class="line">  function pending() &#123;</span><br><span class="line">    return timerId !&#x3D;&#x3D; undefined</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  正房来了！ 这是入口函数，在这里运筹帷幄，根据敌情调配各个函数，势必骗过用户那个傻子，我没有一直在执行但你以为我一直在响应你哦 </span><br><span class="line">  function debounced(...args) &#123;</span><br><span class="line">    const time &#x3D; Date.now()</span><br><span class="line">    &#x2F;&#x2F; 是否立刻执行</span><br><span class="line">    const isInvoking &#x3D; shouldInvoke(time)</span><br><span class="line">    &#x2F;&#x2F; 保存当前的参数</span><br><span class="line">    lastArgs &#x3D; args</span><br><span class="line">    lastThis &#x3D; this</span><br><span class="line">    lastCallTime &#x3D; time</span><br><span class="line">    &#x2F;&#x2F; 判断如果不应该执行</span><br><span class="line">    if (isInvoking) &#123;</span><br><span class="line">    &#x2F;&#x2F;   定时器未执行（第一次进入）</span><br><span class="line">      if (timerId &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">        return leadingEdge(lastCallTime)</span><br><span class="line">      &#125;</span><br><span class="line">      if (maxing) &#123;</span><br><span class="line">        &#x2F;&#x2F; Handle invocations in a tight loop.</span><br><span class="line">        timerId &#x3D; startTimer(timerExpired, wait)</span><br><span class="line">        return invokeFunc(lastCallTime)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 保证最后执行一次</span><br><span class="line">    if (timerId &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">      timerId &#x3D; startTimer(timerExpired, wait)</span><br><span class="line">    &#125;</span><br><span class="line">    return result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  debounced.cancel &#x3D; cancel</span><br><span class="line">  debounced.flush &#x3D; flush</span><br><span class="line">  debounced.pending &#x3D; pending</span><br><span class="line">  &#x2F;&#x2F;  下面这句话证明 debounced 我是入口函数，是正宫娘娘！</span><br><span class="line">  return debounced</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default debounce</span><br></pre></td></tr></table></figure>
<h2 id="lodash节流"><a href="#lodash节流" class="headerlink" title="lodash节流"></a>lodash节流</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function throttle(func, wait, options) &#123;</span><br><span class="line">  let leading &#x3D; true</span><br><span class="line">  let trailing &#x3D; true</span><br><span class="line"></span><br><span class="line">  if (typeof func !&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">    throw new TypeError(&#39;Expected a function&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  if (isObject(options)) &#123;</span><br><span class="line">    leading &#x3D; &#39;leading&#39; in options ? !!options.leading : leading</span><br><span class="line">    trailing &#x3D; &#39;trailing&#39; in options ? !!options.trailing : trailing</span><br><span class="line">  &#125;</span><br><span class="line">  return debounce(func, wait, &#123;</span><br><span class="line">    leading,</span><br><span class="line">    trailing,</span><br><span class="line">    &#39;maxWait&#39;: wait,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><a href="https://github.com/yygmind/blog/issues/41">这个</a><br><a href="https://segmentfault.com/a/1190000017227559">还有这个</a></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>节流模式</title>
    <url>/2019/06/01/%E8%8A%82%E6%B5%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节流器</span></span><br><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取第一个参数</span></span><br><span class="line">    <span class="keyword">var</span> isClear = <span class="built_in">arguments</span>[<span class="number">0</span>],fn;</span><br><span class="line">    <span class="comment">//如果第一个参数是boolean类型，那么第一个参数则表示是否清楚计时器</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> isClear === <span class="string">&#x27;boolean&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//第二个参数则为函数</span></span><br><span class="line">        fn = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//函数计时器句柄存在，则清楚函数计时器</span></span><br><span class="line">        fn._throttleID &amp;&amp; <span class="built_in">clearTimeout</span>(fn._throttleID);</span><br><span class="line">    <span class="comment">//通过计时器延迟函数的执行</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//第一个参数为函数</span></span><br><span class="line">        fn = isClear;</span><br><span class="line">        <span class="comment">//第二个参数为函数执行时的参数</span></span><br><span class="line">        param = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//对执行时的参数适配默认值，这里我们用到以前学过的extend方法</span></span><br><span class="line">        <span class="keyword">var</span> p = extend(&#123;</span><br><span class="line">            context:<span class="literal">null</span>,</span><br><span class="line">            args:[],</span><br><span class="line">            time:<span class="number">300</span></span><br><span class="line">        &#125;,param);</span><br><span class="line">        <span class="comment">//清楚函数执行计时器句柄，</span></span><br><span class="line">        <span class="built_in">arguments</span>.callee(<span class="literal">true</span>,fn);</span><br><span class="line">        <span class="comment">//作为函数绑定延迟计时器句柄，延迟执行函数</span></span><br><span class="line">        fn._throttleID = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//执行函数</span></span><br><span class="line">            fn.apply(p.context,p.args);</span><br><span class="line">        &#125;,p.time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>表单体验篇</title>
    <url>/2020/08/25/%E8%A1%A8%E5%8D%95%E4%BD%93%E9%AA%8C%E7%AF%87/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p><strong>基础表单</strong><br>字段内容较少。当用户输入少量信息即可完成一个简单快速的任务。 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-ty-20200820-3.jpg" alt="大厂高手出品！中台系统设计指南：表单体验篇"><br><strong>分步表单</strong> 较为复杂的一类表单，把一个相对复杂的表单字段拆解为多个步骤进行。有利于减轻用户由于表单大而复杂的造成的填写负担，并且能减少用户表单填写出错率。 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-ty-20200820-4.jpg" alt="大厂高手出品！中台系统设计指南：表单体验篇"><br><strong>分组表单</strong> 将一个复杂表单拆解归类分组。分组表单与分布表单特点较为相似，都可以减轻用户因为表单大而复杂的造成填写的负担，并且能减少用户表单填写出错率。 <img src="https://image.uisdc.com/wp-content/uploads/2020/08/uisdc-ty-20200820-5.jpg" alt="大厂高手出品！中台系统设计指南：表单体验篇"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2019/06/01/%E8%A7%82%E5%AF%9F%E8%80%85/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="创建一个观察者"><a href="#创建一个观察者" class="headerlink" title="创建一个观察者"></a>创建一个观察者</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Observer=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//建立闭包保存消息</span></span><br><span class="line">	<span class="keyword">var</span> _messages=&#123;&#125;;</span><br><span class="line">	<span class="keyword">return</span>&#123;</span><br><span class="line">		<span class="comment">//注册接口</span></span><br><span class="line">		regist : <span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line">			<span class="comment">//如果不存在这个消息类型，创建一个，否则推入对应的执行队列中去</span></span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> _messages[type] === <span class="string">&quot;undefined&quot;</span></span>)</span>&#123;</span><br><span class="line">				<span class="comment">//将消息推入动作执行队列中</span></span><br><span class="line">				_messages[type] = [fn];</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="comment">//将消息推入动作执行队列中</span></span><br><span class="line">				_messages[type].push(fn);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; ,</span><br><span class="line">		<span class="comment">//发布信息接口</span></span><br><span class="line">		fire : <span class="function"><span class="keyword">function</span>(<span class="params">type,args</span>)</span>&#123;</span><br><span class="line">			<span class="comment">//如果不存在，直接退出</span></span><br><span class="line">			<span class="keyword">if</span>(!_messages[type]) <span class="keyword">return</span>;</span><br><span class="line">			<span class="comment">//定义消息的信息及参数</span></span><br><span class="line">			<span class="keyword">var</span> events = &#123;</span><br><span class="line">				type:type,<span class="comment">//消息类型</span></span><br><span class="line">				args :args || &#123;&#125;<span class="comment">//消息参数</span></span><br><span class="line">			&#125;,i = <span class="number">0</span>,len = _messages[type].length;</span><br><span class="line">			<span class="comment">//便利消息队列</span></span><br><span class="line">			<span class="function"><span class="title">for</span>(<span class="params">;i&lt; len;i++</span>)</span>&#123;</span><br><span class="line">				<span class="comment">//依次执行对应的动作</span></span><br><span class="line">				_messages[type][i].call(<span class="built_in">this</span>,events)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//移出信息接口</span></span><br><span class="line">		remove : <span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line">							<span class="keyword">debugger</span>;</span><br><span class="line">			<span class="comment">//判断消息队列存在</span></span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params">_messages[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span></span>)</span>&#123;</span><br><span class="line">				<span class="comment">//遍历消息队列</span></span><br><span class="line">				<span class="keyword">var</span> i = _messages[type].length - <span class="number">1</span>;</span><br><span class="line">				<span class="function"><span class="title">for</span>(<span class="params">;i&gt;=<span class="number">0</span>;i--</span>)</span>&#123;</span><br><span class="line">					<span class="comment">//移除相应的动作函数</span></span><br><span class="line">					_messages[type][i] === fn &amp;&amp; _messages[type].splice(i,<span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		getMessages:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span>  _messages;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<h3 id="对象间解耦"><a href="#对象间解耦" class="headerlink" title="对象间解耦"></a>对象间解耦</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> that=<span class="built_in">this</span>;</span><br><span class="line">	<span class="comment">//回答结果；</span></span><br><span class="line">	that.result = result;</span><br><span class="line">	<span class="comment">//回答问题</span></span><br><span class="line">	that.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(that.result)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//回答问题的方法</span></span><br><span class="line">Student.prototype.answer = <span class="function"><span class="keyword">function</span>(<span class="params">quertion</span>)</span>&#123;</span><br><span class="line">	Observer.regist(quertion,<span class="built_in">this</span>.say)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增加睡觉的方法</span></span><br><span class="line">Student.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params">quertion</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//解除说话的队列</span></span><br><span class="line">	Observer.remove(quertion,<span class="built_in">this</span>.say)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//教师类</span></span><br><span class="line"><span class="keyword">var</span> Teacher = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//发布问题</span></span><br><span class="line">Teacher.prototype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">	Observer.fire(question)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student(<span class="string">&quot;11&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> student2 = <span class="keyword">new</span> Student(<span class="string">&quot;22&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> student3 = <span class="keyword">new</span> Student(<span class="string">&quot;33&quot;</span>);</span><br><span class="line">student1.answer(<span class="string">&quot;who&quot;</span>)</span><br><span class="line">student2.answer(<span class="string">&quot;who&quot;</span>)</span><br><span class="line">student3.answer(<span class="string">&quot;who&quot;</span>)</span><br><span class="line">student1.answer(<span class="string">&quot;where&quot;</span>)</span><br><span class="line">student2.answer(<span class="string">&quot;where&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">teacher.ask(<span class="string">&quot;who&quot;</span>)</span><br><span class="line">teacher.ask(<span class="string">&quot;where&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>订阅者模式</title>
    <url>/2019/06/01/%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="中介者对象"><a href="#中介者对象" class="headerlink" title="中介者对象"></a>中介者对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//订阅者</span></span><br><span class="line"><span class="keyword">var</span> Mediator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//内部存储</span></span><br><span class="line">	<span class="keyword">var</span> _msg = &#123;&#125;;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="comment">//注册消息</span></span><br><span class="line">		register : <span class="function"><span class="keyword">function</span>(<span class="params">type,action</span>)</span>&#123;</span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params">_msg[type]</span>)</span>&#123;</span><br><span class="line">				_msg[type].push(action)</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				_msg[type]=[action]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//发布消息</span></span><br><span class="line">		send : <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params">_msg[type]</span>)</span>&#123;</span><br><span class="line">				<span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;_msg[type].length;i++</span>)</span>&#123;</span><br><span class="line">					_msg[type][i]&amp;&amp;_msg[type][i]();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/2019/06/01/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="设计模式在JS应用"><a href="#设计模式在JS应用" class="headerlink" title="设计模式在JS应用"></a>设计模式在JS应用</h2><a id="more"></a>
<h3 id="实现迭代器"><a href="#实现迭代器" class="headerlink" title="实现迭代器"></a>实现迭代器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span>(<span class="params">items</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//获取长度，下标</span></span><br><span class="line">	<span class="keyword">var</span> length = items.length,</span><br><span class="line">		index = <span class="number">0</span>,</span><br><span class="line">		splice = [].splice;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="comment">//第一个元素</span></span><br><span class="line">		first : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			index = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> items[index];</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//最后一个元素</span></span><br><span class="line">		last : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			index = length-<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> items[index];</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//前一个元素</span></span><br><span class="line">		pre : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params">--index &gt; <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> items[index]</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				index = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//下一个元素</span></span><br><span class="line">		next : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params">++index &lt; length</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> items[index]</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				index = length-<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//获取某一个 num 的元素</span></span><br><span class="line">		get : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">			index = num&gt;=<span class="number">0</span> ? num % length : num % length + length;</span><br><span class="line">			<span class="keyword">return</span> items[index];</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//进行 fn 的全量处理</span></span><br><span class="line">		dealEach : <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> args = splice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</span><br><span class="line">			<span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length;i++</span>)</span>&#123;</span><br><span class="line">				fn.apply(items[i],args);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//对某一个 num 的元素进行 fn 的处理</span></span><br><span class="line">		dealItem : <span class="function"><span class="keyword">function</span>(<span class="params">num,fn</span>)</span>&#123;</span><br><span class="line">			fn.apply(<span class="built_in">this</span>.get(num),splice.call(<span class="built_in">arguments</span>,<span class="number">2</span>))</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//对 mem 中的元素 进行 numFn 的处理 allFn 针对所有的处理</span></span><br><span class="line">		exclusive : <span class="function"><span class="keyword">function</span>(<span class="params">mem,allFn,numFn</span>)</span>&#123;</span><br><span class="line">			<span class="built_in">this</span>.dealEach(allFn);</span><br><span class="line">			<span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">Array</span>.isArray(mem)</span>)</span>&#123;</span><br><span class="line">				<span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;mem.length;i++</span>)</span>&#123;</span><br><span class="line">					<span class="built_in">this</span>.dealItem(mem[i],numFn)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">this</span>.dealItem(mem,numFn)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组迭代器"><a href="#数组迭代器" class="headerlink" title="数组迭代器"></a>数组迭代器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eachArray = <span class="function"><span class="keyword">function</span>(<span class="params">arr,fn</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">		len = arr.length;</span><br><span class="line">	<span class="function"><span class="title">for</span>(<span class="params">;i &lt; len;i++</span>)</span>&#123;</span><br><span class="line">		<span class="function"><span class="title">if</span>(<span class="params">fn.call(arr[i],i,arr[i]) === <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对象迭代器"><a href="#对象迭代器" class="headerlink" title="对象迭代器"></a>对象迭代器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eachObj = <span class="function"><span class="keyword">function</span>(<span class="params">obj,fn</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i <span class="keyword">in</span> obj</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">fn.call(obj[i],i,obj[i]) === <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分支循环嵌套"><a href="#分支循环嵌套" class="headerlink" title="分支循环嵌套"></a>分支循环嵌套</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 绘制特效图片</span></span><br><span class="line"><span class="comment">*param  t  类型</span></span><br><span class="line"><span class="comment">*param  x  x坐标</span></span><br><span class="line"><span class="comment">*param  y  y坐标</span></span><br><span class="line"><span class="comment">*param  w  宽度</span></span><br><span class="line"><span class="comment">*param  h  高度</span></span><br><span class="line"><span class="comment">*param  a  透明度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dealImage</span>(<span class="params">t,x,y,w,h,a</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> canvasData = ctx.getImageData(x,y,w,h),</span><br><span class="line">		data = canvasData.data,</span><br><span class="line">		<span class="comment">//封装算法</span></span><br><span class="line">		Deal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> method = &#123;</span><br><span class="line">				<span class="keyword">default</span> : <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">					<span class="keyword">return</span> method[<span class="string">&quot;gray&quot;</span>](i)</span><br><span class="line">				&#125;,</span><br><span class="line">				red : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					data[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">					data[i + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">					data[i + <span class="number">3</span>] = a;</span><br><span class="line">				&#125;,</span><br><span class="line">				green : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					data[i + <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">					data[i + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">					data[i + <span class="number">3</span>] = a;</span><br><span class="line">				&#125;</span><br><span class="line">				blue : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					data[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">					data[i + <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">					data[i + <span class="number">3</span>] = a;</span><br><span class="line">				&#125;,</span><br><span class="line">				grey : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					data[i] = data[i + <span class="number">1</span>]=<span class="built_in">parseInt</span>(data[i + <span class="number">2</span>] = (data[i + <span class="number">0</span>] + data[i + <span class="number">1</span>] +data[i + <span class="number">2</span>])/<span class="number">3</span>);</span><br><span class="line">					data[i + <span class="number">3</span>] = a;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> method[type] || method[<span class="string">&quot;default&quot;</span>]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;();</span><br><span class="line">	<span class="comment">//迭代器处理数据</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">eachData</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">		<span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span>,len = data.length;i &lt; len;i += <span class="number">4</span></span>)</span>&#123;</span><br><span class="line">			fn(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//处理数据</span></span><br><span class="line">	eachData(Deal(t));</span><br><span class="line">	ctx.putImageData(canvasData,width+x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>遍历生成树的两种方式</title>
    <url>/2019/06/18/%E9%81%8D%E5%8E%86%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>主要讲了生成树状结构的两种方式 <a href="https://blog.csdn.net/kuangshp128/article/details/92622395">参考</a></p>
<a id="more"></a>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let dataList &#x3D; [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f0&#39;,</span><br><span class="line">      id: &#39;s1&#39;,</span><br><span class="line">      pid: &#39;s0&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f01&#39;,</span><br><span class="line">      id: &#39;s2&#39;,</span><br><span class="line">      pid: &#39;s1&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f02&#39;,</span><br><span class="line">      id: &#39;s3&#39;,</span><br><span class="line">      pid: &#39;s1&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f021&#39;,</span><br><span class="line">      id: &#39;s6&#39;,</span><br><span class="line">      pid: &#39;s3&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f021&#39;,</span><br><span class="line">      id: &#39;s7&#39;,</span><br><span class="line">      pid: &#39;s6&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f40&#39;,</span><br><span class="line">      id: &#39;s4&#39;,</span><br><span class="line">      pid: &#39;s0&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f41&#39;,</span><br><span class="line">      id: &#39;s5&#39;,</span><br><span class="line">      pid: &#39;s4&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f41&#39;,</span><br><span class="line">      id: &#39;s8&#39;,</span><br><span class="line">      pid: &#39;s5&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f41&#39;,</span><br><span class="line">      id: &#39;s9&#39;,</span><br><span class="line">      pid: &#39;s5&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;f41&#39;,</span><br><span class="line">      id: &#39;s10&#39;,</span><br><span class="line">      pid: &#39;s9&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br></pre></td></tr></table></figure>
<h3 id="forEach生成"><a href="#forEach生成" class="headerlink" title="forEach生成"></a>forEach生成</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.time(&#39;start&#39;)</span><br><span class="line">let rootMenus &#x3D; [];</span><br><span class="line">let map &#x3D; &#123;&#125;;</span><br><span class="line">dataList.sort((a, b) &#x3D;&gt; a.pid - b.pid);</span><br><span class="line">dataList.forEach(resource &#x3D;&gt; &#123;</span><br><span class="line">resource.children &#x3D; [];</span><br><span class="line">map[resource.id] &#x3D; resource;</span><br><span class="line">if (resource.pid &#x3D;&#x3D; &#39;s0&#39;) &#123;</span><br><span class="line">    rootMenus.push(resource);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if (map[resource.pid]) &#123;</span><br><span class="line">    map[resource.pid].children.push(resource)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    throw new Error(&#96;当前循环的数据pid&#x3D;$&#123;resource.pid&#125;有错误&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.timeEnd(&#39;start&#39;)</span><br></pre></td></tr></table></figure>
<h3 id="利用reduce生成"><a href="#利用reduce生成" class="headerlink" title="利用reduce生成"></a>利用reduce生成</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.time(&#39;start&#39;)</span><br><span class="line">&#x2F;&#x2F; 第一次是将全部的permissionId作为对象的key重组成一个对象</span><br><span class="line">let formatObj &#x3D; dataList.reduce((pre, cur) &#x3D;&gt; &#123;</span><br><span class="line">  return &#123;...pre, [cur[&#39;id&#39;]]: cur&#125;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line">let formatArray &#x3D; dataList.reduce((arr, cur) &#x3D;&gt; &#123;</span><br><span class="line">  let pid &#x3D; cur.pid ? cur.pid : 0;</span><br><span class="line">  let parent &#x3D; formatObj[pid];</span><br><span class="line">  if (parent) &#123;</span><br><span class="line">    parent.children ? parent.children.push(cur) : parent.children&#x3D;[cur];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    arr.push(cur)</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;, []);</span><br><span class="line">console.timeEnd(&#39;start&#39;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS规范</title>
    <url>/2019/05/28/CSS%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><a id="more"></a>
<hr>
<p>编码规范：</p>
<blockquote>
<ul>
<li>@charset规则一定要在样式文件的第一行首个字符位置开始</li>
<li>@charset “”;一定要写上，并且用小写字母，不能出现转义符</li>
</ul>
</blockquote>
<h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><hr>
<h3 id="样式书写："><a href="#样式书写：" class="headerlink" title="样式书写："></a>样式书写：</h3><pre><code>紧凑型（Compact）</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.jdc&#123;display: block;width: <span class="number">50</span>px;&#125;</span><br></pre></td></tr></table></figure>
<pre><code>展开型（Expanded）推荐</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.jdc&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: <span class="number">50</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码大小写"><a href="#代码大小写" class="headerlink" title="代码大小写"></a>代码大小写</h3><pre><code>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 推荐 */</span><br><span class="line">.jdc&#123;</span><br><span class="line">	display:block;</span><br><span class="line">&#125;</span><br><span class="line">/* 不推荐 */</span><br><span class="line">.JDC&#123;</span><br><span class="line">	DISPLAY:BLOCK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><blockquote>
<ul>
<li>尽量少用通用选择器*</li>
<li>不使用ID选择器</li>
<li>不使用无具体语义定义的标签选择器</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 推荐 */</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">.jdc li &#123;&#125;</span><br><span class="line">.jdc li p&#123;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 不推荐 */</span><br><span class="line">*&#123;&#125;</span><br><span class="line"><span class="comment">#jdc &#123;&#125;</span></span><br><span class="line">.jdc div&#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码易读性"><a href="#代码易读性" class="headerlink" title="代码易读性"></a>代码易读性</h3><p>左括号与类名之间一个空格，冒号与属性值之间一个空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*推荐*/</span><br><span class="line">.jdc &#123; </span><br><span class="line">    width: <span class="number">100</span>%; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*不推荐*/</span><br><span class="line">.jdc&#123; </span><br><span class="line">    width:<span class="number">100</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>逗号分隔的取值，逗号之后一个空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*推荐：*/</span><br><span class="line">.jdc &#123;</span><br><span class="line">    box-shadow: <span class="number">1</span>px <span class="number">1</span>px <span class="number">1</span>px <span class="comment">#333, 2px 2px 2px #ccc;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*不推荐：*/</span><br><span class="line">.jdc &#123;</span><br><span class="line">    box-shadow: <span class="number">1</span>px <span class="number">1</span>px <span class="number">1</span>px <span class="comment">#333,2px 2px 2px #ccc;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为单个css选择器或新申明开启新行<br>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*推荐*/</span><br><span class="line">.jdc, </span><br><span class="line">.jdc_logo, </span><br><span class="line">.jdc_hd &#123;</span><br><span class="line">    color: <span class="comment">#ff0;</span></span><br><span class="line">&#125;</span><br><span class="line">.nav&#123;</span><br><span class="line">    color: <span class="comment">#fff;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*不推荐：*/</span><br><span class="line">.jdc,jdc_logo,.jdc_hd &#123;</span><br><span class="line">    color: <span class="comment">#ff0;</span></span><br><span class="line">&#125;.nav&#123;</span><br><span class="line">    color: <span class="comment">#fff;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>颜色值 rgb() rgba() hsl() hsla() rect() 中不需有空格，且取值不要带有不必要的 0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*推荐：*/</span><br><span class="line">.jdc &#123;</span><br><span class="line">    color: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*不推荐：*/</span><br><span class="line">.jdc &#123;</span><br><span class="line">    color: rgba( <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>属性值十六进制数值能用简写的尽量用简写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*推荐：*/</span><br><span class="line">.jdc &#123;</span><br><span class="line">    color: <span class="comment">#fff;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*不推荐：*/</span><br><span class="line">.jdc &#123;</span><br><span class="line">    color: <span class="comment">#ffffff;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不要为 0 指明单位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*推荐：*/</span><br><span class="line">.jdc &#123;</span><br><span class="line">    margin: <span class="number">0</span> <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*不推荐：*/</span><br><span class="line">.jdc &#123;</span><br><span class="line">    margin: <span class="number">0</span>px <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="属性值引导"><a href="#属性值引导" class="headerlink" title="属性值引导"></a>属性值引导</h3><p>css属性值需要用到引号时，统一使用单引号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 推荐 */</span><br><span class="line">.jdc &#123; </span><br><span class="line">	font-family: <span class="string">&#x27;Hiragino Sans GB&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 不推荐 */</span><br><span class="line">.jdc &#123; </span><br><span class="line">	font-family: <span class="string">&quot;Hiragino Sans GB&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="属性书写顺序"><a href="#属性书写顺序" class="headerlink" title="属性书写顺序"></a>属性书写顺序</h3><p>建议遵循以下顺序：</p>
<blockquote>
<ul>
<li>布局定位属性：display / position / float / clear / visibility / overflow</li>
<li>自身属性：width / height / margin / padding / border / background</li>
<li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>
<li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    position: relative;</span><br><span class="line">    <span class="built_in">float</span>: left;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    margin: <span class="number">0</span> <span class="number">10</span>px;</span><br><span class="line">    padding: <span class="number">20</span>px <span class="number">0</span>;</span><br><span class="line">    font-family: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">    color: <span class="comment">#333;</span></span><br><span class="line">    background: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.5</span>);</span><br><span class="line">    -webkit-border-radius: <span class="number">10</span>px;</span><br><span class="line">    -moz-border-radius: <span class="number">10</span>px;</span><br><span class="line">    -o-border-radius: <span class="number">10</span>px;</span><br><span class="line">    -ms-border-radius: <span class="number">10</span>px;</span><br><span class="line">    border-radius: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CSS3浏览器私有前缀写法"><a href="#CSS3浏览器私有前缀写法" class="headerlink" title="CSS3浏览器私有前缀写法"></a>CSS3浏览器私有前缀写法</h3><p>CSS3 浏览器私有前缀在前，标准前缀在后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    -webkit-border-radius: <span class="number">10</span>px;</span><br><span class="line">    -moz-border-radius: <span class="number">10</span>px;</span><br><span class="line">    -o-border-radius: <span class="number">10</span>px;</span><br><span class="line">    -ms-border-radius: <span class="number">10</span>px;</span><br><span class="line">    border-radius: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h1><hr>
<blockquote>
<ul>
<li>注释以字符 /* 开始，以字符 */ 结束</li>
<li>注释不能嵌套</li>
</ul>
</blockquote>
<h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>注释内容第一个字符和最后一个字符都是一个空格字符，单独占一行，行与行之间相隔一行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">推荐：</span><br><span class="line">/* Comment Text */</span><br><span class="line">.jdc&#123;&#125;</span><br><span class="line"></span><br><span class="line">/* Comment Text */</span><br><span class="line">.jdc&#123;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">不推荐：</span><br><span class="line">/*Comment Text*/</span><br><span class="line">.jdc&#123;</span><br><span class="line">	display: block;</span><br><span class="line">&#125;</span><br><span class="line">.jdc&#123;</span><br><span class="line">	display: block;/*Comment Text*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模块注释"><a href="#模块注释" class="headerlink" title="模块注释"></a>模块注释</h2><p>注释内容第一个字符和最后一个字符都是一个空格字符，/* 与 模块信息描述占一行，多个横线分隔符-与*/占一行，行与行之间相隔两行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">推荐：</span><br><span class="line">/* Module A</span><br><span class="line">---------------------------------------------------------------- */</span><br><span class="line">.mod_a &#123;&#125;</span><br><span class="line">/* Module B</span><br><span class="line">---------------------------------------------------------------- */</span><br><span class="line">.mod_b &#123;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">不推荐：</span><br><span class="line">/* Module A ---------------------------------------------------- */</span><br><span class="line">.mod_a &#123;&#125;</span><br><span class="line">/* Module B ---------------------------------------------------- */</span><br><span class="line">.mod_b &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文件信息注释"><a href="#文件信息注释" class="headerlink" title="文件信息注释"></a>文件信息注释</h2><p>在样式文件编码声明 @charset 语句下面注明页面名称、作者、创建日期等信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@charset &quot;UTF-8&quot;;</span></span><br><span class="line">/**</span><br><span class="line"> * @desc File Info</span><br><span class="line"> * @author Author Name</span><br><span class="line"> * @date <span class="number">2015</span><span class="number">-10</span><span class="number">-10</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h1 id="SASS规范"><a href="#SASS规范" class="headerlink" title="SASS规范"></a>SASS规范</h1><hr>
<h2 id="SASS注释规范"><a href="#SASS注释规范" class="headerlink" title="SASS注释规范"></a>SASS注释规范</h2><p>SASS支持 CSS 标准的多行注释 /* */，同时也支持单行注释 //。</p>
<blockquote>
<ul>
<li>多行注释在使用非 Compressed 模式进行编译后的输出文件中会保留下来，单行注释 // 侧会被移除</li>
<li>多行注释和单行注释在 SASS 编译后输出的压缩 CSS 文件都会被移除</li>
<li>当多行注释内容第一个字符是感叹号 “!” 的时候，即 /*! */，SASS无论用哪一种编译方式编译注释都会保留</li>
<li>注释内容可以加入 SASS 变量</li>
</ul>
</blockquote>
<h2 id="嵌套规范"><a href="#嵌套规范" class="headerlink" title="嵌套规范"></a>嵌套规范</h2><h3 id="选择器嵌套"><a href="#选择器嵌套" class="headerlink" title="选择器嵌套"></a>选择器嵌套</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* CSS */</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">body .jdc &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* SCSS */</span><br><span class="line">.jdc &#123;</span><br><span class="line">    body &amp; &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* CSS */</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">.jdc_cover &#123;&#125;</span><br><span class="line">.jdc_info &#123;&#125;</span><br><span class="line">.jdc_info_name &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* SCSS */</span><br><span class="line">.jdc &#123;</span><br><span class="line">    &amp;_cover &#123;&#125;</span><br><span class="line">    &amp;_info &#123;</span><br><span class="line">        &amp;_name &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* CSS */</span><br><span class="line">.jdc &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-image: url(/img/icon.png);</span><br><span class="line">    background-position: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* SCSS */</span><br><span class="line">.jdc &#123;</span><br><span class="line">    background: &#123;</span><br><span class="line">        color: red;</span><br><span class="line">        repeat: no-repeat;</span><br><span class="line">        image: url(/img/icon.png);</span><br><span class="line">        position: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>可复用属性尽量抽离为页面变量，易于统一维护</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    border-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// SCSS</span><br><span class="line">$color: red;</span><br><span class="line">.jdc &#123;</span><br><span class="line">    color: $color;</span><br><span class="line">    border-color: $color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="混合-mixin"><a href="#混合-mixin" class="headerlink" title="混合(mixin)"></a>混合(mixin)</h3><p>根据功能定义模块，然后在需要使用的地方通过 @include 调用，避免编码时重复输入代码段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line">    -webkit-border-radius: <span class="number">5</span>px;</span><br><span class="line">    border-radius: <span class="number">5</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line">    -webkit-border-radius: <span class="number">10</span>px;</span><br><span class="line">    border-radius: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line"><span class="meta">@mixin radius($radius:5px) &#123;</span></span><br><span class="line">    -webkit-border-radius: $radius;</span><br><span class="line">    border-radius: $radius;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line"><span class="meta">    @include radius; //参数使用默认值</span></span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line"><span class="meta">    @include radius(10px);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// CSS</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line">    background: url(/img/icon.png) no-repeat <span class="number">-10</span>px <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line">    background: url(/img/icon.png) no-repeat <span class="number">-20</span>px <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line"><span class="meta">@mixin icon($x:0, $y:0) &#123;</span></span><br><span class="line">    background: url(/img/icon.png) no-repeat $x, $y;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line"><span class="meta">    @include icon(-10px, 0);</span></span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line"><span class="meta">    @include icon(-20px, 0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="占位选择器"><a href="#占位选择器" class="headerlink" title="占位选择器 %"></a>占位选择器 %</h3><p>如果不调用则不会有任何多余的 css 文件，占位选择器以 % 标识定义，通过 @extend 调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//scss</span><br><span class="line">%borderbox &#123;</span><br><span class="line">    -webkit-box-sizing: border-box;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.jdc &#123;</span><br><span class="line"><span class="meta">    @extend %borderbox;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="extend-继承"><a href="#extend-继承" class="headerlink" title="extend 继承"></a>extend 继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    color: red;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line"><span class="meta">    @extend .jdc_1;</span></span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">%font_red &#123;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line"><span class="meta">    @extend %font_red;</span></span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line"><span class="meta">    @extend %font_red;</span></span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注意：<span class="comment">#&#123;&#125; 是连接符，变量连接使用时需要依赖</span></span><br><span class="line"></span><br><span class="line">// CSS</span><br><span class="line">.jdc_1 &#123;background-position: <span class="number">0</span> <span class="number">-20</span>px;&#125;</span><br><span class="line">.jdc_2 &#123;background-position: <span class="number">0</span> <span class="number">-40</span>px;&#125;</span><br><span class="line">.jdc_3 &#123;background-position: <span class="number">0</span> <span class="number">-60</span>px;&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line"><span class="meta">@for $i from 1 through 3 &#123;</span></span><br><span class="line">    .jdc_<span class="comment">#&#123;$i&#125; &#123;</span></span><br><span class="line">        background-position: <span class="number">0</span> (<span class="number">-20</span>px) * $i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="each-循环"><a href="#each-循环" class="headerlink" title="each 循环"></a>each 循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc_list &#123;</span><br><span class="line">    background-image: url(/img/jdc_list.png);</span><br><span class="line">&#125;</span><br><span class="line">.jdc_detail &#123;</span><br><span class="line">    background-image: url(/img/jdc_detail.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line"><span class="meta">@each $name in list, detail &#123;</span></span><br><span class="line">    .jdc_<span class="comment">#&#123;$name&#125; &#123;</span></span><br><span class="line">        background-image: url(/img/jdc_<span class="comment">#&#123;$name&#125;.png);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// CSS</span><br><span class="line">.jdc_list &#123;</span><br><span class="line">    background-image: url(/img/jdc_list.png);</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_detail &#123;</span><br><span class="line">    background-image: url(/img/jdc_detail.png);</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line"><span class="meta">@each $name, $color in (list, red), (detail, blue) &#123;</span></span><br><span class="line">    .jdc_<span class="comment">#&#123;$name&#125; &#123;</span></span><br><span class="line">        background-image: url(/img/jdc_<span class="comment">#&#123;$name&#125;.png);</span></span><br><span class="line">        background-color: $color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="function-函数"><a href="#function-函数" class="headerlink" title="function 函数"></a>function 函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@function pxToRem($px) &#123;</span></span><br><span class="line"><span class="meta">    @return $px / 10px * 1rem;</span></span><br><span class="line">&#125;</span><br><span class="line">.jdc &#123;</span><br><span class="line">    font-size: pxToRem(<span class="number">12</span>px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运算规范"><a href="#运算规范" class="headerlink" title="运算规范"></a>运算规范</h3><p>运算符之间空出一个空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    width: <span class="number">100</span>px - <span class="number">50</span>px;</span><br><span class="line">    height: <span class="number">30</span>px / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意运算单位，单位同时参与运算，所以 10px 不等于 10，乘除运算时需要特别注意</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 正确的运算格式</span><br><span class="line">.jdc &#123;</span><br><span class="line">    width: <span class="number">100</span>px - <span class="number">50</span>px;</span><br><span class="line">    width: <span class="number">100</span>px + <span class="number">50</span>px;</span><br><span class="line">    width: <span class="number">100</span>px * <span class="number">2</span>;</span><br><span class="line">    width: <span class="number">100</span>px / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="重置样式"><a href="#重置样式" class="headerlink" title="重置样式"></a>重置样式</h1><hr>
<h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* &#123; -webkit-tap-highlight-color: transparent; outline: <span class="number">0</span>; margin: <span class="number">0</span>; padding: <span class="number">0</span>; vertical-align: baseline; &#125;</span><br><span class="line">body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, <span class="built_in">input</span>, textarea, th, td &#123; margin: <span class="number">0</span>; padding: <span class="number">0</span>; vertical-align: baseline; &#125;</span><br><span class="line">img &#123; border: <span class="number">0</span> none; vertical-align: top; &#125;</span><br><span class="line">i, em &#123; font-style: normal; &#125;</span><br><span class="line">ol, ul &#123; <span class="built_in">list</span>-style: none; &#125;</span><br><span class="line"><span class="built_in">input</span>, select, button, h1, h2, h3, h4, h5, h6 &#123; font-size: <span class="number">100</span>%; font-family: inherit; &#125;</span><br><span class="line">table &#123; border-collapse: collapse; border-spacing: <span class="number">0</span>; &#125;</span><br><span class="line">a &#123; text-decoration: none; color: <span class="comment">#666; &#125;</span></span><br><span class="line">body &#123; margin: <span class="number">0</span> auto; <span class="built_in">min</span>-width: <span class="number">320</span>px; <span class="built_in">max</span>-width: <span class="number">640</span>px; height: <span class="number">100</span>%; font-size: <span class="number">14</span>px; font-family: -apple-system,Helvetica,sans-serif; line-height: <span class="number">1.5</span>; color: <span class="comment">#666; -webkit-text-size-adjust: 100% !important; text-size-adjust: 100% !important; &#125;</span></span><br><span class="line"><span class="built_in">input</span>[<span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>], textarea &#123; -webkit-appearance: none; -moz-appearance: none; appearance: none; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html, body, div, h1, h2, h3, h4, h5, h6, p, dl, dt, dd, ol, ul, li, fieldset, form, label, <span class="built_in">input</span>, legend, table, caption, tbody, tfoot, thead, tr, th, td, textarea, article, aside, audio, canvas, figure, footer, header, mark, menu, nav, section, time, video &#123; margin: <span class="number">0</span>; padding: <span class="number">0</span>; &#125;</span><br><span class="line">h1, h2, h3, h4, h5, h6 &#123; font-size: <span class="number">100</span>%; font-weight: normal &#125;</span><br><span class="line">article, aside, dialog, figure, footer, header, hgroup, nav, section, blockquote &#123; display: block; &#125;</span><br><span class="line">ul, ol &#123; <span class="built_in">list</span>-style: none; &#125;</span><br><span class="line">img &#123; border: <span class="number">0</span> none; vertical-align: top; &#125;</span><br><span class="line">blockquote, q &#123; quotes: none; &#125;</span><br><span class="line">blockquote:before, blockquote:after, q:before, q:after &#123; content: none; &#125;</span><br><span class="line">table &#123; border-collapse: collapse; border-spacing: <span class="number">0</span>; &#125;</span><br><span class="line">strong, em, i &#123; font-style: normal; font-weight: normal; &#125;</span><br><span class="line">ins &#123; text-decoration: underline; &#125;</span><br><span class="line"><span class="keyword">del</span> &#123; text-decoration: line-through; &#125;</span><br><span class="line">mark &#123; background: none; &#125;</span><br><span class="line"><span class="built_in">input</span>::-ms-clear &#123; display: none !important; &#125;</span><br><span class="line">body &#123; font: <span class="number">12</span>px/<span class="number">1.5</span> \<span class="number">5</span>FAE\<span class="number">8</span>F6F\<span class="number">96</span>C5\<span class="number">9</span>ED1, \<span class="number">5</span>B8B\<span class="number">4</span>F53, <span class="string">&quot;Hiragino Sans GB&quot;</span>, STHeiti, <span class="string">&quot;WenQuanYi Micro Hei&quot;</span>, <span class="string">&quot;Droid Sans Fallback&quot;</span>, SimSun, sans-serif; background: <span class="comment">#fff; &#125;</span></span><br><span class="line">a &#123; text-decoration: none; color: <span class="comment">#333; &#125;</span></span><br><span class="line">a:hover &#123; text-decoration: underline; &#125;</span><br></pre></td></tr></table></figure>
<h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><hr>
<h2 id="常用查询语句"><a href="#常用查询语句" class="headerlink" title="常用查询语句"></a>常用查询语句</h2><h3 id="判断设备横竖屏"><a href="#判断设备横竖屏" class="headerlink" title="判断设备横竖屏"></a>判断设备横竖屏</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 横屏 */</span><br><span class="line"><span class="meta">@media all and (orientation :landscape) &#123;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 竖屏 */</span><br><span class="line"><span class="meta">@media all and (orientation :portrait) &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断设备宽高"><a href="#判断设备宽高" class="headerlink" title="判断设备宽高"></a>判断设备宽高</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 设备宽度大于 <span class="number">320</span>px 小于 <span class="number">640</span>px */</span><br><span class="line"><span class="meta">@media all and (min-width:320px) and (max-width:640px) &#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断设备像素比"><a href="#判断设备像素比" class="headerlink" title="判断设备像素比"></a>判断设备像素比</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 设备像素比为 <span class="number">1</span> */</span><br><span class="line"><span class="meta">@media only screen and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-pixel-ratio: 1) &#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 设备像素比为 <span class="number">1.5</span> */</span><br><span class="line"><span class="meta">@media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) &#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 设备像素比为 <span class="number">2</span> */</span><br><span class="line"><span class="meta">@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) &#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用设备设置"><a href="#常用设备设置" class="headerlink" title="常用设备设置"></a>常用设备设置</h3><p>iPhones</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* ----------- iPhone <span class="number">4</span> <span class="keyword">and</span> <span class="number">4</span>S ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">480</span>px)</span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">480</span>px)</span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">480</span>px)</span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ----------- iPhone <span class="number">5</span> <span class="keyword">and</span> <span class="number">5</span>S ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">568</span>px)</span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">568</span>px)</span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">568</span>px)</span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ----------- iPhone <span class="number">6</span> ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">375</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">667</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>) &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">375</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">667</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">375</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">667</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ----------- iPhone <span class="number">6</span>+ ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">414</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">736</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">3</span>) &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">414</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">736</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">414</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">736</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Galaxy Phones</span><br><span class="line">/* ----------- Galaxy S3 ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">2</span>) </span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">2</span>) </span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ----------- Galaxy S4 ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>) </span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">320</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>) </span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ----------- Galaxy S5 ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">360</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">360</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>) </span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">360</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>) </span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTC Phones</span><br><span class="line">/* ----------- HTC One ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">360</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">360</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>) </span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media screen </span></span><br><span class="line">  <span class="keyword">and</span> (device-width: <span class="number">360</span>px) </span><br><span class="line">  <span class="keyword">and</span> (device-height: <span class="number">640</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>) </span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iPads</span><br><span class="line">/* ----------- iPad mini ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">768</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">1024</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">768</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">1024</span>px) </span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">768</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">1024</span>px) </span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ----------- iPad <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span> ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">768</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">1024</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">768</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">1024</span>px) </span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">768</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">1024</span>px) </span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ----------- iPad <span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span> ----------- */</span><br><span class="line"></span><br><span class="line">/* Portrait <span class="keyword">and</span> Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">768</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">1024</span>px) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Portrait */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">768</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">1024</span>px) </span><br><span class="line">  <span class="keyword">and</span> (orientation: portrait) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Landscape */</span><br><span class="line"><span class="meta">@media only screen </span></span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">min</span>-device-width: <span class="number">768</span>px) </span><br><span class="line">  <span class="keyword">and</span> (<span class="built_in">max</span>-device-width: <span class="number">1024</span>px) </span><br><span class="line">  <span class="keyword">and</span> (orientation: landscape) </span><br><span class="line">  <span class="keyword">and</span> (-webkit-<span class="built_in">min</span>-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="移动端常用私有属性"><a href="#移动端常用私有属性" class="headerlink" title="移动端常用私有属性"></a>移动端常用私有属性</h1><hr>
<p>目前两大主流移动平台为 iOS 和 Android，有不少带 -webkit- 前辍的 CSS 私有属性以及一些 iOS only 属性，当中好些属性在日常需求中经常应用到。</p>
<p>WebKit CSS 属性中的一部分已经被包含在 CSS 规范草案中，并且可能成为最后的推荐标准，但目前仍然是试验性的属性，还有一些属性是不规范的属性，它们没有出现在跟踪规范中。</p>
<h2 id="webkit-scrollbar"><a href="#webkit-scrollbar" class="headerlink" title="-webkit-scrollbar"></a>-webkit-scrollbar</h2><p>-webkit-scrollbar 是-webkit-私有的伪元素，用于对拥有overflow属性的区域 自定义滚动条的样式。<br>譬如，为了隐藏滚动条，你可以这么做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.scroll::-webkit-scrollbar &#123;</span><br><span class="line">    width: <span class="number">0</span>;</span><br><span class="line">    height: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了对整个滚动条的控制外，Webkit还提供了控制对滚动条各组成部分的表现渲染的伪元素，甚至具体到滚动条的各种状态行为的伪类。</p>
<h2 id="滚动条各块组成表现渲染的伪元素"><a href="#滚动条各块组成表现渲染的伪元素" class="headerlink" title="滚动条各块组成表现渲染的伪元素"></a>滚动条各块组成表现渲染的伪元素</h2><p>一般而言，滚动条的主要组成部分包括：</p>
<blockquote>
<ul>
<li>滚动按钮 — 滚动按钮的夹角则被称为滚动角(corner)。</li>
<li>轨道 — 轨道(track)可以进一步分为轨枕(track pieces) 和滑块(thumb)。<br>Webkit则根据滚动条各组成部分，提供了不同的伪元素来自定义样式。</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar              &#123; /* <span class="number">1</span> */ &#125;</span><br><span class="line">::-webkit-scrollbar-button       &#123; /* <span class="number">2</span> */ &#125;</span><br><span class="line">::-webkit-scrollbar-track        &#123; /* <span class="number">3</span> */ &#125;</span><br><span class="line">::-webkit-scrollbar-track-piece  &#123; /* <span class="number">4</span> */ &#125;</span><br><span class="line">::-webkit-scrollbar-thumb        &#123; /* <span class="number">5</span> */ &#125;</span><br><span class="line">::-webkit-scrollbar-corner       &#123; /* <span class="number">6</span> */ &#125;</span><br><span class="line">::-webkit-resizer                &#123; /* <span class="number">7</span> */ &#125;</span><br></pre></td></tr></table></figure>

<h2 id="滚动条各块组成的伪元素"><a href="#滚动条各块组成的伪元素" class="headerlink" title="滚动条各块组成的伪元素"></a>滚动条各块组成的伪元素</h2><p>下面的伪类可以应用到上面的伪元素中。<br>:horizontal：选择水平方向的滚动条。</p>
<p>:vertical：选择垂直方向的滚动条。</p>
<p>:decrement：适用于滚动按钮和轨枕。选择能够使得视窗位置递减状态(例如，垂直滚动条向上滚动，水平滚动条向左滚动。)的滚动按钮或轨枕。</p>
<p>:increment：适用于滚动按钮和轨枕。选择能够使得视窗位置递增状态(例如，垂直滚动条向下滚动，水平滚动条向右滚动。)的滚动按钮或轨枕。</p>
<p>:start：适用于滚动按钮和轨枕。选择位于滚动滑块前边的滚动按钮和轨枕。</p>
<p>:end：适用于滚动按钮和轨枕。选择位于滚动滑块后边的滚动按钮和轨枕。</p>
<p>:double-button：适用于滚动按钮和轨枕。选中紧挨着一对按钮的轨枕以及位于滚动条某一端的一对按钮中的其中一个滚动按钮。</p>
<p>:single-button：适用于滚动按钮和轨枕。选中紧挨着仅一个按钮的轨枕以及位于滚动条某一端的仅它本身一个的滚动按钮。</p>
<p>:no-button：适用于轨枕。选中轨道结束位置没有按钮的轨枕。</p>
<p>:corner-present：适用于选中滚动角不存在的滚动条。</p>
<p>:window-inactive：适用于所有滚动条，选中焦点不在该视窗的滚动区域。</p>
<p>另外，:enabled、:disabled、:hover、和:active等伪类同样在滚动条中适用。<br>为了更好地理解，以下是几个伪元素组合伪类的应用例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar-track-piece:start &#123;</span><br><span class="line"> /\*滚动条上半边或左半边\*/</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb:window-inactive &#123;</span><br><span class="line"> /\*当焦点不在当前区域滑块的状态\*/</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-button:horizontal:decrement:hover &#123;</span><br><span class="line"> /\*当鼠标在水平滚动条下面的按钮上的状态\*/</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="webkit-touch-callout"><a href="#webkit-touch-callout" class="headerlink" title="-webkit-touch-callout"></a>-webkit-touch-callout</h2><p>-webkit-touch-callout 是一个不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</p>
<p>当你触摸并按住触摸目标时候，禁止或显示系统默认菜单。在iOS上，当你触摸并按住触摸的目标，比如一个链接，Safari浏览器将显示链接有关的系统默认菜单，这个属性可以让你禁用系统默认菜单。<br>属性值</p>
<blockquote>
<ul>
<li>none：系统默认菜单被禁用</li>
<li>inherit：系统默认菜单不被禁用</li>
</ul>
</blockquote>
<p>兼容性</p>
<blockquote>
<ul>
<li>iOS 2.0及更高版本的 Safari 浏览器可用</li>
<li>Android 尚不明确</li>
</ul>
</blockquote>
<h2 id="webkit-tap-highlight-color"><a href="#webkit-tap-highlight-color" class="headerlink" title="-webkit-tap-highlight-color"></a>-webkit-tap-highlight-color</h2><p>-webkit-tap-highlight-color 是一个不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</p>
<p>在 iOS Safari 上，当用户点击链接或具有 JavaScript 可点击脚本的元素，系统会为这些被点击元素加上一个默认的透明色值，该属性可以覆盖该透明值。<br>兼容性</p>
<blockquote>
<ul>
<li>iOS 1.1.1及更高版本的Safari浏览器可用</li>
<li>大部分安卓手机</li>
</ul>
</blockquote>
<h2 id="webkit-overflow-scrolling"><a href="#webkit-overflow-scrolling" class="headerlink" title="-webkit-overflow-scrolling"></a>-webkit-overflow-scrolling</h2><p>定义在具 overflow:scroll 属性的元素内是否采用原生样式滚动行为<br>属性值</p>
<blockquote>
<ul>
<li>auto:默认值，单手滚动，滚动没有惯性效果</li>
<li>touch：原生样式滚动，应用此属性值会产生层叠上下文（会影响定位参照物的属性，类似 opacity、masks、transforms属性，影响到 position 的效果，甚至影响到 position:fixed 的定位参照物，）</li>
</ul>
</blockquote>
<p>兼容性</p>
<blockquote>
<ul>
<li>OS 5.0 及更高版本</li>
<li>大部分安卓机</li>
</ul>
</blockquote>
<h2 id="webkit-line-clamp"><a href="#webkit-line-clamp" class="headerlink" title="-webkit-line-clamp"></a>-webkit-line-clamp</h2><p>-webkit-line-clamp 是一个不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</p>
<p>限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他外来的WebKit属性。</p>
<p>常见结合属性：</p>
<blockquote>
<ul>
<li>display: -webkit-box：必须结合的属性，将对象作为弹性伸缩盒子模型显示。</li>
<li>-webkit-box-orient：必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式。</li>
<li>text-overflow：可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本。</li>
</ul>
</blockquote>
<p>属性值<br>number:块元素显示的文本的行数</p>
<p>兼容性</p>
<blockquote>
<ul>
<li>iOS</li>
<li>Andriod</li>
</ul>
</blockquote>
<h2 id="webkit-appearance"><a href="#webkit-appearance" class="headerlink" title="-webkit-appearance"></a>-webkit-appearance</h2><p>-webkit-appearance 是一个不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</p>
<p>改变按钮和其他控件的外观，使其类似于原生控件。</p>
<p>属性值(<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/appearance">https://developer.mozilla.org/en-US/docs/Web/CSS/appearance</a>)</p>
<blockquote>
<ul>
<li>none：去除系统默认 appearance 的样式，常用于 iOS 下移除原生样式</li>
<li>button：渲染成 button 的风格</li>
<li>checkbox：渲染成 input checkbox 样式的复选框按钮</li>
<li>radio：渲染成 radio 的风格</li>
</ul>
</blockquote>
<p>兼容性</p>
<blockquote>
<ul>
<li>iOS 2.0及更高版本的Safari浏览器可用</li>
<li>Android 尚不明确</li>
</ul>
</blockquote>
<h2 id="webkit-font-smoothing"><a href="#webkit-font-smoothing" class="headerlink" title="-webkit-font-smoothing"></a>-webkit-font-smoothing</h2><p>字体平滑，该属性定义文本的平滑属性，但要注意以下说明：</p>
<blockquote>
<p>非标准属性，不建议用于网页上，这个属性不能保证所有用户都能看到相同效果，这会使网站的字体渲染造成不一致，而此属性的渲染行为日后也有可能会改变</p>
</blockquote>
<hr>
<p>属性值</p>
<blockquote>
<ul>
<li>none：去掉字体平滑效果，使字体带锯齿</li>
<li>antialiased：使字体在像素级别更平滑更轻细</li>
<li>subpixel-antialiased：在多数非 Retina 显示设备中字体将会更锐利。<br>注意：以上属性在 Retina 设备上会有明显的效果，在非 Retina 设备上看不出差异</li>
</ul>
</blockquote>
<p>兼容性<br>部分高清设备，如 Retina Mac</p>
<h2 id="webkit-backface-visibility"><a href="#webkit-backface-visibility" class="headerlink" title="-webkit-backface-visibility"></a>-webkit-backface-visibility</h2><p>backface-visibility 在 W3文档 有定义描述</p>
<p>定义转换元素的背面是否显示<br>属性值</p>
<blockquote>
<ul>
<li>visible：显示（默认值）</li>
<li>hidden：隐藏</li>
</ul>
</blockquote>
<p>兼容性</p>
<blockquote>
<ul>
<li>iOS 2.0 及更高版本的 Safari 浏览器可用</li>
<li>大部分 Android</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>粤省事小程序设计方案</title>
    <url>/2020/07/27/%E7%B2%A4%E7%9C%81%E4%BA%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>粤省事小程序是一个基于移动端的聚合式政务服务平台。作为一个平台型产品，它集成了广东省各地市、各部门的多项民生、政务类服务内容；同时，它也承担着对不同政府部门、合作开发商、公众用户等多个相关主体的利益串联。数字广东公司（由广东省政府发起并领导，腾讯及三大运营商共建）是粤省事<a href="https://www.uisdc.com/topic/%e5%b0%8f%e7%a8%8b%e5%ba%8f">小程序</a>的幕后建设统筹单位。「数广」体验设计团队（主要由来自腾讯的设计师组成）通过体系化的工作方法，在项目复杂、工期紧张的背景下，完成了对<a href="https://www.uisdc.com/tag/%e7%b2%a4%e7%9c%81%e4%ba%8b%e5%b0%8f%e7%a8%8b%e5%ba%8f">粤省事小程序</a>的体验框架搭建。在这次实践中，设计团队探讨了基于互联网的设计理念与传统政务服务的结合模式，为推进「数广」产品体系中各模块的设计工作，整体重塑广东电子政务服务的远期目标积累了重要经验。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-1.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"></p>
<h4 id="一、背景解读"><a href="#一、背景解读" class="headerlink" title="一、背景解读"></a>一、背景解读</h4><p>近年来，在党中央和国务院的大力支持下，我们国家逐渐完善了电子政务发展的顶层设计，为各地「互联网+政务」的建设制定了清晰、可执行落地的路径规划。广东省按照相关规划，在数字政府的建设模式上积极探索：一方面，在政府侧成立了专门的领导小组，对建设工作进行规划及协调 ；另一方面，由腾讯和三大运营商组建了数字广东公司，为实施过程提供专业的技术支撑、方案设计及建设运维能力。 在这样一个领导责任明确、建设支撑单位专业化能力完备的基础上，「数广」公司将按照领导单位的规划，联合各家合作开发商，逐步对广东各地市、各部门分散设立、重复建设、服务质量较差的电子政务系统进行整体重塑：通过规划中的一系列改造，降低信息化系统的整体运营成本，提升政府工作人员的办事效率，为公众带来更好的政务服务体验。</p>
<h4 id="二、总体任务"><a href="#二、总体任务" class="headerlink" title="二、总体任务"></a>二、总体任务</h4><p>对全省范围内的电子政务体系进行整体重塑，是一项非常复杂的系统性工程，需要以架构设计的方式对技术底层到应用表层间不同环节的相关工作进行规划。按照相关规划，设计团队的总体任务既要聚焦于整个架构的顾客行为层面，也要协调 PPP 三方的合作方式：一方面基于一系列平台型产品，结合各级政府及开发商的运作特点，对各类政务服务进行体验重塑和整合，让政务服务变得更人性化、更方便好用；另一方面基于一系列工具型产品，为政务运作提供更好的效率支持。 粤省事小程序是数字广东产品体系中的重要一环，作为一个政务服务的聚合平台，通过对各类相关事项的整合处理和体验提升，为公众提供「一站式」、「能办成事」的移动端服务触点；而针对服务供给侧，粤省事平台为各级政府部门及合作开发商提供规范的对接模式，让这些相关主体能顺畅地把各类服务事项按照统一标准在粤省事平台上线，以充分利用平台的各项技术（高并发、稳定性等）和业务（身份、支付等）优势，以更低的成本为更广泛的用户带来更多、更好的服务。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-3.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> 「粤省事」三个字，「粤」即是广东省的简称，同时也和「越」同音；「省」代表了服务与省内，和「事」字组成「省事」也传递出小程序的核心要义「方便快捷」。「一站式，更省事」的 Slogan 更是强调了突出了我们的优势，希望给用户提供一站式便捷办理省内政务服务的平台。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-4.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> 接下来，我们将回顾「数广」设计团队在粤省事小程序项目中的各项工作实践，同时也对过程中关于「政务类服务及体验设计」的一些思考进行总结。</p>
<h4 id="三、设计分析"><a href="#三、设计分析" class="headerlink" title="三、设计分析"></a>三、设计分析</h4><h5 id="1-竞品探索"><a href="#1-竞品探索" class="headerlink" title="1. 竞品探索"></a>1. 竞品探索</h5><p>第一类：在已有的高用户量平台里，搭建民生服务集合站点，例如微信城市服务、支付宝城市服务。这一类门户本身是众多官方或第三方服务的入口集散地，优点是提供了大而全的服务平台，群众可以比较容易的在固定平台里找到服务入口。但每个服务自成一体，独自开发，所以各个服务之间不存在统一或者规范。 第二类：渠道商自建 App 中的服务入口，例如中国邮政的车务代办。这一类服务散落在各个渠道商自建的 App 里。同时也受渠道的能力影响，功能相对比较简单。 第三类：业务部门自建公众号或 App。在部门的业务范围内，有很好的体验一致性及服务闭环。但公众号、服务号更多的被集合在第一类大平台里。而 App 必须先下载后使用，这就让使用门槛又高了一层。 综上所述，我们小程序是希望打造一站式的服务体验平台。所以，既应该有第一类竞品的全面、易找到的特性，也同时要具备第三类的体验一致性与业务闭环。最终需要我们自己去寻找一个适合的定位。</p>
<h5 id="2-用户研究及分析"><a href="#2-用户研究及分析" class="headerlink" title="2. 用户研究及分析"></a>2. 用户研究及分析</h5><p>通过顾客旅程地图来梳理用户三种办事场景（线上办理办结、线上预约线下办结、线下办理）的每一个环节的需求，感受和痛点。从而推导出设计的机会点。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-5.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> 我们汇总发现用户的痛点集中在以下方面。归纳起来，便捷、清晰、易找到是用户关注的核心要素点。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-6.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"></p>
<h5 id="3-设计统筹与战略分析"><a href="#3-设计统筹与战略分析" class="headerlink" title="3. 设计统筹与战略分析"></a>3. 设计统筹与战略分析</h5><p>和传统的 to C 项目不一样，粤省事小程序不仅是一个信息规模大、功能复杂的平台型产品，同时也涉及到政府各部门如何协调合作的问题。和业务、技术等其他相关团队一样，设计团队也需要基于全局视角，以统筹的思路介入工作，才能避免在纷杂的细节执行中走偏，实现对平台整体体验的有效把控。在节奏尤其紧张的项目初期，设计团队有意识地慢下来，对以下这些最可能影响设计走向的问题进行了梳理，作为对后续各类细节工作的总体指引。 <strong>自下而上的设计：做好预判，提前设计</strong> 小程序和广东省政务服务网的设计路径有很大区别。政务服务网是一个集合了政务服务全量功能的平台，设计路径也是自上而下的全盘改造。但小程序是一个开放的接入平台，各个部门愿意接入哪些移动端的业务能力，就接入哪些业务，是自下而上的设计。「多」，大概是对全省政务服务总量的一个安全的估算，但到底和我们的平台属性相吻合的服务有多少却不是显而易见的。通过有针对性的盘点，我们发现在全省50多个部门中只有20多个包含和我们的目标用户相关的服务，而这20多个中仅有三分一提供大部分用户较常使用的服务。粤省事平台需要对接的核心服务内容，其实仅来自7、8个相关部门，对信息总量和用户规模的整体梳理将有助于后续信息架构和关键路径的设计。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-7.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> <strong>以办成事情为目标，做服务整合</strong> 在对信息的盘点过程中，我们发现当前大量的政务服务是以行政事项的形式机械地罗列出来，是政府内部运转模式的直接呈现。用户要做成一件事情，往往需要分别办理若干个不同的事项。为此，我们得到一个设计各类服务流程的基本原则：在平台接入的服务内容需要以「办成事情」为任务目标来整合，尽可能解决用户的最终诉求。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-8.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> <strong>探寻品类通用模型</strong> 对比其他互联网化更充分的行业，大部分政务服务还没有成熟的品类通用体验模式（如：电商、外卖、视频应用的框架布局、基本操作大同小异）。 作为一家统筹单位，我们有条件集中力量处理好服务整合的问题，从而为不同政务服务找到各自领域的内容本质，形成通用体验模型，以满足在不同地市、场景快速复制的业务发展需求。</p>
<h5 id="4-设计目标"><a href="#4-设计目标" class="headerlink" title="4. 设计目标"></a>4. 设计目标</h5><p>在有了前序比较完整的分析之后，我们归纳分析出整体目标。粤省事小程序的本质在于构建一个聚合各项政务服务的移动端平台，以平台的模式串联好用户、合作开发商、政府部门，让三个利益方各得其所。为此，我们对设计目标进行了针对各方核心需求特定的有针对性的定义： <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-9.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> 定义设计基础原则： <strong>清晰易用</strong> 根据业务状态推荐业务功能，降低用户决策负荷。确保信息元素具备优先级层次与可用性。确保界面更加符合用户心理直觉。 <strong>灵活高效</strong> 提供全局观的入口式设计方案，不轻易陷入细节流程。设计模式具备可扩展、完善包容的机制。 <strong>简单务实</strong> 摒弃不必要的设计元素，追求利落适用的特质。通盘考虑各端优势，移动端可作为复杂事项申办引流入口，不可处理过于复杂的事项流程。 进一步推导出基础设计语言： <strong>轻快</strong> 信息聚焦、扁平视觉、自然的视觉流、提高视觉信噪比。 <strong>亲和</strong> 简洁缓和、完整统一、操作可靠，体验上连续舒适。 <strong>直率</strong> 结构简单、信息富有韵律感，减少视觉分割和过于热闹的装饰。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-10.jpeg" alt="如何设计小程序？腾讯这个实战案例太赞了！"></p>
<h5 id="5-信息架构构建"><a href="#5-信息架构构建" class="headerlink" title="5. 信息架构构建"></a>5. 信息架构构建</h5><p><strong>For 用户 – 以「办事为中心」组织整体信息</strong> 按相关部门主持的服务来组织功能是当前常见的处理方式，但这种组织方式从用户调研的反馈来看，用户并不能把事情和各个主管部门一一对应，且许多事情需要多个部门配合处理。所以常见的「部门」组织方式，不是直接解决用户问题的方式。因此摒弃以主管部门为维度的归类方式，换成改同类事情的集合。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-11.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> <strong>For 服务 – 基于地市组织服务信息</strong> 按行政属地划分是当前各类政务服务能力的基本组织形式，这种形式和基于地理的模型有许多共通之处，像订餐、差旅等行业都是以属地来组织信息的常见例子，这种模型和我们的情况最吻合。从服务侧来看，这样可以根据地理位置直接匹配相应的服务提供方。从用户侧来看，也可以更准确的提交服务诉求。 <strong>For 合作 – 划分三级页面体系</strong> 总体上，我们把小程序的架构处理成小程序主体+各个功能模块二级首页+具体办事流程页的三级体系。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-12.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> 小程序首页与各种全局功能（如登录、消息、进度、搜索等），涉及的内容直接反应小程序的初始体验感受。我们将这部分内容定义为「全部模型设计」的范畴，由数广设计团队主刀。 二级首页即各个业务的服务大厅，影响用户对业务的感知。我们将这部分内容定义为「业务模型设计」，同样由数广设计团队主刀，可以保证多业务的体验一致性。 而业务流程，我们则交给对业务熟悉程度更高的开发商。数广定制「流程模型」规范，让不同开发商能按照统一标准，在2个月内把152个事项接入到粤省事中。</p>
<h4 id="四、设计实施"><a href="#四、设计实施" class="headerlink" title="四、设计实施"></a>四、设计实施</h4><h5 id="1-主程序设计"><a href="#1-主程序设计" class="headerlink" title="1. 主程序设计"></a>1. 主程序设计</h5><p><strong>以用户为中心，以证件为切入点</strong> 在过往的线上服务系统中，服务提供方倾向一次性展示更多的功能，希望众多功能总有一个是用户需要的。但这并不是以帮助用户办成事为第一目标的设计思维。 在前文中提到以事情为中心的信息组织方式，是为了让信息架构成更扁平直观，从而更易于用户理解。于是我们尝试了第一种整体的布局方案，小程序整体分为「服务」「证件」「我」三个大的 tab。但从用研测试反馈来看，相对具体的服务事项，证件才是用户对业务的第一认知方式。同时，粤省事的小程序属性，导致再次嵌套底部<a href="https://www.uisdc.com/topic/%e5%af%bc%e8%88%aa">导航</a>的体验不够轻便。于是在仅剩1个月就要上线的前夕，我们推翻了第一种方案。把证件放到了首页的 C位，强化了证件的展示，通过最易理解的信息元素引导用户探索其他常用的功能。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-13.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> 证件本体的设计上，我们更多采用了轻质感拟物化设计。从实体证件中提取具有识别性的颜色和特征图形，进行视觉优化。同时，在 「视觉的颜色」 和 「跟真实颜色走」 两个点间，我们选择了跟真实颜色走。通过这些简单而必要的视觉隐喻，减少用户记忆压力，从直观层面上理解业务，更快作出反应和决定。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-14.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> <strong>入口信息处理</strong> 作为承载各类服务的平台，我们初次面对的是需要容纳142个细项的业务，后续还会不断的增加更多事项。如果不加以规范，很容易出现入口堆砌的窘境。既要保证服务内容的完整展示，又要保证用户能便捷地找到相关的内容，我们对首页的入口展现形式做了特定处理。 保持友好：在视觉表现上通过对留白和字号的控制，让用户尽可能舒适地浏览多入口信息。在类别标题上尽可能选用简单的名词来命名，不需要再次转译信息。 建立信任感：增加服务提供方的名称，即可以提高服务的公信度，也可以反向影响政府部门尽快上线更多的便民功能。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-15.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> <strong>平衡设计细节</strong> 整体界面采用扁平化的设计，去除冗余、繁杂的装饰效果，突出核心的设计元素，让用户使用时更为直观和更有目的性；为适用于不同年龄层的用户，整体界面采用了大字体，通过字号、字重、间距、留白来建立清晰的信息层级，提高用户的使用效率。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-16.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"></p>
<h5 id="2-二级首页设计"><a href="#2-二级首页设计" class="headerlink" title="2. 二级首页设计"></a>2. 二级首页设计</h5><p><strong>通用基础模型搭建</strong> 不同类型的政务服务，从用户角度来看能抽象成相对简单的查询类、办理类、预约类三个大类。进一步梳理，我们把基本的「查」相关的数据更直接的展现出来。「办」和「约」则根据用户当前的状态，给予适合的任务推荐。简单的来说，通过「我的基本信息+我的状态+我能做什么」的公式来组合业务。通过这种模型，不仅可以使信息组织更有逻辑性，也可以减少因用户状态不满足条件引起的错误业务申请量。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-18.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> <strong>为用户提供服务全局观</strong> 二级首页承载的是以单个主题为中心的系列服务内容。许多政务服务内容自身有这样的特点：用户不是很频繁使用，许多时候用户并不能较清晰地理解相关业务名词的抽象概念。因此，我们首先打破了原有的以某某局，某某窗口为事情呈现的方式。但业务本身不能毫无章法的一股脑全部呈现给用户，为此，我们通过对不同服务的解构，在页面的主要区域展示通过梳理提取的服务主题核心名词或任务，帮助用户更好地理解各类抽象概念。同时，在整个页面信息布局上，尽可能展示某类服务的框架性信息。让用户先建立该主题的全局认知，再安心地探索自己感兴趣的内容。 以护照与通行证为例子，我们可以把护照与通行证基础的3类业务：护照相关、台湾通行证相关、港澳通行证相关，作为整个主题的主框架。再细分，每种证件的状态、相关的功能。那么用户对护照与通行证这里可以做什么，就可以有一个比较全局的认知和理解。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-17.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> <strong>通过状态判断简化任务</strong> 每个主题下，可办理的事项很多。在项目初期，我们快速输出了一个以分类事项入口为主导的样式。但这些事项往往是和特定的状态绑定的，用户当前的状态极有可能导致业务不可办理。例如，未办理过通行证的用户不能也不需要办理挂失、再次签注等业务，他仅可申请办理新的证件。利用这样的逻辑，我们为二级首页的内容设定这样的规则：任何功能入口都以用户的当前状态作为展示与否的依据。这样我们便能通过一些前端的基本处理，大大减低用户的选择任务负荷了。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-18.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> <strong>塑造亲和简洁的服务形象</strong> 为打造粤省事小程序服务便捷、贴近民生、专业可靠的品牌形象，选用「民生绿」作为主色，搭配充满活力的黄色为辅色。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-19.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"></p>
<h5 id="3-服务场景整合设计"><a href="#3-服务场景整合设计" class="headerlink" title="3. 服务场景整合设计"></a>3. 服务场景整合设计</h5><p>真正地以用户为中心，从「罗列服务内容让用户来找」转变为「深入了解需求，把服务打包好端到用户面前」是我们其中一个设计目标。在实际设计过程中，我们重点重建了服务的使用场景。 我们前面多次提及的业务平铺罗列会让用户难以快速理解。同时，很多业务由于其专业性，其名称描述并不是普通老百姓一眼就能看懂的，这让服务使用的门槛又再高了一层。 以仲裁业务为例，大部分需要通过仲裁为自己争取权益的用户文化层次较低（如农民工），对相关法律术语不太了解。尽管许多仲裁事项已经进行了线上化改造，用户可在线上办理许多业务，不需要到线下排队等等。但大量的专业术语让普通用户也很难理解如何使用这些服务，对文化层次较低的农民工就更不友好了。于是在改造仲裁服务时，我们把原本列表式的入口呈现方式进行了整合，根据用户的诉求场景来归纳相关内容，在符合法律规定的基础上，尽可能减少专业术语的露出，让专业事项通过更直白的方式描述。分不同角色查看对应该使用的业务，再细分不同阶段可能会需要的业务。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-20.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"></p>
<h5 id="4-流程设计"><a href="#4-流程设计" class="headerlink" title="4. 流程设计"></a>4. 流程设计</h5><p>小程序的100多项服务的具体流程分别由多家合作商开发完成。为了保证「粤省事」整体的体验一致性，我们对流程页的设计提出基础目标：先改造，后标准化。 <strong>服务改造</strong> 在没有粤省事综合服务平台之前，各个业务都自成一体。独立不互通的业务导致的用户每次办理时，都需要反复填写身份信息。另一方面，由于业务可能涉及多个管理部门，互相都要验证一遍用户的信息，在一个业务中也会出现反复填写的情况。针对这种不合理的存在，我们在推动前后台能力打通。前端上做了用户信息的判断，后端推动多部门数据打通，减少用户同类信息重复填写的工作。 在能力打通的基础上，我们以减少用户每一次跑动作为更高目标，去推动事项流程的优化。以残疾人证件申办为例，我们推动优图的图像识别能力与业务部门合作，减去残疾人去照相馆拍摄证件照的流程，在线上可完成证件申请流程，是实在有效的为弱势群体服务。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-2.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> <strong>模块标准化</strong> 在业务对接和设计的过程中，有一个绕不开的难点是业务流程数量庞大，无法快速针对每一个流程做个性化设计。为了更高效接入这些业务，我们采用了模块化的设计方法。将业务整理分类、抽象出最基础的业务模型，得出办事模型。以下模型可以涵盖小程序现在接入的70%的办理业务。使用办事模型套用所有业务后，降低了用户使用过程中的突兀感，统一了以前无预知的办事过程，减少了用户对业务办理的认知负荷。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-21.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> 在这个基础上，我们再针对单个模块进行细化设计。以「过程」这个模块为例子，办事过程是整个流程里最关键而且最多样性的环节。在这个环节设计里，我们使用了类似乐高的模块形式，让不同的过程以拼积木的形式组装完成，从而实现符合规范的个性化接入。每块积木都是业务抽象组件化设计，使得整个办事流程更加统一、高效。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-22.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"></p>
<h4 id="五、政务服务类设计经验小结"><a href="#五、政务服务类设计经验小结" class="headerlink" title="五、政务服务类设计经验小结"></a>五、政务服务类设计经验小结</h4><p><strong>紧跟风口办好事</strong> 在跟政府的合作项目中，政府领导有想法有自己的意志，其实是一件好事。有了大领导的推动，项目的进展和执行速度都会加快。关键是做好预判和预留，风来了马上执行，也不出乱子。 <strong>创新思维重塑服务</strong> 设计师是服务改造的整合者。政务服务在过往的版本中大多是以技术导向来实现的，转换为用户导向需要设计师发挥更高的创造能力。离开业务角度和技术实现的角度，纯站在设计师考虑的角度，运用设计师的创新思维来改造服务流程。同时，设计也能反向影响，让政务服务变得更好，用设计思维把原本零散的点整合起来，是服务模式创新的一部分。 <strong>横向视野框架优先</strong> 政务服务通常都不是只有一件事或者只涉及到一个地市。面对体量较大的业务时，不着急进入业务流程的细节设计。平台级产品需要横向视野，可以同时评估多个业务中一致的部分。跳出单个业务流程的限制，需要把控整体的体验一致性。优先做好整体框架，建立起业务的全局观。有助于复杂多样的政务服务快速接入。 <strong>积极推动调节</strong> 尽管当前的政务类业务基本上都有了一套在线化的解决方案，但大多数仍然停留在技术实现阶段，体验断层等各种问题也参差不齐，在初期也会出现需求凌乱的状态。设计师可以发挥最大的能动性，根据片段性的资料、需求快速的输出具体的内容，主动推进项目进展，起到润滑、融合的作用。</p>
<h4 id="六、阶段成果"><a href="#六、阶段成果" class="headerlink" title="六、阶段成果"></a>六、阶段成果</h4><p>粤省事小程序于5月21日上线，上线首日 pv 突破1000万，最高日访问量达到1394万。目前，粤省事小程序总用户数有338万，日均访问数179万，累计查询办理量约2202.5万次。分享次数日峰值达到7.6万次，平均每8个市民就产生了1次分享。粤省事常驻于55%的市民微信最近使用小程序，也是小程序热门排行榜第75位，成为唯一入榜的政务类应用。小马哥也频频在各种行业大会上，正面评价粤省事。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-23.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"> 广大用户对各类服务的使用体验反馈总体良好。我们的一些设计创新，如：提前暴露查询信息、根据状态展示可用服务得到了用户的认同。办理事情比以前也更容易了，例如申领居住证，以前最少跑一次，现在可以直接在线上完成申请。小程序整体上资料填写减少55%，41个事项零跑动，致力向更「人性化」的方向发展。 我们也密切关注用户担忧的声音，部分用户对隐私设置等问题存在顾虑。所以小程序并不是一步到位的产品，在后续的迭代中还需要针对各种细节问题进行设计调整。一步步把小程序的体验在基础体验框架的基础上优化。 <img src="https://image.uisdc.com/wp-content/uploads/2018/10/uisdc-tg-20181001-24.jpg" alt="如何设计小程序？腾讯这个实战案例太赞了！"></p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>这份上万字的指南，帮你学会用栅格系统构建响应式设计</title>
    <url>/2020/05/18/%E8%BF%99%E4%BB%BD%E4%B8%8A%E4%B8%87%E5%AD%97%E7%9A%84%E6%8C%87%E5%8D%97%EF%BC%8C%E5%B8%AE%E4%BD%A0%E5%AD%A6%E4%BC%9A%E7%94%A8%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<p>今天，90％ 的媒体互动都是基于屏幕的，通过手机，平板，笔记本电脑，电视和智能手表来与外界产生联系。多屏设计已成为商业设计中不可或缺的一部分，响应式设计正迅速成为常态。作为 UI 设计师，我们希望为我们的产品在不同尺寸下都能为用户提供良好的用户体验，栅格系统可以帮助我们做到这一点。 即使是我们只针对一个尺寸进行设计，我们也经常面临设计布局方面的问题。合理运用栅格系统可以帮助我们控制布局结构并实现一致和有组织的设计。栅格系统就像无形的胶水一样凝聚一个设计，即使元素看上去是彼此分离，但通过网格将它们连接在一起，实现良好的层次结构，位置关系和一致性。 设计师和开发者之间的协作过程中，栅格系统在前端开发中是被应用的很广泛一套体系，许多优秀的设计都使用了栅格系统，使用栅格系统可以加速开发并保证视觉还原。栅格系统虽然是传统设计方法中的一部分，但它仍旧能帮助我们去设计这个多终端的世界。看到这里，你可能非常想知道栅格系统在页面中是如何运作的，那么今天我们一起来学习并且实践我们的格栅系统。</p>
<blockquote>
<p>「The grid system is an aid, not a guarantee. It permits a number of possible uses and each designer can look for a solution appropriate to his personal style. But one must learn how to use the grid; it is an art that requires practice.」 「栅格系统可以帮助我们设计，但却不能保证我们的设计。它有多种可能的用途，并且每个设计师都可以寻找适合其个人风格的解决方案。但是必须学习如何使用网格。这是一门需要实践的艺术。」 ——Josef Müller-Brockmann《平面设计中的网格系统》作者</p>
</blockquote>
<p><img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-3.gif"></p>
<h4 id="什么是栅格系统？"><a href="#什么是栅格系统？" class="headerlink" title="什么是栅格系统？"></a>什么是栅格系统？</h4><p>栅格系统可以让你依靠秩序与逻辑去完成设计。 早在 20 世纪初，德国、荷兰、瑞士等国的平面设计师们发现通过维持视觉秩序，从而使版面能更加清晰有效地传递信息，二战后这种理念在瑞士得到了良好的发展，直到 20 世纪 40 年代后期，第一次出现了使用网格进行辅助设计的印刷作品。由瑞士设计师大师 Josef Müller-Brockmann（约瑟夫·米勒-布罗克曼）所著的《平面设计中的网格系统》一书，自 1961 年出版以来畅销至今，对设计界有着深远的影响。史称 Swiss Typography Movement （瑞士新浪潮平面设计运动），后来成为全球风靡的 International Typographic Style （国际主义设计风格)）。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-4.jpg"> △ 约瑟夫·米勒一布罗克曼 (Josef Muller-brockmann, 1914-1996) 瑞士的一位平面设计师和教师。1958 年任《新平面设计》（New Graphic Design）主编 1966 年被任命为 IBM 的欧洲设计顾问。布罗克曼因他的极简主义设计与简洁的排版、图形和色彩而闻名，他的设计对 21 世纪的众多平面设计师都产生了重大影响。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-6.gif"> <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-5.gif"></p>
<h4 id="栅格系统的优势"><a href="#栅格系统的优势" class="headerlink" title="栅格系统的优势"></a>栅格系统的优势</h4><p><strong>1. 减少决策成本提高设计理解力</strong> 栅格系统在页面排版布局、尺寸设定方面给了设计者直观的参考，它让页面设计变得有规律，从而减少了设计决策成本；UI 设计也是需要理性的、客观的、具有数学逻辑美感的。熟练运用网格系统能够让你的设计更有秩序和节奏感，页面信息的展现更加清晰，提高阅读效率，从而提供给用户舒适的使用体验。加快认知速度。这意味着用户在使用产品完成特定的任务时，例如发送消息，预订酒店房间或乘车。用户能够连贯地理解并找到下一条信息或下一步要采取的步骤。 <strong>2. 响应化</strong> 因为人们使用不同类型的设备与产品进行互动，从智能手表的小屏幕到超宽屏电视，交互是流畅的，并且没有固定的尺寸。使用产品时，人们通常会在多个设备之间切换，以完成该产品的单个任务。所以响应式设计不应该是一种奢侈品，而是一种必需品。这意味着设计师不能再为单个设备的屏幕构建。多设备环境迫使设计人员根据动态网格系统进行思考，而不是固定宽度。使用网格可以跨不同屏幕尺寸的多个设备创建连贯的体验。 <strong>3. 加速团队协作设计</strong> 当多位设计师共同设计产品时，一个统一标准就变得尤为重要。如果没有一个统一的框架去约束的话，我们的产品的页面和组件的标准可能各式各样，这样的话整个产品的页面都会比较混乱。因此，网格系统有助于将界面设计工作分开，因为多位设计师可以在统一的布局下进行不同部分工作，并且无缝集成并保持连贯。 <strong>4. 加速开发并保证视觉还原</strong> 大多数设计项目的实施，涉及到设计者和开发者之间的协作。栅格化提高了页面布局的一致性和复用性；避免了设计师与开发者在细节上的反复沟通确认，从而提升了整个设计开发流程的效率、并能帮助开发者实现较为理想的设计还原。</p>
<h4 id="栅格系统的基本构成"><a href="#栅格系统的基本构成" class="headerlink" title="栅格系统的基本构成"></a>栅格系统的基本构成</h4><p><strong>1. 列和槽（Columns and Gutters）</strong> 列（Columns） 和槽（Gutters）。列（Column）是内容的容器，水槽（Gutter）用来调节相邻两个列的间距，把控页面留白；列和列间距加上页面边距（Margin）加起来屏幕的水平宽度。列和列间距的内容区域（Content width）由 N个列和（N-1）个水槽组成。通常情况下，web 端采用 12 列，平板采用 8 列，手机采用 4 列。当然，你可以根据项目特点来设计你的网格系统，列和水槽的宽度我们可以利用 8 点网格系统来定义，下面会讲到。列的数量越多，页面就会被分割得越「碎」，在页面设计时就会越难把控，适用于业务信息量大、信息分组较多、单个盒子内信息体积较小的页面设计，列间距宽度数值对页面的影响，与外边距大体类似，即间距越大页面越轻松简单，反之亦然。用户已经习惯通过鼠标滚轮或滚动条（scrollbar）来纵向浏览页面内容，因此竖直方向可以无限延伸，所以栅格系统在竖直方向的栅格可以不体现出来，我们在执行设计时只要在水平方向保持规律的变化就可以了。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-7.gif"> <strong>2. 页面边距（Side Margins）</strong> 页面边距就是内容区域（Content field）以外的空间，比较推荐的设计就是页面边距可以随着屏幕尺寸的增大而增大。页面边距在移动设备上通常是 12Px到 40Px 之间，在平板设备和桌面设备页面边距变化就相当多了。在响应式设计中，你选择了一个页面边距之后，缩小页面宽度时页面还是会有你设置的最小页面边距，直到到达下一个响应点（breakpoint）。当你增大页面宽度时，页面就有更多的页面边距，直到页面宽度到达下一个响应点（breakpoint）。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-8.gif"> <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-9.jpg"> <strong>3. 模块（Field Elements）</strong> 模块就是你的设计区块，可以是一段文字，一张图片，或是其他更加丰富的元素。背景元素并不能算作是设计模块，所以并不需要遵循栅格系统。模块的定义是很灵活的，它可以是个小的单位或是元素，也可以是一个元素丰富的区块。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-10.jpg"> 以 12 栅格系统为例，一个 12 栅格系统可以根据业务需要被 2 等分、3 等分、4 等分、6 等分、12 等分，还可以被 1:1:1、1：2：1、1：3：2、2：3：3、1:2、1:3、1:5、3:5 等不对称分割，具体采用哪种比例的组合需要我们根据自己业务需求来定。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-11.gif"> <strong>4. 8 点网格（8pt spatial system）</strong> 栅格系统大的层面可以帮助设计者更好的进行版式设计与内容布局，而小的方面可以辅助设计师规范页面内各种元素的对齐与间距的设定。从用户体验角度来讲，这两者同等重要，从执行层面来讲，我们一般先做版式设计与布局，然后再填充内容、调整细节。 由于列跟水槽的宽度是以网格作为基本单位来增加或者减小，所以栅格化的重要一步就是需要先定义好栅格的原子单位「网格」的大小。目前最普适易用的就是 8 点网格。我们也可以利用 8 点网格法来制定产品中的间距，建立 8 点为一个单位的网格，使用 8 的倍数来定义模块的间距与元素的尺寸。8 点网格有如下几点优势：</p>
<ul>
<li>  目前主流桌面设备的屏幕分辨率在竖直与水平方向基本都可以被 8 整除，使用 8 作为最小原子足够普适。可以确保不同布局之间的视觉一致性，同时可以灵活的适配多种尺寸的设计。以 8 为单位符合「偶数原则」。偶数原则可以在页面缩放中最大程度的避免类似于 0.5、0.75、1.25 等次像素的出现，从而使页面各类元素在大多数场景下都能有比较精致的细节表现。</li>
<li>  在网格系统中应该更加注重的是间距，而间距要遵循网格系统（例如使用 4、8、16、24、32 等和 8 具有规律的数字）同时在产品中的各类元素也要遵循这类原则（例如图标大小、组件大小等）。所以布局的水平和垂直节奏和各个组件的节奏会相互重叠，整体的设计将更加完整。</li>
<li>  开发工程师使用的前端开源组件库比如 Metronic、Antdesign 等也是基于 8 的原子单位来设计，因此如果设计师也使用以 8 为基本单位的栅格系统，开发与设计师相互对接就会更加方便，开发实现页面时也能更高品质地去还原我们的设计。</li>
</ul>
<p><img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-12.jpg"> <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-13.jpeg"> 如果设计上没有立即可识别的间距系统时，这种设计可能会让用户感觉廉价、不一致，而且通常不值得信任。如果设计上遵循一个 8pt 网格系统时，节奏变得可预测和视觉上的愉悦。对于用户来说，这种体验是经过修饰和可预测的，这增加了用户对品牌的信任和喜爱。 无论有多少个设计师在协同合作，现在都有一个一致的间距规范，决策成本将大大降低。设计师可以轻松地从另一个设计师停止的地方开始设计，或者轻松地并行构建。我们定义下规范可以及时和开发同学沟通，因此可以为工程师节省时间。 <strong>5. 基线网格（Baseline Grid）</strong> 基线网格由密集的水平行组成，这些行提供文本的对齐和间距准则，类似于您在直纹纸上书写的方式。在下面的示例中，每 8px 行在红色和白色之间交替。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-14.jpg"> △ 基线网格 提示：将所有行高设置为基本单位（8x 或 4px）的增量非常重要，这样您的文本才能与基线网格完美对齐。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-15.jpg"> △ 字体行高</p>
<h4 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h4><p><strong>1. 什么是响应式？</strong> 设计师需要通过设计让内容在不同的平台上体验最大化，确保让用户在任何一个屏幕上看到内容的时候，会觉得这些内容就是为这个平台而设计的，而不是单纯的缩放而来。这种无缝的体验，才是跨屏幕设计的真正难点所在。想要制定一套针对不同设备和屏幕的设计方案，你需要一整套的策略。用户体验同时包含了性能、交互、效率等多方面内容，也就是说，对于一个线上的响应式页面，我们不仅要关注视觉上看到的，也要关注我们操作、使用时的感受，这些综合因素最终影响着用户使用时的效率与体验。</p>
<h2 id="可能是最容易看懂的响应式知识科普"><a href="#可能是最容易看懂的响应式知识科普" class="headerlink" title="可能是最容易看懂的响应式知识科普"></a>可能是最容易看懂的响应式知识科普</h2><p>本篇文章希望能通过简单明了的文字及图文介绍，对我们设计响应式网站时经常会出现的问题进行清晰的说明。 阅读文章 <em>&gt;&gt;</em></p>
<p><strong>2. 响应式设计的核心步骤</strong> <strong>确保核心的用户体验</strong> 虽然用户体验是无处不在的，但是对于特定产品，最核心的体验是存在的。产品通常是用来解决用户所面临的特定问题的，它的这一特质让产品变得有意义。关键的内容和关键的功能的组合，通常构成了产品的核心用户体验。如果你并没有想明白这个问题，不妨问问自己：用户需要完成哪些最常见/最重要的任务？找到问题的答案之后，你的产品就应当从各个方面、各个渠道，完整而全面地支撑这些功能，帮助用户完成这些任务。举个例子，Uber 的核心用户体验是随时随地叫车，无论设备的屏幕大小如何，你进行的设计全部都应该围绕着这个需求和功能来进行。叫车是 Uber 的核心功能，即使使用 Apple Watch 这种极小的屏幕尺寸都应该顺利地完成这个任务。 <strong>敲定你的产品所覆盖的设备类型</strong> 现在的移动端设备屏幕尺寸各不相同，单独为某一个设备设计内容无疑是不现实的。根据你的产品覆盖人群、受众分类、使用场景，综合考虑你的内容会优先呈现在哪些设备和平台上，然后有意识地筛选出常见的设备类型：手机，平板，桌面端，智能电视，智能手表…… 不同的设备组合通常是基于不同的场景、需求和服务来构成的，用户会针对不同的屏幕进行不同模式的交互，甚至处理的内容也会有差异。比如说，在手机上，用户更加倾向于使用轻量级的任务，并且进行一定量的沟通和交流。在平板上，用户行为更多集中在内容消费上，并且目前平板的使用量被认为在逐步降低。桌面端依然是用户完成较为专业、复杂任务的首选平台，足以应付复杂多样的内容。了解各种设备类型和使用场景是用来构建用户体验的关键。 <strong>针对不同内容来匹配用户体验</strong> 并非所有的内容都符合不同设备的使用场景，比如智能手表就不适合展示大量的文本内容。你的产品所覆盖的设备组当中，每种设备的使用场景不同，应该匹配的用户体验也不一样。移动端用户和桌面端用户的需求就是不同的，场景差异也很大。以 Evernote 为例，它可以在多种不同类型的设备之间同步和切换，其桌面端版本就针对用户的内容需求进行了优化：Evernote 的桌面端应用程序针对阅读性的内容和多媒体进行了优化，而移动端的 Evernote 则强化了拍摄记录、图片和音频记录的功能：其次，不同的设备屏幕具备不同的输入方式，设计师如果忽略输入方式上的独特性，也常常会出现许多问题，这里就不扩展开来了。 <strong>优先为最小的屏幕做设计</strong> 一直以来，设计师都习惯从最大的屏幕着手设计，最后考虑最小的屏幕上的显示效果，这意味着绝大多数的设计都是从桌面端开始设计的，通常桌面端的内容和功能更全面。当桌面端的整体设计完成之后，再推进到其他设备端的设计。然而，在进行桌面端设计的时候，我们常常会遭遇「厨房水槽」困境：由于产品通常会牵涉到多个利益相关方，许多多余的功能会被加入进来。而实践经验表明，移动端优先的设计往往能够更好的专注于核心功能，更适合作为产品设计的起点。当你优先设计最小屏幕所需要的界面的时候，这种局面会强制你从最关键最重要的地方开始设计。这也是之前设计圈和产品开发领域一直所强调的「移动端优先」的策略的由来。在此之后，再进行平板、桌面和电视端的设计，就是一个自然地做加法的过程了。在绝大多数的案例当中，最小屏幕通常是手机屏幕。</p>
<h2 id="跨屏幕的响应式设计，你需要这样来设计用户体验"><a href="#跨屏幕的响应式设计，你需要这样来设计用户体验" class="headerlink" title="跨屏幕的响应式设计，你需要这样来设计用户体验"></a>跨屏幕的响应式设计，你需要这样来设计用户体验</h2><p>现在的响应式的设计已经很成熟了，一整套设计方案，小到智能手表的屏幕，大到电视显示屏，还兼顾到更普遍存在的智能手机、平板和电脑屏幕。在很多人看来，跨屏幕的响应式设计，只是… 阅读文章 <em>&gt;&gt;</em></p>
<p><strong>测试你的设计</strong> 产品的测试环境并不一定都得是在现实世界中寻找，但是在尽可能让真实的用户来做可用性测试，并且在产品发布之前解决所有的用户体验上的问题。 <strong>3. 为何要利用栅格系统来进行响应式设计?</strong> 响应式可以响应的前提有两点：1、页面布局具有规律性、2、元素宽高可用百分比代替固定数值，而这两点正是栅格系统本身就具有的典型特点，所以利用栅格系统进行响应式的设计是顺理成章的，也比较高效快捷，所以响应式与栅格化天生一对好搭档。</p>
<h4 id="如何建立栅格系统"><a href="#如何建立栅格系统" class="headerlink" title="如何建立栅格系统"></a>如何建立栅格系统</h4><p><strong>第1步：确定列的数量</strong> 第一阶段先不要限制自己的列数。首先，创建一个低保真或高保真的原型。设计一些基本元素和用户流程。在此之后，就开始设计最优的列数和大小。如果在项目开始设计之后不得不改变我们的栅格系统，不要有负担，我们需要有一些试错的空间。 我们在设计页面时，用到最多的布局方式就是等分布局，即页面内容区域被 N 等分，每一份的宽度则根据屏幕宽度自适应调整。那么就从这个角度出发，思考一下页面的网格应该设置为多少列，才能最大程度的满足各种等分布局的需要。与 web 类似，移动端最方便的网格之一是 12 列网格。这个网格将允许我们在一行中同时放置偶数和奇数个元素。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-16.jpg"> 对于移动端来说，12 列网格的缺点是一个列的宽度太小，你可能很少创建一个列宽度的元素。如果你选择 2、4 或 8 列网格，请记住在一行中放置奇数个元素可能会出现的问题。 <strong>Pro-Tip：</strong> 界面设计通常包含数百个不同的页面，因此，一个网格可能不适合所有的页面。如果需要，创建额外的栅格系统，但不要忘记设计的一致性。网格系统的一致性：相同的布局边距、列之间相等或成比例的水槽，以及更改列本身的宽度时其他模块也需要保持相同的比例。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-17.jpg"> <strong>第2步：定义水槽和边距</strong> 首先，让我们先翻阅目标屏幕的设计 Guideline，以找出通常页面边距（Side Margins）。目前，Android 和 iOs 的最小推荐布局边距为 16pt。web 端则依照屏幕尺寸不同而不同。这意味着，如果你希望遵循系统指南，则页面边距不应小于 16pt。（但可以更大的） 在选择 12 列网格时，列之间的水槽不应该太大，因为由于列的宽度小和它们之间的大宽度的水槽，列将在视觉上产生分裂的感觉。同时我建议你选择与8pt 间距系统成比例的水槽大小。所以布局的水平和垂直节奏会相互重叠。水槽与页面边距成比例。那么网格更加一致，也将允许我们轻松地在其中放置特殊元素，如轮播（carousel）。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-18.gif"> <strong>第3步：定义 8pt间距系统</strong> 了帮助不同设计能力的设计者们在界面布局上的一致性和韵律感，统一设计到开发的布局语言，减少还原损耗。在大量的实践中，我们提取了一组可以用于 UI 布局空间决策的数组，他们都保持了 8 倍数的原则、具备动态的韵律感。经过验证，可以在一定程度上帮助我们更快更好地实现布局空间上的设计决策。定义网格系统方法很多，如运用 8 点网格系统、斐波那契数列、某最小原子单位的增量、从底层系统参数化定义间距等，我们以最小原子单位的增量为例去定义网格系统。最小单元格的数值选择需要从两方面考虑：</p>
<ul>
<li>  一方面是该数值是否能被大多数手机屏幕的宽度整除，即广泛的适用性；</li>
<li>  另一方面是在具体使用时是否具有一定的灵活性。</li>
</ul>
<p>在适用性方面，4、6、8、10 这四个数值都是基本可以满足的，在灵活性方面，4px 表现最佳，但是页面就会被分割的非常细碎，在设计时比较难于把控。因此我们需要根据 APP 的实际情况选择合适的数值，4px 或 6px 单元格比较适合页面内容信息较多，布局排版比较复杂的产品。而 8px 单元格对一般的设计场景都可以很好的满足，比较适合大多数的 项目，因此是比较推荐使用的。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-19.jpg"> 那么假设我们以 8 为基准的去延展系统间距，得到如下间距系统：</p>
<blockquote>
<p>1、2、8、16、24、32、40、48、56、64、72、80、88、96、192 等，这里都是 8 的倍数或能被 8 整除</p>
</blockquote>
<p>但是目前间距数量太多，过于细碎也会导致间距比较乱，所以我们继续优化梳理（以 6 为基准，前面个数是后面个数的 2 倍递增），得到以下间距系统：</p>
<blockquote>
<p>1、2、8、16、24、32、48、64、80、96</p>
</blockquote>
<p><img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-20.gif"> <strong>第4步：sketch布局设置</strong> 利用 sketch 的布局设置功能，即可快速搭建出网格系统的参考布局，在平时做设计的过程中，可以经常使用 Ctrl+L 快捷键切换布局的显示，提高设计效率。 我们来解释一下这些设置分别是什么：</p>
<ul>
<li>  Total Width：就是内容区域（Container）的值；</li>
<li>  Offset：表示栅格的偏移量，我们只要设定完成以后按 Center 按钮即可，会自动居中；</li>
<li>  Number of Columns：就是栅格数；</li>
<li>  Gutter on outside：是非常重要的设置，勾选以后才能跟前端的栅格算法匹配；</li>
<li>  Gutter Width：就是栅格之间的间距；</li>
<li>  Columns Width：就是栅格的宽度。</li>
</ul>
<h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-21.jpg"></h4><h4 id="如何做到响应式"><a href="#如何做到响应式" class="headerlink" title="如何做到响应式?"></a>如何做到响应式?</h4><p>在传统的栅格化系统设计中，列的宽度和水槽的宽度是保持不变的，只是列的「数量」发生变化。为什么要这么处理呢？这是为了让设计更简单。如果一组三张卡片分别放在桌面的四列上，那么在平板电脑上，会显示两张卡片，并把第三张卡片进行折行显示在第二行上。不需要做任何的调整，因为已经知道它位于第四列上了。在手机上，答案也很简单，只需要一张卡片，其他的就会自动堆到下面的行中。但是目前我有更多的响应策略，例如当视窗（Viewport）发生变化时，内容区域的元素如何去响应，具体到我们当前的栅格系统，就是 Columns、Gutters、Margins 以及由 Columns 跟 Gutter 组成的盒子（BOX）四者的值（主要是宽度）如何变化，以及在这种变化之下我们页面的布局如何调整。 <strong>1. 固定栅格或是断点系统（Fixed boxes or breakpoint system）</strong> 固定网格，列宽和水槽宽不会改变，只是改变列的数目，当窗口缩放时，排版布局不会发生任何改变，只有当达到一个临界值（开发那边设置好的固定的值），界面才会发生改变。在此之前界面排版都是不变的，就像一部分被切掉了。 如果开发那边写了一个固定栅格，当你从桌面缩小到平板电脑，就像是在桌面的浏览器宽度时，你不会看到任何变化，设计就像是被剪掉了一样。但当达到平板屏幕尺寸临界点时，设计布局马上就会改变，平板电脑上的显示效果就会好起来。如果继续减小这个值，同样的事情也会发生，在到达另一个临界值之前，设计看起来都是不变的。下面是常见的断点系统（Breakpoint System） <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-22.jpg"> 如图，响应式是以视窗的最小宽度作为基本依据来制定每种宽度下 Columns、Gutters、与 Margins 的响应策略，也就是说 Viewport Min-width 是做出响应的触发条件，视窗每达到一个最小宽度，就会触发该宽度下预设的页面布局方式，而每种布局都是在该宽度下的最佳布局，也是因此，响应式才会在各种复杂分辨率条件下都能给用户比较好的体验。 每个视窗宽度的最小值是触发响应的关键值，因此我们给这些用于触发的关键值起了个名字叫「Breakpoint」，每个 Breakpoint 触发一种响应策略。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-23.gif"> <strong>2. 流动栅格（Fluid Grid）</strong> 流动栅格系统是编辑内容，仪表板，图像，视频，数据可视化等理想的响应策略。当窗口缩小时，内容将动态地发生变化，文本会进行换行，元素也会变窄。然而，这些元素在内容宽度缩小到下一个临界值之前，布局是不会变化的。在各种情况下，对用户来说，扩展内容的大小比扩展可见内容的数量更有用。 所以我想说的是，断点 BreakPoint 只是一个更改布局的参考点。这就是为什么列宽和水槽的数量不会改变的原因，因为我们想让设计师在考虑布局时能够更容易地创建一致性。内容宽度会随着窗口的缩放而发生改变，例如图片会缩小，文本会换行。水槽的宽度不一定是固定的，可以随着页面宽度变化。 在每个断点处，列计数是固定的，列宽度是最小网格 8PT 的倍数。行高是列大小的倍数，遵循推荐的纵横比。边距和填充是小单位的固定倍数。在断点之间，实际列宽是网格区域的百分比，而不是一个小的单位倍数。内容尺度流畅。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-24.gif"> 首先从所以屏幕大小中选择一个基本尺寸，然后按照推荐的纵横比以基本大小的倍数构建每个响应式尺寸。当每个块使用相同基础大小的倍数时，就会出现网格。遵循此方法可确保栅格系统一致性，甚至跨产品的一致性。 <strong>3. 混合栅格（Hybrid Boxes）</strong> 在实际项目中，使用流动网格和固定网格的组合也是常见的做法。网站通常是流动网格，因为它要去适应各种不同终端的大小。后台系统设计、工具型的界面设计就比较经常使用网格和流动网格组合的形式。例如的后台管理系统（dashboard）侧边栏是固定网格，右侧内容是流动网格。混合栅格在每个维度上有不同的缩放规则，所以它们不使用统一的缩放比。当用户需要调整浏览器的大小以使内容在一个维度上伸缩而在另一个维度上不伸缩时，便使用混合网格。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-25.gif"></p>
<h4 id="面板对栅格系统的影响"><a href="#面板对栅格系统的影响" class="headerlink" title="面板对栅格系统的影响"></a>面板对栅格系统的影响</h4><p><strong>1. 灵活面板（Flexible panels）</strong> 灵活的面板允许折叠和扩展状态。面板的展开状态为固定宽度，用户无法调节。当用户将鼠标悬停在折叠的面板上时，面板就会展开。当灵活的面板扩展时，它们要么压缩内容和网格，要么将内容推到浏览器边缘之外。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-26.gif"> <strong>2. 固定面板（Fixed panels）</strong> 固定面板保持静态宽度，不能折叠，也存在于响应网格之外。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-27.gif"> <strong>3. 悬浮面板（Floating panels）</strong> 此面板样式漂浮在主要内容区域之上，不影响响应网格。浮动面板将任何 UI 元素隐藏在其下方，用户必须将其移除。内联菜单、下拉菜单和工具提示也是浮动的。 <img src="https://image.uisdc.com/wp-content/uploads/2020/03/uisdc-sg-20200331-28.gif"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>写这篇文章的目的是想提供一些关于如何在响应式设计中使用栅格系统，我知道对于我自己来说，我花了很多时间理解网格是如何工作的。我在 YouYube 上看了很多视频，也阅读了大量的文章，但每个人都在关注它为什么重要，却不去注重到底怎么在自己的项目中使用这些原则。 你要做的最好的事情就是从现在开始注意那些优秀设计是如何对齐元素的，你将会开始阅读这些设计系统。为了帮助理解，这里有一些设计系统概述了它们的网格使用：</p>
<ul>
<li>  Google’s Material Design System <a href="https://material.io/design/layout/responsive-layout-grid.html#columns-gutters-margins">https://material.io/design/layout/responsive-layout-grid.html#columns-gutters-margins</a></li>
<li>  Intuit’s Design System <a href="https://designsystem.quickbooks.com/foundations/responsive-column-grid/">https://designsystem.quickbooks.com/foundations/responsive-column-grid/</a></li>
<li>  IBM’s Carbon Design System <a href="https://www.carbondesignsystem.com/guidelines/layout#2x-grid-fundamentals">https://www.carbondesignsystem.com/guidelines/layout#2x-grid-fundamentals</a></li>
</ul>
<p>在完全理解了网格的工作原理之后，你将成为了一名更好的设计师，因为你知道了你的设计将如何在临界值之间进行转换。你也可以落地你的设计，使它们能够达到像素级完美。这样的规范带来了更一致，更简洁的设计，当用户从一个界面到另一个界面流转时，这真的提升了产品的档次。我建议在你的设计中去应用这些网格，并和开发同学一起，以实践的方式将它们落地，这将会是一个非常不错的进步。</p>
]]></content>
      <categories>
        <category>美工</category>
      </categories>
  </entry>
  <entry>
    <title>腾讯万字干货！2020-2021 设计趋势报告：用户体验篇</title>
    <url>/2020/07/06/%E8%85%BE%E8%AE%AF%E4%B8%87%E5%AD%97%E5%B9%B2%E8%B4%A7%EF%BC%812020-2021-%E8%AE%BE%E8%AE%A1%E8%B6%8B%E5%8A%BF%E6%8A%A5%E5%91%8A%EF%BC%9A%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E7%AF%87/</url>
    <content><![CDATA[<p>如题</p>
<a id="more"></a>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>任何一个新事物的悄悄冒头，都有可能在未知的将来影响着用户体验设计师。我们能做的是，在起初感受到微微震幅时，便沿着震感逐步寻找源头，并思考未来的发展走向。赶在变化降临前先拥抱变化。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-33.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 本文通过研究近一两年科技、社会文化以及自身用户体验领域的变化，从用户体验领域关键的用户、媒介(设备与应用）、交互行为、信息与场景的五个角度出发，探索用户体验设计未来的趋势，希望能带来启发。 随着人工时代到来，过去机械的单向交互方式逐渐被打破，机器渐渐演化成了会主动「观察」真实场景，「感受」用户情感，预判用户意图并自动完成任务的贴心小棉袄。机器如何为人们提供更智能便捷的服务，未来还有非常大的想象空间。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-39.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"></p>
<h4 id="更智能的服务提供方式"><a href="#更智能的服务提供方式" class="headerlink" title="更智能的服务提供方式"></a>更智能的服务提供方式</h4><p>随着人工时代到来，过去机械的单向交互方式逐渐被打破，机器渐渐演化成了会主动「观察」真实场景，「感受」用户情感，预判用户意图并自动完成任务的贴心小棉袄。机器如何为人们提供更智能便捷的服务，未来还有非常大的想象空间。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-43.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>1. 基于真实场景推理用户意图</strong> 随着AI技术的发展，智能设备可以越来越无缝地将数字世界和物理世界嫁接起来，主动感知用户所处情境并智能提供相应服务。 在2019的 Google I/O 大会上，Google Lens 展示的AR点菜功能可以智能识别用户扫描的菜单并将美食网站上的相关推荐直接呈现在屏幕上。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-18.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 当用 Google Lens 识别到小票信息时，可快速提取小票上的金额，且可自动弹起计算器快速帮助用户计算人均消费，节省人工计算的时间成本。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-12.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 随着信息入口从数字空间延伸到周围的物理空间中，未来万物皆可为用户体验的媒介，设计师未来在设计的时候需要注意： 寻找适合的打通真实世界的切入点：在陌生语言、信息复杂或者难以处理等苛刻的环境下，充分发挥智能设备对信息智能读取、批量识别与翻译等强大能力，帮助用户高效完成任务； 将用户旅程的上下游串联：根据生活常识和经验预判用户行为目的，前置推荐服务； 更加系统细心地考量干扰因素：真实场景是动态变化的，需要更全方位考虑光线的强弱、多源的噪音、实体的可视性、人员和事件的打断等因素。 <strong>2. 任务自动化，简化用户旅程</strong> 为了完成一项任务，用户往往需要借助多个应用来回切换配合，使用起来琐碎麻烦。如今应用越做越强大也越复杂，过去仅仅解决单一场景的解决方案不再适应于用户对于高效完成任务的诉求。 Google Assistant 的新能力 Duplex on the web 可以通过自动跨应用任务处理来简化用户旅程。只需要用户发出语音指令「预定一辆去某地的车」，助手便可自动跨邮件、日历、付款等应用调取信息、自动根据使用习惯做选择，并自动填写信息，而用户全程需要的只是在关键节点轻敲「确认」即可。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-2.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 2019年随着 iOS 13 的更新，「快捷指令」推出了「自动化」能力，用户通过「if…then…」语法便可为自己的App设计一套程序，实现如：「当我回到公司时提醒我打卡」、「每天早上10点给我的女朋友发送一条表白短信」等能力，将不相关的场景动作串联字一起自动化执行，大大节省人工操作成本。 提升使用效率是用户体验设计孜孜不倦努力的方向之一。在利用新技术进一步简化用户旅程时，设计师可以充分利用以下因素： 借助语音输入：比起界面触控操作，语音交互的直达性可以「穿透」复杂界面，让设备第一时间明确用户目标； 基于用户行为形成习惯记忆：对用户长期重复的行为做分析处理，构建用户习惯模型并主动提供服务； 适当考虑专家级用户：随着部分用户的智能设备使用水平越来越高，可以考虑为专家用户提供自定义操作脚本，满足其自身的独特需求。 <strong>3. 基于情感感知，主动理解用户需求</strong> 随着人脸识别、表情识别、肢体跟踪等技术的提升，机器逐渐学会感性语言，主动感知用户内在情感和心理需求。 2019年1月的CES展上起亚亮相的互动式「情感驾驶空间」技术，可通过传感器读取用户的面部表情、心率等反应，调整驾驶空间内的灯光、影片类型、音乐风格等，舒缓舱内乘客心情，由此提供更人性化的出行体验。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-34.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 用户总是会期待更贴心的服务，设计师未来对同理心的情感嗅觉更加敏锐： 利用感性线索定位用户情绪：需要通过面部表情、特殊时间节点或者识别到的关键词，对用户情绪进行理解和定位，判断用户情感理解用户内心诉求是自由探索、趣味娱乐、或者静谧修行并提供符合用户当下心境的服务。 综合使用感性元素进行设计：通过使用线条、色彩、声音和动作等传达并唤起相对应的情感，提供更加人性化的体验。 <strong>4. 小结</strong> 更智能的服务提供方式会让人们生活拥有更多可能性，但一旦火候把握不得当，可能就会造成对人们生活的野蛮入侵。关于如何让科技更好造福于人们，早在上个世纪，施乐帕克研究中心提出了宁静技术（Calm Technology）的愿景，认为影响最深远的技术应该是隐匿不见的，它们如纤维般融入日常生活，丝丝入扣，直至不可分辨。 随着科技的发展，设计师对新技术不应是不加克制地应用，而应该润物细无声般地提供服务，帮助人们从繁杂喧嚣的数字世界中解脱出来，将宝贵的注意力资源投放在让生活更美好的事物上。</p>
<h4 id="更自然丰富的交互方式"><a href="#更自然丰富的交互方式" class="headerlink" title="更自然丰富的交互方式"></a>更自然丰富的交互方式</h4><p>回顾人类和机器的交流语言，从命令行界面、图形用户界面到自然用户界面，人机交互方式越来越贴合人与人之间更自然的交流方式，其背后是心智模型与实现模型的高度拟合的趋势。 在自然用户界面中，为满足新形态智能硬件对新接口的需求，以及人们对更丰富强大的交互方式的自然诉求，越来越多的自然用户界面被开发出来。语音交互和隔空手势交互便是近几年迅速发展并落地的两种交互方式。 <strong>1. 隔空手势交互：更自由、更灵动</strong> 为了让机器更好地读懂用户的身体语言，能够感知深度信息的摄像头走进了日常手机。2019年国内外手机厂商的发布大会上，LG 手机 G8 ThinQ 以及华为发布 Mate 30 系列推出的隔空手势，可实现一些简单的诸如滑动、切歌、截屏等效果。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-14.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-7.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 除此以外，隔空手势支持更加细微的手势，如旋转、揉搓等，可以更直观、更灵活的方式操控界面，让用户获得一种像魔术师用意念控制事物运作的快感。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-11.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 对于隔空手势操作网上的言论褒贬不一，其中争议性最大的就是隔空手势宛如「杀鸡用牛刀」，明明可以用更加精准的手势触控，为什么还要用看似很酷炫其实精准度更低的隔空手势操作？ 隔空手势并不是要替代触控手势成为主流的人机交互方式，更多是对情境式障碍场景的补充。在某些场景下，用户使用设备的条件可能是充满干扰的。想想看当你边看手机食谱边炒菜的时候、边煲剧边剥小龙虾的时候、疫情期间出门佩戴橡胶手套无法正常触控手机屏幕时…..隔空手势是不是特别好用？ 每个人在特殊的场景下都有可能面临感官障碍，未来的设计也应该更多地考虑情境式障碍的场景，让用户无论身处何时何地依旧能一如既往无障碍地使用设备。 <strong>2. 语音交互：更精准、更好玩</strong> 语音交互作为更趋近于人与人之间最自然的交流方式，近些年有许多发展的突破点。 在发展主线上，语音交互趋向更自然、更人性化、更个性化。过去反人类的一些沟通方式慢慢被「调教」。此外，多人会话场景下的技术方案日渐增多。 2019的 Google I/O 大会展示了一个视频片段，视频中的两位嘉宾相继吐槽，经常出现针锋相对难以听清的时候，这时用户可以调节音源音量选择性增强自己关注的人物声音，让另一个人「静音」。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-9.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> △ 滑动选择音源 此外，语音交互除了在智能音箱领域广泛应用以外，也逐渐应用在广告等更多的传播媒介中，刷新人们日常使用体验。2020年2月索尼提交了一项广告播放新专利。当用户在观看电视节目时，如果出现广告，只要站起来大喊广告中对应品牌的名字，便可直接跳过这个广告。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-38.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 设计师在语音交互场景下，需要留意以下几个比较容易被忽视的因素： 用户语音交互习惯培养：如今还处于培养用户语音交互使用习惯阶段，设计师需要更多地考虑应用的语音交互规则如何才能更趋近于人们日常的沟通习惯，并进一步为人们的社会习俗所接纳。 真实场景下的多人音源：在现实情境中， 在多人对话场景下将面临音源不清、穿插停顿、噪音过多等影响体验的情况，由于计算机听觉分析能力开始从单人音源拓宽到了多人音源，多人对话解决方案上还有很大想象空间。 改变传统的视听体验：在使用场景上，语音交互接口也将逐渐运用到更多的媒介上，更全面地刷新用户体验。 <strong>3. 小结</strong> 人类拥有双手、眼睛、耳朵和发声的嘴巴，但是并不总是在每个使用场景下都能自如地使用：在安静的自习室下声音收到限制，在驾驶场景下注意力受到限制，在双手拎着东西场景下双手受到限制……但目前许多产品设计都建立在用户能完整使用感官功能这一理想化的基础上。 未来的发展趋势倾向于将视、听、触、嗅等多通道信息完美整合起来，综合使用多种输入通道和输出通道，根据用户使用场景用最恰当的方式传递服务，满足用户多方位的需求。</p>
<h4 id="硬件形态带来新的挑战"><a href="#硬件形态带来新的挑战" class="headerlink" title="硬件形态带来新的挑战"></a>硬件形态带来新的挑战</h4><p>尽管乔布斯曾断言3.5英寸是手机的黄金尺寸，但作为人们日常内容消费与娱乐的窗口，手机屏幕毫无疑问地变得越来越大，甚至超出传统物理限制。人们对大屏享受的追求与设备携带便捷性之间的矛盾由来已久，硬件形态的变化对旧有的用户体验设计思路带来的新的挑战。</p>
<h5 id="1-大屏幕：单手持握新挑战"><a href="#1-大屏幕：单手持握新挑战" class="headerlink" title="1. 大屏幕：单手持握新挑战"></a>1. 大屏幕：单手持握新挑战</h5><p>屏幕横纵比越来越大，而人类的手部具有先天限制，曾经惯用的界面布局方式在高横纵比的屏幕上可能无法被大拇指无障碍全覆盖，使得越来越多的设计更加重视利用移动屏幕下半部分。 操作与信息进一步下移： 高德地图、苹果地图的搜索框下移，方便单手操作用户快速激活输入框； 影视资讯平台IMDB强化底部标签栏功能，双击「搜索」tab即可激活输入框，无须艰难地触摸顶部。 即时战斗类手游皇室战争的说明卡片主要展示在下半部分，方便用户进行卡片上的相关操作。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-49.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 底部导航被赋予更多能力： Pocket的底部标签栏现在兼任汉堡菜单功能，在激活状态下再次点击主页icon可选择主页上须展示的内容。 利用下滑手势代替点击： Snapchat的许多表示前后进退关系的页面都不是」返回「按钮，而是向下箭头，用户可下滑退出当前页面。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-16.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"></p>
<h5 id="2-折叠屏：新形态的交互方式"><a href="#2-折叠屏：新形态的交互方式" class="headerlink" title="2. 折叠屏：新形态的交互方式"></a>2. 折叠屏：新形态的交互方式</h5><p>为了解决设备形态和人类手部先天限制之间的矛盾，折叠屏诞生浏览并颠覆旧有的界面设计方式。 <strong>更灵活的信息布局</strong> 过去在单屏设计下，考虑到用户注意力由上到下纵向衰减，因此信息布局更多是按照优先级从上往下排序。而折叠屏中，屏幕展开后便可以开辟出更大的可利用空间，将次级页面或者较为重要的内容曝光在第二屏，对信息的布局将带来全新的变化。设计师为保证大小屏下顺畅的阅读体验，需要对信息模块在不同空间布局下的流动性有更强的把控能力。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-1.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>更便捷的多任务操作</strong> 在过去的单屏体验中，用户只能将注意力完全集中在当前的界面中，一次只做一件事。但在实际生活中，用户面临的情景往往是主线任务和支线任务的频繁交错，并且根据会任务不同的性质自由调动自己的注意力重心，如边看视频边聊天、边看直播边逛街等等。在折叠屏中，设计师可以探索更多主线和支线交错进行的场景，利用折叠屏带来的更大的屏幕空间，可以让用户在不离开主线场景的基础上进行支线任务的处理，大大节约了在不同App上来回切换的操作成本。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-10.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>更直观的拖拽交互</strong> 此外，随着多任务处理越来越广泛使用，拖拽交互将成为重要的交互模式之一。文本、表情包、图片、视频等交互对象，不再需要经过复杂的分享转发流程才能在不同App中流转，通过拖拽的方式可以更直观地进行交互。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-13.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>双面屏互动玩法</strong> 外折叠屏在折叠状态下可转为双面屏，等于是给用户增加多一个观看视角。例如华为 Mate X 的镜像拍摄可以让被拍摄者即时获知自己的镜头影像是否满意，这一拍女友神器有望成为直男拍摄终结者。在未来更多的多人观看和互动玩法将被开拓出来。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-37.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> △ 华为Mate X 的镜像拍摄 未来随着5G通讯技术的成长，越来越多的设备可以同时加入物联网，人们的生活将被各种智能设备围绕，设计师需要参与更多屏幕外的设计，让不同设备串联在一起协同合作，让用户能更加自在地享受科技的便利。</p>
<h4 id="疫情催生新的线上体验"><a href="#疫情催生新的线上体验" class="headerlink" title="疫情催生新的线上体验"></a>疫情催生新的线上体验</h4><p>席卷全球的新冠疫情让数十亿用户乖乖待在家里。过去需要花费大量精力去教育的用户使用习惯因为疫情纷纷转变。云购物、云蹦迪、云赏樱、云监工……人们足不出户便可还原许多线下场景。随着用户线上和线下生活的界限进一步模糊，用户对于应用的效率和情感诉求也发生了变化。</p>
<h5 id="1-更关注效率导向"><a href="#1-更关注效率导向" class="headerlink" title="1. 更关注效率导向"></a>1. 更关注效率导向</h5><p>疫情让远程办公学习需求剧增，多人协作场景越来越频繁，许多企业随之升级了电话、视频会议、文档制作等多人协作效率软件。过去仅仅考虑少人场景协作的方式不适用，设计师需要比以往更多地考虑多人协作场景下，如何对海量密集的信息进行分析处理和展示。 在学习方式上，由于线下学习转移至线上，学生群体对于娱乐向软件也有了效率诉求。为了顺应用户诉求变化，2020年5月QQ推出学习模式，屏蔽娱乐性的内容推送，让学生更专注在学习上。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-21.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"></p>
<h5 id="2-更注重缓解社交疏离感"><a href="#2-更注重缓解社交疏离感" class="headerlink" title="2. 更注重缓解社交疏离感"></a>2. 更注重缓解社交疏离感</h5><p>除了效率诉求急剧提升以外，随着长时间的线上学习与办公所产生社交疏离感和缺失感，人们对于线上学习工作的情感化诉求也进一步增强。 2020年推出的plagi远程办公软件支持设置每个人的avartar形象，让大家在远程办公时依旧能时刻感受到彼此的存在。在完成任务时还可以放鞭炮庆祝，让员工能感受到亲密无间的线上办公体验。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-15.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 设计师需要更加关注如何让线上生活进一步与现实生活圈和时间线接轨，通过拓展真实社交下的更多伴生行为让线上也能还原线下的真实场景细节和互动体验，以弥补用户对真实社交的缺失感。</p>
<h5 id="3-加速人和信息的强连接"><a href="#3-加速人和信息的强连接" class="headerlink" title="3. 加速人和信息的强连接"></a>3. 加速人和信息的强连接</h5><p>疫情的发生加速了人与信息之间的连接。人们越来越习惯将自身的身体资料、心情状态等信息沉淀在智能设备上。 为了做好广大市民群众的健康监测服务，辅助疫情防控工作，微信和支付宝在2020年年初都上线了健康码服务，不同颜色的健康码代表人们不同的健康情况，市民出入特定场所都需初始健康码。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-41.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 随着人的数据化越来越深入，个人身份信息的线上化在各平台上将成为更加通用的能力。设计师需要考虑如何更自然更低成本地将线下动态变化的资料信息线上化，更有效地对用户信息进行加工处理，以及记忆用户的使用习惯和行为，以便帮助用户更高效地完成任务。 疫情的出现加速了线下生活线上化，短短时间内我们看到日常习以为常的应用为响应疫情下的特殊需求纷纷出现改造，钉钉、QQ群被改造成上网课、批改作业的地方，医疗卫生公众号开辟了实时疫情播报与辟谣通道，无接触设计和服务需求异常突出……这也启发了设计师需要保持对突发事件的敏感力以及应急能力，在日常生活中留心思考，为日后突发事件提供充足的场景支撑。</p>
<h4 id="关注以人为本"><a href="#关注以人为本" class="headerlink" title="关注以人为本"></a>关注以人为本</h4><p>在汹涌的资本语境下，互联网设计师裹挟在商业驱动的结果导向中狂奔，对设计的伦理和责任鲜有发声，但伴随着互联网红利退潮，发展放缓，狂奔之下的人本问题也逐渐浮出水面。在大趋势下，UX设计师需要培养自身设计对伦理和责任的敏感度，在满足商业目的外，重拾节操，为多群体，为大社会设计，更加注重「以人为本」。</p>
<h5 id="1-更包容性的设计"><a href="#1-更包容性的设计" class="headerlink" title="1. 更包容性的设计"></a>1. 更包容性的设计</h5><p>包容性设计师指在做设计产品的时候，考虑到各类用户的诉求，输出具有包容性的设计方案。包容性设计依旧是2020年设计主题之一，伴随着互联网产品全球化，在通用性和包容性上也提出了新的要求。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-22.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>为身障人士设计</strong> 三星在2019年针对东南亚市场推出了一款让聋盲人士和健全人实时交流的app：Good Vibes，盲聋人轻击屏幕输入摩斯电码，预先连线好的另一台手机就会显示从盲聋人发来的短信。健全人用普通的文字输入回复，在盲聋人这一端就会翻译成摩斯电码、以手机振动的方式读出短信内容。 GOOD VIBES宣传视频：<a href="https://v.qq.com/x/page/g3108sr8qc9.html">https://v.qq.com/x/page/g3108sr8qc9.html</a> 饿了么：在饿了么送货骑手中，约8%受色盲色弱的困扰（全国男性群体中红绿色盲色弱占比达8%-9%，饿了么骑手男性占比90%），为此饿了么设计团队在2019年对app的进行了重新设计，包括使用WCAG无障碍色彩对比度，以及无障碍色盘，以及调整字阶，使用辅助图形等设计手段来解决部分骑手在送货途中使用APP的痛点问题。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-36.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> △ 饿了么UED：《为骑士创造平等 — 配送 App 的包容性设计》 <strong>跨年龄段设计</strong> 谷歌助手礼貌功能 ( Google Pretty Please ) ：开启谷歌助手礼貌功能后，如果使用者在下达指令的语句中包括「Please」，谷歌助手会对礼貌的请求表示感谢，以此培养孩子的礼貌言行。 Google Pretty Please功能宣传：<a href="https://v.qq.com/x/page/e3108ue3e2t.html">https://v.qq.com/x/page/e3108ue3e2t.html</a> Swift Playground：当10后小学生VITA君的编程课被「可敬的发量」刷满弹幕时，Swift playgrounds功不可没，这款为儿童新手学习编程的软件，用趣味的游戏方式为4岁以上低龄用户提供了一个学习编程的低门槛平台。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-48.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>为性别平等而设计</strong> 苹果emoji：回看历年苹果emoji的更新，从肤色平等，到性别、性向平等，再到为残疾人设计，2020年再为跨性别者增加新表情，性别平等依旧是包容性设计中重要一环。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-50.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> Airbnb插画：爱彼迎在插画系统中，也为不同肤色，不同职业，不同性别，以及身障人士进行了人物的绘制。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-30.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"></p>
<h5 id="2-关注用户隐私"><a href="#2-关注用户隐私" class="headerlink" title="2. 关注用户隐私"></a>2. 关注用户隐私</h5><p>2019是互联网科技隐私问题沉浮的一年，国外有Facebook因泄露隐私收到史上最大罚单，国内则打响了「人脸识别第一案」。笼罩在隐私信任危机下，个人信息和数据立法突飞猛进，美国推动《加州消费者隐私法案》，国内也将在2020年出台《个人信息保护法》和《数据安全法》。 <strong>MIUI12推出隐匿面具功能</strong> Android开放生态导致的权限隐私问题一直被用户所诟病，某些APP存在用户不授权就无法使用情况，针对这一情况，MIUI12推出了隐匿面具功能。当用户在开启某些APP要求授权权限时，可以选择空白通行证进行授权，从而保护用户真实信息。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-20.jpeg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 在MIUI12的更新中，还推出了照明弹、拦截网两项隐私保护功能 <strong>iOS 14剪贴板提醒</strong> 在iOS 14的更新中，保护用户隐私方面进一步升级。 其中剪贴板提醒设计很贴心，当用户打开应用，如果该应用读取了你剪贴板的内容，会在系统顶部弹出提示，用户能在第一时间意识到剪贴板内容被读取，帮助用户更好的保护自己的隐私内容。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-47.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"></p>
<h5 id="3-健康的数码生活方式"><a href="#3-健康的数码生活方式" class="headerlink" title="3. 健康的数码生活方式"></a>3. 健康的数码生活方式</h5><p>科技的发展是一把双刃剑，互联网产品的发展给用户带来便捷和沉浸体验的同时，也使得用户沉溺于科技所带来的惰性和投食之下，逐渐丧失了对真实生活的把控权，被科技绑架。 数字福祉（digital wellbeing）近年被频频提起，指科技产品需要权衡好数码产品和真实生活之间的平衡，防止数码产品过渡分散用户的注意力而影响生活质量。 Android Q 专注模式 Google Android Q Focus Mode Android Q的更新加入了专注模式，用户在专注模式下，可以在系统层面快捷地关闭使你分心的应用，让你聚焦于更重要的事情。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-32.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>防沉迷系统升级</strong> 推荐技术的进步，产品体验的升级，给用户带来了更合胃口的菜式和沉浸体验，但同时也被冠上了「电子海洛因」的称号。游戏或者内容产品的防沉迷系统依旧会是数字福祉下不可避免的趋势。 王者荣耀在2020年升级防沉迷系统，对青少年的娱乐时间和点券充值的限制进行了进一步升级。承接话。B站在2019年推出青少年模式，在该模式下，使用时长和内容推荐等做了定制化处理。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-24.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 2020年的UI设计趋势，一方面是对往年风格的衍变和细化，另一方面，在扁平克制的界面风格盛行后，设计师们向往更自由、更突破的视觉表达。</p>
<h4 id="UI的继承和创新"><a href="#UI的继承和创新" class="headerlink" title="UI的继承和创新"></a>UI的继承和创新</h4><p><strong>1. 深色模式</strong> 2019年iOS 13深色模式姗姗来迟，紧接着大厂APP相继推出此功能。在2020年，深色模式会继续普及外，也会在可视性和实现成本方面有更多细节打磨和研究。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-23.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-25.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>2. 新拟态</strong> 设计趋势的发展是螺旋式上升的，在扁平化设计流行之后，对物体的拟真再一次回归设计圈，新拟态以一种对旧拟物风格的再创新，重新流行起来。 新拟物风格（Neumorphism）缘起于设计师Alexander Plyuto发布在<a href="https://www.uisdc.com/topic/dribbble">dribbble</a>的一组作品，以投影重新对扁平界面进行了塑造，模仿出类似浮雕的视觉效果，感受耳目一新，引起大量设计师相尽模仿。 新拟态的实用性和可落地性有待商榷，但是作为一种新的风格受到设计师拥趸，也不失为下一波风潮到来前的灵感缪斯。</p>
<h2 id="壹周速读：「新拟物化设计」完全指南"><a href="#壹周速读：「新拟物化设计」完全指南" class="headerlink" title="壹周速读：「新拟物化设计」完全指南"></a>壹周速读：「新拟物化设计」完全指南</h2><p>上周文章不多，但是干货不少。 阅读文章 <em>&gt;&gt;</em></p>
<p><img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-53.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> WWDC2020对mac OS的更新也重新定义了新拟态设计语言，在mac OS新系统Big Sur中，图标的设计增添了轻微的渐变、投影、高光，以此来营造图标内元素之间的纵深关系。</p>
<h2 id="风格大变！设计师要知道的-macOS-11-核心设计规范"><a href="#风格大变！设计师要知道的-macOS-11-核心设计规范" class="headerlink" title="风格大变！设计师要知道的 macOS 11 核心设计规范"></a>风格大变！设计师要知道的 macOS 11 核心设计规范</h2><p>在今年的 WWDC 上，一直延续着拟物化设计接近 20 年的 Mac OS X 终于画上句号，新的 macOS Big Sur 则作为第 11 个大版本迈入全新的世代。 阅读文章 <em>&gt;&gt;</em></p>
<p><img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-44.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>3. 多彩配色</strong> 在扁平简洁UI风格盛行之后，丰富的色彩依旧是设计趋势之一，大面积色块，碰撞配色，带来更具冲击感的视觉体验。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-29.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>4. 字体装饰化</strong> UI界面逐渐扁平，色块图标弱化，为突出页面重心和内容，iOS 11在界面标题上使用更大的字号，更粗的字重。近年在大标题的风格衍变下，文字在传达信息外，也开始有了装饰性作用，采用超大字体，成为页面排版美化的一部分。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-19.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-4.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-6.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>5. 更大圆角</strong> 大圆角的风格会继续延续，相较以往，卡片的处理圆角会更大，随之带来的是多的留白处理，结合大字号，带来更透气通透的视觉感受。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-40.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> Mac OS Big Sur的界面相对旧版本采用了更大的圆角；系统图标的设计统一成圆角矩形。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-28.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-35.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>6. 更丰富的插图</strong> UI插图的丰富体现在样式和内容上，样式上开始3D化，内容上更注重插图叙事的表达。 <strong>7. 3D插图</strong> 3D图形往年更多运用在动态影像或运营类设计中，随着3D的普及运用，UI插图也会迎来3D化，给用户带来更立体，更新鲜的视觉感受。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-42.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>8. 讲求叙事表意</strong> 相较于往年追求形式的UI插图，新趋势下的插图更讲求功能性，每一副插图都承载一定的作用——传达功能信息或透传品牌情感；同时插图更讲求画面表意和情节，给用户叙事性的视觉体验，增进用户和产品之间的情感联系。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-51.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>9. 插图组件化</strong> 插画的流行，随之而来的是成本的水涨船高——一套系列插图为保持风格统一，往往由唯一设计师绘制，同时为兼容各类场景，设计师往往要绘制多张。 为解决插图的成本和效率，插图开始以组件化的方式进行绘制——插图设计师将插画进行拆分绘制——不同人物，不同场景，不同物件等，再通过组件化的拼接合成，使用组件的设计师可以根据需求场景自由组合，也避免了风格不统一问题。 设计师Pablo Stanley将日常绘制的插画制成一套矢量插图组件库，将人物分为：半身、全身和坐姿3大类。通过不同表情、发型和服装可自由搭配出近60万种组合。 Pablo Stanley人物插画系统：<a href="https://v.qq.com/x/page/s3108yeyhmt.html">https://v.qq.com/x/page/s3108yeyhmt.html</a></p>
<h2 id="免费可商用！这个网站提供超过-58-万种组合的手绘插画素材"><a href="#免费可商用！这个网站提供超过-58-万种组合的手绘插画素材" class="headerlink" title="免费可商用！这个网站提供超过 58 万种组合的手绘插画素材"></a>免费可商用！这个网站提供超过 58 万种组合的手绘插画素材</h2><p>本文要推荐的「Open Peeps」是一个矢量的手绘免费图库，主要以人物为主，比较特别的是它其实是一个有系统的涂鸦，可以在人物间进行混搭，产生更多种变化。 阅读文章 <em>&gt;&gt;</em></p>
<p><strong>10. 多维度动画表现</strong> 新趋势下，动画一方面回溯复古线描手绘风格，另一方面追求更三维的体验，同时帧率进一步提升，追求更流畅的视觉感受。 <strong>11. 手绘动画</strong> 手绘插图是往年的热门，其随性自然的笔触，能给用户带来亲切的感受，在新的趋势下，动画的加入赋予<a href="https://www.uisdc.com/tag/%e6%89%8b%e7%bb%98">手绘</a>插图一份灵性和趣味。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-8.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-ct-20200705-20.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>12. 3D运动</strong> Google Material Design通过卡片投影层级和二维动画规律，赋予扁平界面Z轴的纵深感。随着3D的普及流行，新趋势下的界面，界面的运动从二维走向三维，表现出3D场景下透视感。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-3.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-5.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>13. 高帧率动画</strong> 高帧率影视从线下电影院移步到线上流媒体，手机高帧率屏幕从90Hz到120Hz逐步升级，用户对画面流畅的定义一再刷新，UI动画的帧率升级也会是新的一轮趋势。 Telegram的表情采用了高帧率动画，给用户更流畅的视觉感受。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-17.gif" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"></p>
<h4 id="更高效的涉及协作方式"><a href="#更高效的涉及协作方式" class="headerlink" title="更高效的涉及协作方式"></a>更高效的涉及协作方式</h4><p>体验的持续升级，产品的高速迭代，对UX设计师的设计师效率提出了更高的要求。高效的设计方式是一个永恒的趋势。 <strong>1. 从本地文件到云端协作</strong> 传统的文件交接方式效率低下，导致设计师之间信息不对称，最终影响产品的一致性体验。近些年在线设计协同工具发展迅速，从UI设计、 设计交付以及组件协同等环节上给设计师提供更加高效实时的协作体验，获得大量UX设计师的簇拥。在2019 uxtool的设计工具调研中，在线设计协同工具佼佼者figma以其协作和性能优势，大有追赶<a href="https://www.uisdc.com/tag/sketch">sketch</a>之势。</p>
<h2 id="Figma会取代Sketch的地位吗？来看这篇超全面的对比分析！"><a href="#Figma会取代Sketch的地位吗？来看这篇超全面的对比分析！" class="headerlink" title="Figma会取代Sketch的地位吗？来看这篇超全面的对比分析！"></a>Figma会取代Sketch的地位吗？来看这篇超全面的对比分析！</h2><p>写在前面：最近因为疫情的影响，很多公司使用了远程办公的模式，同时也把很多远程协作的问题摆在了台面上。 阅读文章 <em>&gt;&gt;</em></p>
<p>随着团队对设计效率要求的提高，设计文档从本地走向云端协作是不可逆趋势。不过设计工具的迭代是需要成本的，尤其在大型设计团队，设计工具需要渡过阵痛期来完成迭代，进而提升设计效率和体验一致性。 <strong>2. 科学有效的设计系统</strong> UX的发展，从早期的静态规范到当下的动态设计系统，是为解决产品迭代增速后带来的设计效率和产品体验问题。商业驱动下的产品迭代速度有增无减，设计系统依旧会是未来几年的设计趋势之一。 这里说的设计系统不是广义上的设计系统，而是在互联网设计的发展中，对组件化设计逐步迭代升华的一套设计协作方法： 「设计系统（Design systems）是一组为了共同目标而服务的内在相互联系的设计模式和多人协同执行的方法。」（引自《Design systems》，Alla Kholmatova，C7210翻译）。 <strong>3. 设计系统历程衍变</strong> 组件化的发展历经规范文档到UI组件，再到设计系统，形态从最初对设计一致性的指导规范，到对产品研发流程的规范，以及产品设计价值观的输出，当下的设计系统以集大成者形式影响整个产品的设计形态。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-45.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 设计系统的结构见下图： <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-31.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> <strong>4. 设计系统的求同存异</strong> 设计系统并非一成不变的，他是一个动态进化的系统，会根据团队性质、产品特性在内容上有所区分——比如大团队更应该大而全，小团队更倾向小而精；成熟产品的设计系统更倾向于打造完整闭环的合作流程机制，新产品的设计系统应该以小为始，快速迭代…… 随着产品的垂直化，细分化，设计系统的趋势会是在趋势大同之下找到适合产品和团队自身的形态和节奏。 Material Design是一个包含了指导规范、组件，以及设计开发工具的自适应性设计系统。 它作为平台型性设计系统，更为大而全的规范了整个生态系统的设计风格，以及提供工具让研发者能快速产出符合规范的产品。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-26.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> △ Google生态庞大繁杂，Material Design更为全面 Ant Design作为一个为to B产品提供解决方案的平台，更多从设计可用性和完整性考虑设计系统的搭建。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-27.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> △ Ant Design通过模块化解决方案，降低冗余的生产成本，让设计者专注于更好的用户体验 QQ作为一款面向95后的2C社交产品，其设计系统Q语言从风格调性上对设计进行规范，同时给予设计师一定的自由度；也考虑到QQ内兼顾多个产品，以及界面主题样式，对基础组件的使用场景和代码进行了规范，方便设计和开发敏捷开发。</p>
<h2 id="大厂如何做设计？来看腾讯出品的-Q-设计语言"><a href="#大厂如何做设计？来看腾讯出品的-Q-设计语言" class="headerlink" title="大厂如何做设计？来看腾讯出品的 Q 设计语言"></a>大厂如何做设计？来看腾讯出品的 Q 设计语言</h2><p>已过弱冠之年的QQ不仅传递用户的信息与情感，更缩短了亿万用户的社交距离。 阅读文章 <em>&gt;&gt;</em></p>
<p><img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-46.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> Q语言，给予产品的自由调性之外，也针对主题和基础组件进行了规范。 每个产品和团队都有自身的特征，设计系统的建设也应该有的放矢，没有可照搬的标准答案，在大方向下找到适合自身的解决方案才是的可行之道，将效率最大化。 <strong>5. 科学有效的优化迭代</strong> 组件是设计系统中的重要组成部分，但是以往静态的、孤立的协作方式使得组件的更新迭代滞后和阻塞。随着设计系统的发展，设计师组件化思维的普及，组件的更新需要更科学高效的方式进行管理。 Figma在2019年推出的Design System Analytics功能，组件设计师可以借此查看组件的使用情况，包括引用次数，解组次数等，并可以生成组件使用情况的曲线趋势图，以数据的形式，科学高效地推动组件的优化迭代。 <img src="https://image.uisdc.com/wp-content/uploads/2020/07/uisdc-sj-20200705-52.jpg" alt="腾讯万字干货！2020-2021 设计趋势报告：用户体验篇"> 选择分析的时间段；组件使用的次数曲线图；团队使用情况；所有组件使用情况</p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>未来的用户体验会出现什么新趋势？人工智能等算法的发展、5G技术普及、新的智能设备形态、新的信息处理技术、新一代用户的喜好和口味……这些往后或将影响用户体验发展的走向。未来用户对体验的要求只会越来越高。 用户体验设计师需要了解更多的技术动向，但安身立命之本还是让用户真正受益：立足于用户真实使用场景，在理性价值层面上，打造可用、易用、高效的设计；在感性需求层上赋予情感上的愉悦性，在反思层面赋予意义价值。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
</search>
